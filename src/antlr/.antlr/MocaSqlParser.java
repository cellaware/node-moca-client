// Generated from c://dev//node-moca-client//src//antlr//MocaSql.g4 by ANTLR 4.13.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class MocaSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, ABSENT=2, ADD=3, AES=4, ALL=5, ALLOW_CONNECTIONS=6, ALLOW_MULTIPLE_EVENT_LOSS=7, 
		ALLOW_SINGLE_EVENT_LOSS=8, ALTER=9, AND=10, ANONYMOUS=11, ANY=12, APPEND=13, 
		APPLICATION=14, AS=15, ASC=16, ASYMMETRIC=17, ASYNCHRONOUS_COMMIT=18, 
		AUTHORIZATION=19, AUTHENTICATION=20, AUTOMATED_BACKUP_PREFERENCE=21, AUTOMATIC=22, 
		AVAILABILITY_MODE=23, BACKSLASH=24, BACKUP=25, BEFORE=26, BEGIN=27, BETWEEN=28, 
		BLOCK=29, BLOCKSIZE=30, BLOCKING_HIERARCHY=31, BREAK=32, BROWSE=33, BUFFER=34, 
		BUFFERCOUNT=35, BULK=36, BY=37, CACHE=38, CALLED=39, CASCADE=40, CASE=41, 
		CERTIFICATE=42, CHANGETABLE=43, CHANGES=44, CHECK=45, CHECKPOINT=46, CHECK_POLICY=47, 
		CHECK_EXPIRATION=48, CLASSIFIER_FUNCTION=49, CLOSE=50, CLUSTER=51, CLUSTERED=52, 
		COALESCE=53, COLLATE=54, COLUMN=55, COMPRESSION=56, COMMIT=57, COMPUTE=58, 
		CONFIGURATION=59, CONSTRAINT=60, CONTAINMENT=61, CONTAINS=62, CONTAINSTABLE=63, 
		CONTEXT=64, CONTINUE=65, CONTINUE_AFTER_ERROR=66, CONTRACT=67, CONTRACT_NAME=68, 
		CONVERSATION=69, CONVERT=70, COPY_ONLY=71, CREATE=72, CROSS=73, CURRENT=74, 
		CURRENT_DATE=75, CURRENT_TIME=76, CURRENT_TIMESTAMP=77, CURRENT_USER=78, 
		CURSOR=79, CYCLE=80, DATA_COMPRESSION=81, DATA_SOURCE=82, DATABASE=83, 
		DATABASE_MIRRORING=84, DBCC=85, DEALLOCATE=86, DECLARE=87, DEFAULT=88, 
		DEFAULT_DATABASE=89, DEFAULT_SCHEMA=90, DELETE=91, DENY=92, DESC=93, DIAGNOSTICS=94, 
		DIFFERENTIAL=95, DISK=96, DISTINCT=97, DISTRIBUTED=98, DOUBLE=99, DOUBLE_BACK_SLASH=100, 
		DOUBLE_FORWARD_SLASH=101, DROP=102, DTC_SUPPORT=103, DUMP=104, ELSE=105, 
		ENABLED=106, END=107, ENDPOINT=108, ERRLVL=109, ESCAPE=110, ERROR=111, 
		EVENT=112, EVENTDATA=113, EVENT_RETENTION_MODE=114, EXCEPT=115, EXECUTABLE_FILE=116, 
		EXECUTE=117, EXISTS=118, EXPIREDATE=119, EXIT=120, EXTENSION=121, EXTERNAL=122, 
		EXTERNAL_ACCESS=123, FAILOVER=124, FAILURECONDITIONLEVEL=125, FAN_IN=126, 
		FETCH=127, FILE=128, FILENAME=129, FILLFACTOR=130, FILE_SNAPSHOT=131, 
		FOR=132, FORCESEEK=133, FORCE_SERVICE_ALLOW_DATA_LOSS=134, FOREIGN=135, 
		FREETEXT=136, FREETEXTTABLE=137, FROM=138, FULL=139, FUNCTION=140, GET=141, 
		GOTO=142, GOVERNOR=143, GRANT=144, GROUP=145, HAVING=146, HASHED=147, 
		HEALTHCHECKTIMEOUT=148, IDENTITY=149, IDENTITYCOL=150, IDENTITY_INSERT=151, 
		IF=152, IIF=153, IN=154, INCLUDE=155, INCREMENT=156, INDEX=157, INFINITE=158, 
		INIT=159, INNER=160, INSERT=161, INSTEAD=162, INTERSECT=163, INTO=164, 
		IPV4_ADDR=165, IPV6_ADDR=166, IS=167, ISNULL=168, JOIN=169, KERBEROS=170, 
		KEY=171, KEY_PATH=172, KEY_STORE_PROVIDER_NAME=173, KILL=174, LANGUAGE=175, 
		LEFT=176, LIBRARY=177, LIFETIME=178, LIKE=179, LINENO=180, LINUX=181, 
		LISTENER_IP=182, LISTENER_PORT=183, LOAD=184, LOCAL_SERVICE_NAME=185, 
		LOG=186, MATCHED=187, MASTER=188, MAX_MEMORY=189, MAXTRANSFER=190, MAXVALUE=191, 
		MAX_DISPATCH_LATENCY=192, MAX_EVENT_SIZE=193, MAX_SIZE=194, MAX_OUTSTANDING_IO_PER_VOLUME=195, 
		MEDIADESCRIPTION=196, MEDIANAME=197, MEMBER=198, MEMORY_PARTITION_MODE=199, 
		MERGE=200, MESSAGE_FORWARDING=201, MESSAGE_FORWARD_SIZE=202, MINVALUE=203, 
		MIRROR=204, MUST_CHANGE=205, NATIONAL=206, NEGOTIATE=207, NOCHECK=208, 
		NOFORMAT=209, NOINIT=210, NONCLUSTERED=211, NONE=212, NOREWIND=213, NOSKIP=214, 
		NOUNLOAD=215, NO_CHECKSUM=216, NO_COMPRESSION=217, NO_EVENT_LOSS=218, 
		NOT=219, NOTIFICATION=220, NTLM=221, NULL=222, NULLIF=223, OF=224, OFF=225, 
		OFFSETS=226, OLD_PASSWORD=227, ON=228, ON_FAILURE=229, OPEN=230, OPENDATASOURCE=231, 
		OPENQUERY=232, OPENROWSET=233, OPENXML=234, OPTION=235, OR=236, ORDER=237, 
		OUTER=238, OVER=239, PAGE=240, PARAM_NODE=241, PARTIAL=242, PASSWORD=243, 
		PERCENT=244, PERMISSION_SET=245, PER_CPU=246, PER_DB=247, PER_NODE=248, 
		PIVOT=249, PLAN=250, PLATFORM=251, POLICY=252, PRECISION=253, PREDICATE=254, 
		PRIMARY=255, PRINT=256, PROC=257, PROCEDURE=258, PROCESS=259, PUBLIC=260, 
		PYTHON=261, R=262, RAISERROR=263, RAW=264, READ=265, READTEXT=266, READ_WRITE_FILEGROUPS=267, 
		RECONFIGURE=268, REFERENCES=269, REGENERATE=270, RELATED_CONVERSATION=271, 
		RELATED_CONVERSATION_GROUP=272, REPLICATION=273, REQUIRED=274, RESET=275, 
		RESTART=276, RESTORE=277, RESTRICT=278, RESUME=279, RETAINDAYS=280, RETURN=281, 
		RETURNS=282, REVERT=283, REVOKE=284, REWIND=285, RIGHT=286, ROLLBACK=287, 
		ROLE=288, ROWCOUNT=289, ROWGUIDCOL=290, RSA_512=291, RSA_1024=292, RSA_2048=293, 
		RSA_3072=294, RSA_4096=295, SAFETY=296, RULE=297, SAFE=298, SAVE=299, 
		SCHEDULER=300, SCHEMA=301, SCHEME=302, SECURITYAUDIT=303, SELECT=304, 
		SEMANTICKEYPHRASETABLE=305, SEMANTICSIMILARITYDETAILSTABLE=306, SEMANTICSIMILARITYTABLE=307, 
		SERVER=308, SERVICE=309, SERVICE_BROKER=310, SERVICE_NAME=311, SESSION=312, 
		SESSION_USER=313, SET=314, SETUSER=315, SHUTDOWN=316, SID=317, SKIP_KEYWORD=318, 
		SOFTNUMA=319, SOME=320, SOURCE=321, SPECIFICATION=322, SPLIT=323, SQLDUMPERFLAGS=324, 
		SQLDUMPERPATH=325, SQLDUMPERTIMEOUT=326, STATISTICS=327, STATE=328, STATS=329, 
		START=330, STARTED=331, STARTUP_STATE=332, STOP=333, STOPPED=334, STOP_ON_ERROR=335, 
		SUPPORTED=336, SYSTEM_USER=337, TABLE=338, TABLESAMPLE=339, TAPE=340, 
		TARGET=341, TCP=342, TEXTSIZE=343, THEN=344, TO=345, TOP=346, TRACK_CAUSALITY=347, 
		TRAN=348, TRANSACTION=349, TRANSFER=350, TRIGGER=351, TRUNCATE=352, TSEQUAL=353, 
		UNCHECKED=354, UNION=355, UNIQUE=356, UNLOCK=357, UNPIVOT=358, UNSAFE=359, 
		UPDATE=360, UPDATETEXT=361, URL=362, USE=363, USED=364, USER=365, VALUES=366, 
		VARYING=367, VERBOSELOGGING=368, VIEW=369, VISIBILITY=370, WAITFOR=371, 
		WHEN=372, WHERE=373, WHILE=374, WINDOWS=375, WITH=376, WITHIN=377, WITHOUT=378, 
		WITNESS=379, WRITETEXT=380, ABSOLUTE=381, ACCENT_SENSITIVITY=382, ACTION=383, 
		ACTIVATION=384, ACTIVE=385, ADDRESS=386, AES_128=387, AES_192=388, AES_256=389, 
		AFFINITY=390, AFTER=391, AGGREGATE=392, ALGORITHM=393, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=394, 
		ALLOW_SNAPSHOT_ISOLATION=395, ALLOWED=396, ANSI_NULL_DEFAULT=397, ANSI_NULLS=398, 
		ANSI_PADDING=399, ANSI_WARNINGS=400, APPLICATION_LOG=401, APPLY=402, ARITHABORT=403, 
		ASSEMBLY=404, AUDIT=405, AUDIT_GUID=406, AUTO=407, AUTO_CLEANUP=408, AUTO_CLOSE=409, 
		AUTO_CREATE_STATISTICS=410, AUTO_SHRINK=411, AUTO_UPDATE_STATISTICS=412, 
		AUTO_UPDATE_STATISTICS_ASYNC=413, AVAILABILITY=414, AVG=415, BACKUP_PRIORITY=416, 
		BEGIN_DIALOG=417, BIGINT=418, BINARY_BASE64=419, BINARY_CHECKSUM=420, 
		BINDING=421, BLOB_STORAGE=422, BROKER=423, BROKER_INSTANCE=424, BULK_LOGGED=425, 
		CALLER=426, CAP_CPU_PERCENT=427, CAST=428, CATALOG=429, CATCH=430, CHANGE_RETENTION=431, 
		CHANGE_TRACKING=432, CHECKSUM=433, CHECKSUM_AGG=434, CLEANUP=435, COLLECTION=436, 
		COLUMN_MASTER_KEY=437, COMMITTED=438, COMPATIBILITY_LEVEL=439, CONCAT=440, 
		CONCAT_NULL_YIELDS_NULL=441, CONTENT=442, CONTROL=443, COOKIE=444, COUNT=445, 
		COUNT_BIG=446, COUNTER=447, CPU=448, CREATE_NEW=449, CREATION_DISPOSITION=450, 
		CREDENTIAL=451, CRYPTOGRAPHIC=452, CURSOR_CLOSE_ON_COMMIT=453, CURSOR_DEFAULT=454, 
		DATA=455, DATE_CORRELATION_OPTIMIZATION=456, DATEADD=457, DATEDIFF=458, 
		DATENAME=459, DATEPART=460, DAYS=461, DB_CHAINING=462, DB_FAILOVER=463, 
		DECRYPTION=464, DEFAULT_DOUBLE_QUOTE=465, DEFAULT_FULLTEXT_LANGUAGE=466, 
		DEFAULT_LANGUAGE=467, DELAY=468, DELAYED_DURABILITY=469, DELETED=470, 
		DENSE_RANK=471, DEPENDENTS=472, DES=473, DESCRIPTION=474, DESX=475, DHCP=476, 
		DIALOG=477, DIRECTORY_NAME=478, DISABLE=479, DISABLE_BROKER=480, DISABLED=481, 
		DISK_DRIVE=482, DOCUMENT=483, DYNAMIC=484, ELEMENTS=485, EMERGENCY=486, 
		EMPTY=487, ENABLE=488, ENABLE_BROKER=489, ENCRYPTED_VALUE=490, ENCRYPTION=491, 
		ENDPOINT_URL=492, ERROR_BROKER_CONVERSATIONS=493, EXCLUSIVE=494, EXECUTABLE=495, 
		EXIST=496, EXPAND=497, EXPIRY_DATE=498, EXPLICIT=499, FAIL_OPERATION=500, 
		FAILOVER_MODE=501, FAILURE=502, FAILURE_CONDITION_LEVEL=503, FAST=504, 
		FAST_FORWARD=505, FILEGROUP=506, FILEGROWTH=507, FILEPATH=508, FILESTREAM=509, 
		FILTER=510, FIRST=511, FIRST_VALUE=512, FOLLOWING=513, FORCE=514, FORCE_FAILOVER_ALLOW_DATA_LOSS=515, 
		FORCED=516, FORMAT=517, FORWARD_ONLY=518, FULLSCAN=519, FULLTEXT=520, 
		GB=521, GETDATE=522, GETUTCDATE=523, GLOBAL=524, GO=525, GROUP_MAX_REQUESTS=526, 
		GROUPING=527, GROUPING_ID=528, HADR=529, HASH=530, HEALTH_CHECK_TIMEOUT=531, 
		HIGH=532, HONOR_BROKER_PRIORITY=533, HOURS=534, IDENTITY_VALUE=535, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=536, 
		IMMEDIATE=537, IMPERSONATE=538, IMPORTANCE=539, INCLUDE_NULL_VALUES=540, 
		INCREMENTAL=541, INITIATOR=542, INPUT=543, INSENSITIVE=544, INSERTED=545, 
		INT=546, IP=547, ISOLATION=548, JOB=549, JSON=550, KB=551, KEEP=552, KEEPFIXED=553, 
		KEY_SOURCE=554, KEYS=555, KEYSET=556, LAG=557, LAST=558, LAST_VALUE=559, 
		LEAD=560, LEVEL=561, LIST=562, LISTENER=563, LISTENER_URL=564, LOB_COMPACTION=565, 
		LOCAL=566, LOCATION=567, LOCK=568, LOCK_ESCALATION=569, LOGIN=570, LOOP=571, 
		LOW=572, MANUAL=573, MARK=574, MATERIALIZED=575, MAX=576, MAX_CPU_PERCENT=577, 
		MAX_DOP=578, MAX_FILES=579, MAX_IOPS_PER_VOLUME=580, MAX_MEMORY_PERCENT=581, 
		MAX_PROCESSES=582, MAX_QUEUE_READERS=583, MAX_ROLLOVER_FILES=584, MAXDOP=585, 
		MAXRECURSION=586, MAXSIZE=587, MB=588, MEDIUM=589, MEMORY_OPTIMIZED_DATA=590, 
		MESSAGE=591, MIN=592, MIN_ACTIVE_ROWVERSION=593, MIN_CPU_PERCENT=594, 
		MIN_IOPS_PER_VOLUME=595, MIN_MEMORY_PERCENT=596, MINUTES=597, MIRROR_ADDRESS=598, 
		MIXED_PAGE_ALLOCATION=599, MODE=600, MODIFY=601, MOVE=602, MULTI_USER=603, 
		NAME=604, NESTED_TRIGGERS=605, NEW_ACCOUNT=606, NEW_BROKER=607, NEW_PASSWORD=608, 
		NEXT=609, NO=610, NO_TRUNCATE=611, NO_WAIT=612, NOCOUNT=613, NODES=614, 
		NOEXPAND=615, NON_TRANSACTED_ACCESS=616, NORECOMPUTE=617, NORECOVERY=618, 
		NOWAIT=619, NTILE=620, NUMANODE=621, NUMBER=622, NUMERIC_ROUNDABORT=623, 
		OBJECT=624, OFFLINE=625, OFFSET=626, OLD_ACCOUNT=627, ONLINE=628, ONLY=629, 
		OPEN_EXISTING=630, OPTIMISTIC=631, OPTIMIZE=632, OUT=633, OUTPUT=634, 
		OVERRIDE=635, OWNER=636, PAGE_VERIFY=637, PARAMETERIZATION=638, PARTITION=639, 
		PARTITIONS=640, PARTNER=641, PATH=642, POISON_MESSAGE_HANDLING=643, POOL=644, 
		PORT=645, PRECEDING=646, PRIMARY_ROLE=647, PRIOR=648, PRIORITY=649, PRIORITY_LEVEL=650, 
		PRIVATE=651, PRIVATE_KEY=652, PRIVILEGES=653, PROCEDURE_NAME=654, PROPERTY=655, 
		PROVIDER=656, PROVIDER_KEY_NAME=657, QUERY=658, QUEUE=659, QUEUE_DELAY=660, 
		QUOTED_IDENTIFIER=661, RANGE=662, RANK=663, RC2=664, RC4=665, RC4_128=666, 
		READ_COMMITTED_SNAPSHOT=667, READ_ONLY=668, READ_ONLY_ROUTING_LIST=669, 
		READ_WRITE=670, READONLY=671, REBUILD=672, RECEIVE=673, RECOMPILE=674, 
		RECOVERY=675, RECURSIVE_TRIGGERS=676, RELATIVE=677, REMOTE=678, REMOTE_SERVICE_NAME=679, 
		REMOVE=680, REORGANIZE=681, REPEATABLE=682, REPLICA=683, REQUEST_MAX_CPU_TIME_SEC=684, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=685, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=686, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=687, RESERVE_DISK_SPACE=688, 
		RESOURCE=689, RESOURCE_MANAGER_LOCATION=690, RESTRICTED_USER=691, RETENTION=692, 
		ROBUST=693, ROOT=694, ROUTE=695, ROW=696, ROW_NUMBER=697, ROWGUID=698, 
		ROWS=699, SAMPLE=700, SCHEMABINDING=701, SCOPED=702, SCROLL=703, SCROLL_LOCKS=704, 
		SEARCH=705, SECONDARY=706, SECONDARY_ONLY=707, SECONDARY_ROLE=708, SECONDS=709, 
		SECRET=710, SECURITY=711, SECURITY_LOG=712, SEEDING_MODE=713, SELF=714, 
		SEMI_SENSITIVE=715, SEND=716, SENT=717, SEQUENCE=718, SERIALIZABLE=719, 
		SESSION_TIMEOUT=720, SETERROR=721, SHARE=722, SHOWPLAN=723, SIGNATURE=724, 
		SIMPLE=725, SINGLE_USER=726, SIZE=727, SMALLINT=728, SNAPSHOT=729, SPATIAL_WINDOW_MAX_CELLS=730, 
		STANDBY=731, START_DATE=732, STATIC=733, STATS_STREAM=734, STATUS=735, 
		STATUSONLY=736, STDEV=737, STDEVP=738, STOPLIST=739, STRING_AGG=740, STUFF=741, 
		SUBJECT=742, SUBSCRIPTION=743, SUM=744, SUSPEND=745, SYMMETRIC=746, SYNCHRONOUS_COMMIT=747, 
		SYNONYM=748, SYSTEM=749, TAKE=750, TARGET_RECOVERY_TIME=751, TB=752, TEXTIMAGE_ON=753, 
		THROW=754, TIES=755, TIME=756, TIMEOUT=757, TIMER=758, TINYINT=759, TORN_PAGE_DETECTION=760, 
		TRANSFORM_NOISE_WORDS=761, TRIPLE_DES=762, TRIPLE_DES_3KEY=763, TRUSTWORTHY=764, 
		TRY=765, TSQL=766, TWO_DIGIT_YEAR_CUTOFF=767, TYPE=768, TYPE_WARNING=769, 
		UNBOUNDED=770, UNCOMMITTED=771, UNKNOWN=772, UNLIMITED=773, UOW=774, USING=775, 
		VALID_XML=776, VALIDATION=777, VALUE=778, VAR=779, VARP=780, VIEW_METADATA=781, 
		VIEWS=782, WAIT=783, WELL_FORMED_XML=784, WITHOUT_ARRAY_WRAPPER=785, WORK=786, 
		WORKLOAD=787, XML=788, XMLDATA=789, XMLNAMESPACES=790, XMLSCHEMA=791, 
		XSINIL=792, DOLLAR_ACTION=793, MOCA_ONSTACK=794, MOCA_IGNORE=795, SPACE=796, 
		COMMENT=797, LINE_COMMENT=798, DOUBLE_QUOTE_ID=799, SINGLE_QUOTE=800, 
		SQUARE_BRACKET_ID=801, LOCAL_ID=802, MOCA_ENVIRONMENT_VARIABLE=803, MOCA_AT_MINUS_VARIABLE=804, 
		MOCA_AT_PLUS_VARIABLE=805, MOCA_AT_STAR=806, DECIMAL=807, ID=808, QUOTED_URL=809, 
		QUOTED_HOST_AND_PORT=810, STRING=811, BINARY=812, FLOAT=813, REAL=814, 
		EQUAL=815, NOT_EQUAL=816, GREATER=817, LESS=818, GREATER_EQUAL=819, LESS_EQUAL=820, 
		EXCLAMATION=821, PLUS_ASSIGN=822, MINUS_ASSIGN=823, MULT_ASSIGN=824, DIV_ASSIGN=825, 
		MOD_ASSIGN=826, AND_ASSIGN=827, XOR_ASSIGN=828, OR_ASSIGN=829, DOUBLE_BAR=830, 
		DOT=831, UNDERLINE=832, AT=833, SHARP=834, DOLLAR=835, LR_BRACKET=836, 
		RR_BRACKET=837, COMMA=838, SEMI=839, COLON=840, STAR=841, DIVIDE=842, 
		MODULE=843, PLUS=844, MINUS=845, BIT_NOT=846, BIT_OR=847, BIT_AND=848, 
		BIT_XOR=849, IPV4_OCTECT=850;
	public static final int
		RULE_moca_sql_script = 0, RULE_batch = 1, RULE_sql_clauses = 2, RULE_sql_clause = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_drop_sequence = 6, RULE_alter_sequence = 7, 
		RULE_create_sequence = 8, RULE_delete_statement = 9, RULE_delete_statement_from = 10, 
		RULE_insert_statement = 11, RULE_insert_statement_value = 12, RULE_select_statement = 13, 
		RULE_update_statement = 14, RULE_output_clause = 15, RULE_output_dml_list_elem = 16, 
		RULE_output_column_name = 17, RULE_create_index = 18, RULE_create_table = 19, 
		RULE_table_options = 20, RULE_create_view = 21, RULE_view_attribute = 22, 
		RULE_alter_table = 23, RULE_host = 24, RULE_drop_index = 25, RULE_drop_relational_or_xml_or_spatial_index = 26, 
		RULE_drop_backward_compatible_index = 27, RULE_drop_table = 28, RULE_drop_view = 29, 
		RULE_rowset_function_limited = 30, RULE_openquery = 31, RULE_opendatasource = 32, 
		RULE_execute_statement = 33, RULE_execute_body = 34, RULE_execute_statement_arg = 35, 
		RULE_execute_var_string = 36, RULE_column_def_table_constraints = 37, 
		RULE_column_def_table_constraint = 38, RULE_column_definition = 39, RULE_materialized_column_definition = 40, 
		RULE_column_constraint = 41, RULE_table_constraint = 42, RULE_on_delete = 43, 
		RULE_on_update = 44, RULE_index_options = 45, RULE_index_option = 46, 
		RULE_constant_LOCAL_ID = 47, RULE_expression = 48, RULE_moca_at_variable = 49, 
		RULE_moca_environment_variable = 50, RULE_moca_at_minus_variable = 51, 
		RULE_moca_at_plus_variable = 52, RULE_moca_at_star = 53, RULE_moca_integration_variable = 54, 
		RULE_primitive_expression = 55, RULE_case_expression = 56, RULE_unary_operator_expression = 57, 
		RULE_bracket_expression = 58, RULE_constant_expression = 59, RULE_subquery = 60, 
		RULE_with_expression = 61, RULE_common_table_expression = 62, RULE_update_elem = 63, 
		RULE_search_condition_list = 64, RULE_search_condition = 65, RULE_search_condition_and = 66, 
		RULE_search_condition_not = 67, RULE_predicate = 68, RULE_query_expression = 69, 
		RULE_sql_union = 70, RULE_query_specification = 71, RULE_top_clause = 72, 
		RULE_top_percent = 73, RULE_top_count = 74, RULE_order_by_clause = 75, 
		RULE_for_clause = 76, RULE_xml_common_directives = 77, RULE_order_by_expression = 78, 
		RULE_group_by_item = 79, RULE_option_clause = 80, RULE_option = 81, RULE_optimize_for_arg = 82, 
		RULE_select_list = 83, RULE_udt_method_arguments = 84, RULE_asterisk = 85, 
		RULE_column_elem = 86, RULE_udt_elem = 87, RULE_expression_elem = 88, 
		RULE_select_list_elem = 89, RULE_table_sources = 90, RULE_table_source = 91, 
		RULE_table_source_item_joined = 92, RULE_table_source_item = 93, RULE_open_xml = 94, 
		RULE_schema_declaration = 95, RULE_column_declaration = 96, RULE_change_table = 97, 
		RULE_join_part = 98, RULE_pivot_clause = 99, RULE_unpivot_clause = 100, 
		RULE_full_column_name_list = 101, RULE_table_name_with_hint = 102, RULE_rowset_function = 103, 
		RULE_bulk_option = 104, RULE_derived_table = 105, RULE_function_call = 106, 
		RULE_xml_data_type_methods = 107, RULE_value_method = 108, RULE_query_method = 109, 
		RULE_exist_method = 110, RULE_modify_method = 111, RULE_nodes_method = 112, 
		RULE_switch_section = 113, RULE_switch_search_condition_section = 114, 
		RULE_as_column_alias = 115, RULE_as_table_alias = 116, RULE_table_alias = 117, 
		RULE_with_table_hints = 118, RULE_insert_with_table_hints = 119, RULE_table_hint = 120, 
		RULE_index_value = 121, RULE_column_alias_list = 122, RULE_column_alias = 123, 
		RULE_table_value_constructor = 124, RULE_expression_list = 125, RULE_ranking_windowed_function = 126, 
		RULE_aggregate_windowed_function = 127, RULE_analytic_windowed_function = 128, 
		RULE_all_distinct_expression = 129, RULE_over_clause = 130, RULE_row_or_range_clause = 131, 
		RULE_window_frame_extent = 132, RULE_window_frame_bound = 133, RULE_window_frame_preceding = 134, 
		RULE_window_frame_following = 135, RULE_full_table_name = 136, RULE_table_name = 137, 
		RULE_simple_name = 138, RULE_func_proc_name_schema = 139, RULE_func_proc_name_database_schema = 140, 
		RULE_func_proc_name_server_database_schema = 141, RULE_ddl_object = 142, 
		RULE_full_column_name = 143, RULE_column_name_list_with_order = 144, RULE_column_name_list = 145, 
		RULE_cursor_name = 146, RULE_on_off = 147, RULE_clustered = 148, RULE_null_notnull = 149, 
		RULE_null_or_default = 150, RULE_scalar_function_name = 151, RULE_data_type = 152, 
		RULE_constant = 153, RULE_sign = 154, RULE_id = 155, RULE_simple_id = 156, 
		RULE_comparison_operator = 157, RULE_assignment_operator = 158;
	private static String[] makeRuleNames() {
		return new String[] {
			"moca_sql_script", "batch", "sql_clauses", "sql_clause", "dml_clause", 
			"ddl_clause", "drop_sequence", "alter_sequence", "create_sequence", "delete_statement", 
			"delete_statement_from", "insert_statement", "insert_statement_value", 
			"select_statement", "update_statement", "output_clause", "output_dml_list_elem", 
			"output_column_name", "create_index", "create_table", "table_options", 
			"create_view", "view_attribute", "alter_table", "host", "drop_index", 
			"drop_relational_or_xml_or_spatial_index", "drop_backward_compatible_index", 
			"drop_table", "drop_view", "rowset_function_limited", "openquery", "opendatasource", 
			"execute_statement", "execute_body", "execute_statement_arg", "execute_var_string", 
			"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
			"materialized_column_definition", "column_constraint", "table_constraint", 
			"on_delete", "on_update", "index_options", "index_option", "constant_LOCAL_ID", 
			"expression", "moca_at_variable", "moca_environment_variable", "moca_at_minus_variable", 
			"moca_at_plus_variable", "moca_at_star", "moca_integration_variable", 
			"primitive_expression", "case_expression", "unary_operator_expression", 
			"bracket_expression", "constant_expression", "subquery", "with_expression", 
			"common_table_expression", "update_elem", "search_condition_list", "search_condition", 
			"search_condition_and", "search_condition_not", "predicate", "query_expression", 
			"sql_union", "query_specification", "top_clause", "top_percent", "top_count", 
			"order_by_clause", "for_clause", "xml_common_directives", "order_by_expression", 
			"group_by_item", "option_clause", "option", "optimize_for_arg", "select_list", 
			"udt_method_arguments", "asterisk", "column_elem", "udt_elem", "expression_elem", 
			"select_list_elem", "table_sources", "table_source", "table_source_item_joined", 
			"table_source_item", "open_xml", "schema_declaration", "column_declaration", 
			"change_table", "join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
			"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
			"function_call", "xml_data_type_methods", "value_method", "query_method", 
			"exist_method", "modify_method", "nodes_method", "switch_section", "switch_search_condition_section", 
			"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
			"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
			"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function", 
			"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
			"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
			"window_frame_preceding", "window_frame_following", "full_table_name", 
			"table_name", "simple_name", "func_proc_name_schema", "func_proc_name_database_schema", 
			"func_proc_name_server_database_schema", "ddl_object", "full_column_name", 
			"column_name_list_with_order", "column_name_list", "cursor_name", "on_off", 
			"clustered", "null_notnull", "null_or_default", "scalar_function_name", 
			"data_type", "constant", "sign", "id", "simple_id", "comparison_operator", 
			"assignment_operator"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "':I_'", "'ABSENT'", "'ADD'", "'AES'", "'ALL'", "'ALLOW_CONNECTIONS'", 
			"'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_SINGLE_EVENT_LOSS'", "'ALTER'", 
			"'AND'", "'ANONYMOUS'", "'ANY'", "'APPEND'", "'APPLICATION'", "'AS'", 
			"'ASC'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", "'AUTHORIZATION'", 
			"'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", "'AUTOMATIC'", "'AVAILABILITY_MODE'", 
			"'\\'", "'BACKUP'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", 
			"'BLOCKING_HIERARCHY'", "'BREAK'", "'BROWSE'", "'BUFFER'", "'BUFFERCOUNT'", 
			"'BULK'", "'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASE'", "'CERTIFICATE'", 
			"'CHANGETABLE'", "'CHANGES'", "'CHECK'", "'CHECKPOINT'", "'CHECK_POLICY'", 
			"'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", "'CLOSE'", "'CLUSTER'", 
			"'CLUSTERED'", "'COALESCE'", "'COLLATE'", "'COLUMN'", "'COMPRESSION'", 
			"'COMMIT'", "'COMPUTE'", "'CONFIGURATION'", "'CONSTRAINT'", "'CONTAINMENT'", 
			"'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", "'CONTINUE'", "'CONTINUE_AFTER_ERROR'", 
			"'CONTRACT'", "'CONTRACT_NAME'", "'CONVERSATION'", null, "'COPY_ONLY'", 
			"'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
			"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", "'CYCLE'", "'DATA_COMPRESSION'", 
			"'DATA_SOURCE'", "'DATABASE'", "'DATABASE_MIRRORING'", "'DBCC'", "'DEALLOCATE'", 
			"'DECLARE'", "'DEFAULT'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DELETE'", 
			"'DENY'", "'DESC'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", "'DISK'", "'DISTINCT'", 
			"'DISTRIBUTED'", "'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DTC_SUPPORT'", 
			"'DUMP'", "'ELSE'", "'ENABLED'", "'END'", "'ENDPOINT'", "'ERRLVL'", "'ESCAPE'", 
			"'ERROR'", "'EVENT'", null, "'EVENT_RETENTION_MODE'", "'EXCEPT'", "'EXECUTABLE_FILE'", 
			null, "'EXISTS'", "'EXPIREDATE'", "'EXIT'", "'EXTENSION'", "'EXTERNAL'", 
			"'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", "'FAN_IN'", 
			"'FETCH'", "'FILE'", "'FILENAME'", "'FILLFACTOR'", "'FILE_SNAPSHOT'", 
			"'FOR'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", "'FOREIGN'", 
			"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FUNCTION'", "'GET'", 
			"'GOTO'", "'GOVERNOR'", "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", 
			"'HEALTHCHECKTIMEOUT'", "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
			"'IF'", "'IIF'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INFINITE'", 
			"'INIT'", "'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'", 
			null, null, "'IS'", "'ISNULL'", "'JOIN'", "'KERBEROS'", "'KEY'", "'KEY_PATH'", 
			"'KEY_STORE_PROVIDER_NAME'", "'KILL'", "'LANGUAGE'", "'LEFT'", "'LIBRARY'", 
			"'LIFETIME'", "'LIKE'", "'LINENO'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
			"'LOAD'", "'LOCAL_SERVICE_NAME'", "'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", 
			"'MAXTRANSFER'", "'MAXVALUE'", "'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", 
			"'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
			"'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", "'MERGE'", "'MESSAGE_FORWARDING'", 
			"'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", 
			"'NATIONAL'", "'NEGOTIATE'", "'NOCHECK'", "'NOFORMAT'", "'NOINIT'", "'NONCLUSTERED'", 
			"'NONE'", "'NOREWIND'", "'NOSKIP'", "'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", 
			"'NO_EVENT_LOSS'", "'NOT'", "'NOTIFICATION'", "'NTLM'", "'NULL'", "'NULLIF'", 
			"'OF'", "'OFF'", "'OFFSETS'", "'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", 
			"'OPEN'", "'OPENDATASOURCE'", "'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", 
			"'OPTION'", "'OR'", "'ORDER'", "'OUTER'", "'OVER'", "'PAGE'", "'PARAM_NODE'", 
			"'PARTIAL'", "'PASSWORD'", "'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", 
			"'PER_DB'", "'PER_NODE'", "'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", 
			"'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", 
			"'PROCESS'", "'PUBLIC'", "'PYTHON'", "'R'", "'RAISERROR'", "'RAW'", "'READ'", 
			"'READTEXT'", "'READ_WRITE_FILEGROUPS'", "'RECONFIGURE'", "'REFERENCES'", 
			"'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
			"'REPLICATION'", "'REQUIRED'", "'RESET'", "'RESTART'", "'RESTORE'", "'RESTRICT'", 
			"'RESUME'", "'RETAINDAYS'", "'RETURN'", "'RETURNS'", "'REVERT'", "'REVOKE'", 
			"'REWIND'", "'RIGHT'", "'ROLLBACK'", "'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", 
			"'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", "'RSA_4096'", 
			"'SAFETY'", "'RULE'", "'SAFE'", "'SAVE'", "'SCHEDULER'", "'SCHEMA'", 
			"'SCHEME'", "'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'", 
			"'SEMANTICSIMILARITYDETAILSTABLE'", "'SEMANTICSIMILARITYTABLE'", "'SERVER'", 
			"'SERVICE'", "'SERVICE_BROKER'", "'SERVICE_NAME'", "'SESSION'", "'SESSION_USER'", 
			"'SET'", "'SETUSER'", "'SHUTDOWN'", "'SID'", "'SKIP'", "'SOFTNUMA'", 
			"'SOME'", "'SOURCE'", "'SPECIFICATION'", "'SPLIT'", "'SQLDUMPERFLAGS'", 
			"'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", "'STATISTICS'", "'STATE'", 
			"'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", "'STOP'", "'STOPPED'", 
			"'STOP_ON_ERROR'", "'SUPPORTED'", "'SYSTEM_USER'", "'TABLE'", "'TABLESAMPLE'", 
			"'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", "'THEN'", "'TO'", "'TOP'", 
			"'TRACK_CAUSALITY'", "'TRAN'", "'TRANSACTION'", "'TRANSFER'", "'TRIGGER'", 
			"'TRUNCATE'", "'TSEQUAL'", "'UNCHECKED'", "'UNION'", "'UNIQUE'", "'UNLOCK'", 
			"'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", "'URL'", "'USE'", 
			"'USED'", "'USER'", "'VALUES'", "'VARYING'", "'VERBOSELOGGING'", "'VIEW'", 
			"'VISIBILITY'", "'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOWS'", 
			"'WITH'", "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", "'ABSOLUTE'", 
			"'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", "'ADDRESS'", 
			"'AES_128'", "'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", "'AGGREGATE'", 
			"'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", "'ALLOW_SNAPSHOT_ISOLATION'", 
			"'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", "'ANSI_PADDING'", 
			"'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", "'ASSEMBLY'", 
			"'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
			"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
			"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", 
			"'BEGIN_DIALOG'", "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
			"'BINDING'", "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", 
			"'CALLER'", "'CAP_CPU_PERCENT'", null, "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", 
			"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
			"'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", "'CONCAT'", 
			"'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", "'COUNT'", 
			"'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
			"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", 
			"'DATA'", "'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", "'DATEDIFF'", 
			"'DATENAME'", "'DATEPART'", "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", 
			"'DECRYPTION'", null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", 
			"'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", "'DEPENDENTS'", 
			"'DES'", "'DESCRIPTION'", "'DESX'", "'DHCP'", "'DIALOG'", "'DIRECTORY_NAME'", 
			"'DISABLE'", "'DISABLE_BROKER'", "'DISABLED'", null, "'DOCUMENT'", "'DYNAMIC'", 
			"'ELEMENTS'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLE_BROKER'", 
			"'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'", 
			"'EXCLUSIVE'", "'EXECUTABLE'", "'EXIST'", "'EXPAND'", "'EXPIRY_DATE'", 
			"'EXPLICIT'", "'FAIL_OPERATION'", "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
			"'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", "'FILEPATH'", 
			"'FILESTREAM'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", 
			"'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCED'", "'FORMAT'", 
			"'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", "'GB'", "'GETDATE'", "'GETUTCDATE'", 
			"'GLOBAL'", "'GO'", "'GROUP_MAX_REQUESTS'", "'GROUPING'", "'GROUPING_ID'", 
			"'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", "'HIGH'", "'HONOR_BROKER_PRIORITY'", 
			"'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
			"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
			"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
			"'INT'", "'IP'", "'ISOLATION'", "'JOB'", "'JSON'", "'KB'", "'KEEP'", 
			"'KEEPFIXED'", "'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", 
			"'LAST_VALUE'", "'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", 
			"'LOB_COMPACTION'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", 
			"'LOGIN'", "'LOOP'", "'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", 
			"'MAX'", "'MAX_CPU_PERCENT'", "'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", 
			"'MAX_MEMORY_PERCENT'", "'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", 
			"'MAXDOP'", "'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
			"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
			"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
			"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
			"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
			"'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", "'NODES'", 
			"'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
			"'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
			"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
			"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
			"'OVERRIDE'", "'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", 
			"'PARTITIONS'", "'PARTNER'", "'PATH'", "'POISON_MESSAGE_HANDLING'", "'POOL'", 
			"'PORT'", "'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
			"'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
			"'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", "'QUEUE_DELAY'", 
			"'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
			"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
			"'READ_WRITE'", "'READONLY'", "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", 
			"'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", "'REMOTE_SERVICE_NAME'", 
			"'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", "'REQUEST_MAX_CPU_TIME_SEC'", 
			"'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
			"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
			"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
			"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
			"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
			"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
			"'SECRET'", "'SECURITY'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", 
			"'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", "'SERIALIZABLE'", 
			"'SESSION_TIMEOUT'", "'SETERROR'", "'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", 
			"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", 
			"'STANDBY'", "'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", 
			"'STATUSONLY'", "'STDEV'", "'STDEVP'", "'STOPLIST'", "'STRING_AGG'", 
			"'STUFF'", "'SUBJECT'", "'SUBSCRIPTION'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", 
			"'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'SYSTEM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", 
			"'TB'", "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", 
			"'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", "'TRANSFORM_NOISE_WORDS'", 
			"'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", "'TRY'", "'TSQL'", 
			"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", 
			"'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'UOW'", "'USING'", "'VALID_XML'", 
			"'VALIDATION'", "'VALUE'", "'VAR'", "'VARP'", "'VIEW_METADATA'", "'VIEWS'", 
			"'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", "'WORK'", "'WORKLOAD'", 
			"'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", "'XSINIL'", "'$ACTION'", 
			"'ONSTACK'", "'IGNORE'", null, null, null, null, "'''", null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, "'='", 
			null, "'>'", "'<'", "'>='", "'<='", "'!'", "'+='", "'-='", "'*='", "'/='", 
			"'%='", "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", "'@'", "'#'", "'$'", 
			"'('", "')'", "','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", 
			"'~'", "'|'", "'&'", "'^'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, "ABSENT", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS", 
			"ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND", 
			"APPLICATION", "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHORIZATION", 
			"AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", 
			"BACKSLASH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BLOCK", "BLOCKSIZE", 
			"BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK", 
			"BY", "CACHE", "CALLED", "CASCADE", "CASE", "CERTIFICATE", "CHANGETABLE", 
			"CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", 
			"CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", 
			"COLUMN", "COMPRESSION", "COMMIT", "COMPUTE", "CONFIGURATION", "CONSTRAINT", 
			"CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", "CONTINUE_AFTER_ERROR", 
			"CONTRACT", "CONTRACT_NAME", "CONVERSATION", "CONVERT", "COPY_ONLY", 
			"CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_USER", "CURSOR", "CYCLE", "DATA_COMPRESSION", "DATA_SOURCE", 
			"DATABASE", "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", 
			"DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", "DENY", "DESC", "DIAGNOSTICS", 
			"DIFFERENTIAL", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
			"DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", "DUMP", "ELSE", "ENABLED", 
			"END", "ENDPOINT", "ERRLVL", "ESCAPE", "ERROR", "EVENT", "EVENTDATA", 
			"EVENT_RETENTION_MODE", "EXCEPT", "EXECUTABLE_FILE", "EXECUTE", "EXISTS", 
			"EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", "FAILOVER", 
			"FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
			"FILE_SNAPSHOT", "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
			"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GET", 
			"GOTO", "GOVERNOR", "GRANT", "GROUP", "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", 
			"IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IIF", "IN", "INCLUDE", 
			"INCREMENT", "INDEX", "INFINITE", "INIT", "INNER", "INSERT", "INSTEAD", 
			"INTERSECT", "INTO", "IPV4_ADDR", "IPV6_ADDR", "IS", "ISNULL", "JOIN", 
			"KERBEROS", "KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", 
			"LEFT", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", "LISTENER_IP", 
			"LISTENER_PORT", "LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", 
			"MAX_MEMORY", "MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", 
			"MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", 
			"MEMBER", "MEMORY_PARTITION_MODE", "MERGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
			"MINVALUE", "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", "NOCHECK", 
			"NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", "NOREWIND", "NOSKIP", "NOUNLOAD", 
			"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NOT", "NOTIFICATION", 
			"NTLM", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", "ON", 
			"ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
			"OPTION", "OR", "ORDER", "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
			"PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", "PER_DB", "PER_NODE", 
			"PIVOT", "PLAN", "PLATFORM", "POLICY", "PRECISION", "PREDICATE", "PRIMARY", 
			"PRINT", "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", "R", "RAISERROR", 
			"RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", "RECONFIGURE", "REFERENCES", 
			"REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", "REPLICATION", 
			"REQUIRED", "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", "RETAINDAYS", 
			"RETURN", "RETURNS", "REVERT", "REVOKE", "REWIND", "RIGHT", "ROLLBACK", 
			"ROLE", "ROWCOUNT", "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", 
			"RSA_3072", "RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", 
			"SCHEMA", "SCHEME", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
			"SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SERVER", 
			"SERVICE", "SERVICE_BROKER", "SERVICE_NAME", "SESSION", "SESSION_USER", 
			"SET", "SETUSER", "SHUTDOWN", "SID", "SKIP_KEYWORD", "SOFTNUMA", "SOME", 
			"SOURCE", "SPECIFICATION", "SPLIT", "SQLDUMPERFLAGS", "SQLDUMPERPATH", 
			"SQLDUMPERTIMEOUT", "STATISTICS", "STATE", "STATS", "START", "STARTED", 
			"STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", "SUPPORTED", "SYSTEM_USER", 
			"TABLE", "TABLESAMPLE", "TAPE", "TARGET", "TCP", "TEXTSIZE", "THEN", 
			"TO", "TOP", "TRACK_CAUSALITY", "TRAN", "TRANSACTION", "TRANSFER", "TRIGGER", 
			"TRUNCATE", "TSEQUAL", "UNCHECKED", "UNION", "UNIQUE", "UNLOCK", "UNPIVOT", 
			"UNSAFE", "UPDATE", "UPDATETEXT", "URL", "USE", "USED", "USER", "VALUES", 
			"VARYING", "VERBOSELOGGING", "VIEW", "VISIBILITY", "WAITFOR", "WHEN", 
			"WHERE", "WHILE", "WINDOWS", "WITH", "WITHIN", "WITHOUT", "WITNESS", 
			"WRITETEXT", "ABSOLUTE", "ACCENT_SENSITIVITY", "ACTION", "ACTIVATION", 
			"ACTIVE", "ADDRESS", "AES_128", "AES_192", "AES_256", "AFFINITY", "AFTER", 
			"AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_SNAPSHOT_ISOLATION", 
			"ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", "ANSI_PADDING", "ANSI_WARNINGS", 
			"APPLICATION_LOG", "APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", 
			"AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", 
			"AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", "AVAILABILITY", 
			"AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", "BIGINT", "BINARY_BASE64", 
			"BINARY_CHECKSUM", "BINDING", "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", 
			"BULK_LOGGED", "CALLER", "CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", 
			"CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", 
			"COLLECTION", "COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", 
			"CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTENT", "CONTROL", "COOKIE", 
			"COUNT", "COUNT_BIG", "COUNTER", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", 
			"CREDENTIAL", "CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
			"DATA", "DATE_CORRELATION_OPTIMIZATION", "DATEADD", "DATEDIFF", "DATENAME", 
			"DATEPART", "DAYS", "DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", 
			"DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", 
			"DELETED", "DENSE_RANK", "DEPENDENTS", "DES", "DESCRIPTION", "DESX", 
			"DHCP", "DIALOG", "DIRECTORY_NAME", "DISABLE", "DISABLE_BROKER", "DISABLED", 
			"DISK_DRIVE", "DOCUMENT", "DYNAMIC", "ELEMENTS", "EMERGENCY", "EMPTY", 
			"ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", "ENCRYPTION", "ENDPOINT_URL", 
			"ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", "EXECUTABLE", "EXIST", "EXPAND", 
			"EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", "FAILOVER_MODE", "FAILURE", 
			"FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
			"FILEPATH", "FILESTREAM", "FILTER", "FIRST", "FIRST_VALUE", "FOLLOWING", 
			"FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", "FORCED", "FORMAT", "FORWARD_ONLY", 
			"FULLSCAN", "FULLTEXT", "GB", "GETDATE", "GETUTCDATE", "GLOBAL", "GO", 
			"GROUP_MAX_REQUESTS", "GROUPING", "GROUPING_ID", "HADR", "HASH", "HEALTH_CHECK_TIMEOUT", 
			"HIGH", "HONOR_BROKER_PRIORITY", "HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
			"IMMEDIATE", "IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", 
			"INITIATOR", "INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", 
			"JOB", "JSON", "KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", 
			"LAG", "LAST", "LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", 
			"LOB_COMPACTION", "LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", 
			"LOOP", "LOW", "MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", 
			"MAX_DOP", "MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", 
			"MAX_PROCESSES", "MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", 
			"MAXRECURSION", "MAXSIZE", "MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", 
			"MIN", "MIN_ACTIVE_ROWVERSION", "MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", 
			"MIN_MEMORY_PERCENT", "MINUTES", "MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", 
			"MODE", "MODIFY", "MOVE", "MULTI_USER", "NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", 
			"NEW_BROKER", "NEW_PASSWORD", "NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", 
			"NOCOUNT", "NODES", "NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", 
			"NORECOVERY", "NOWAIT", "NTILE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", 
			"OBJECT", "OFFLINE", "OFFSET", "OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", 
			"OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OVERRIDE", "OWNER", "PAGE_VERIFY", 
			"PARAMETERIZATION", "PARTITION", "PARTITIONS", "PARTNER", "PATH", "POISON_MESSAGE_HANDLING", 
			"POOL", "PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", 
			"PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", 
			"PROVIDER", "PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
			"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", 
			"READ_ONLY", "READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "REBUILD", 
			"RECEIVE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", 
			"REMOTE", "REMOTE_SERVICE_NAME", "REMOVE", "REORGANIZE", "REPEATABLE", 
			"REPLICA", "REQUEST_MAX_CPU_TIME_SEC", "REQUEST_MAX_MEMORY_GRANT_PERCENT", 
			"REQUEST_MEMORY_GRANT_TIMEOUT_SEC", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", 
			"RESERVE_DISK_SPACE", "RESOURCE", "RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", 
			"RETENTION", "ROBUST", "ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", 
			"ROWS", "SAMPLE", "SCHEMABINDING", "SCOPED", "SCROLL", "SCROLL_LOCKS", 
			"SEARCH", "SECONDARY", "SECONDARY_ONLY", "SECONDARY_ROLE", "SECONDS", 
			"SECRET", "SECURITY", "SECURITY_LOG", "SEEDING_MODE", "SELF", "SEMI_SENSITIVE", 
			"SEND", "SENT", "SEQUENCE", "SERIALIZABLE", "SESSION_TIMEOUT", "SETERROR", 
			"SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", "SIZE", "SMALLINT", 
			"SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STANDBY", "START_DATE", "STATIC", 
			"STATS_STREAM", "STATUS", "STATUSONLY", "STDEV", "STDEVP", "STOPLIST", 
			"STRING_AGG", "STUFF", "SUBJECT", "SUBSCRIPTION", "SUM", "SUSPEND", "SYMMETRIC", 
			"SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", "TAKE", "TARGET_RECOVERY_TIME", 
			"TB", "TEXTIMAGE_ON", "THROW", "TIES", "TIME", "TIMEOUT", "TIMER", "TINYINT", 
			"TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", "TRIPLE_DES", "TRIPLE_DES_3KEY", 
			"TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", 
			"UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", "UOW", "USING", "VALID_XML", 
			"VALIDATION", "VALUE", "VAR", "VARP", "VIEW_METADATA", "VIEWS", "WAIT", 
			"WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", "WORK", "WORKLOAD", "XML", 
			"XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XSINIL", "DOLLAR_ACTION", "MOCA_ONSTACK", 
			"MOCA_IGNORE", "SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", 
			"SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "MOCA_ENVIRONMENT_VARIABLE", 
			"MOCA_AT_MINUS_VARIABLE", "MOCA_AT_PLUS_VARIABLE", "MOCA_AT_STAR", "DECIMAL", 
			"ID", "QUOTED_URL", "QUOTED_HOST_AND_PORT", "STRING", "BINARY", "FLOAT", 
			"REAL", "EQUAL", "NOT_EQUAL", "GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", 
			"EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
			"MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", 
			"DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", 
			"COMMA", "SEMI", "COLON", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", 
			"BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", "IPV4_OCTECT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MocaSql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MocaSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Moca_sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MocaSqlParser.EOF, 0); }
		public List<BatchContext> batch() {
			return getRuleContexts(BatchContext.class);
		}
		public BatchContext batch(int i) {
			return getRuleContext(BatchContext.class,i);
		}
		public Moca_sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_sql_script; }
	}

	public final Moca_sql_scriptContext moca_sql_script() throws RecognitionException {
		Moca_sql_scriptContext _localctx = new Moca_sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_moca_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 1074266113L) != 0) || _la==INSERT || _la==SELECT || _la==UPDATE || _la==WITH || _la==LR_BRACKET) {
				{
				{
				setState(318);
				batch();
				}
				}
				setState(323);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(324);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BatchContext extends ParserRuleContext {
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch; }
	}

	public final BatchContext batch() throws RecognitionException {
		BatchContext _localctx = new BatchContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_batch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(326);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_clausesContext extends ParserRuleContext {
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MocaSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MocaSqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clauses; }
	}

	public final Sql_clausesContext sql_clauses() throws RecognitionException {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_clauses);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(332); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(328);
					sql_clause();
					setState(330);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SEMI) {
						{
						setState(329);
						match(SEMI);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(334); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_clauseContext extends ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clause; }
	}

	public final Sql_clauseContext sql_clause() throws RecognitionException {
		Sql_clauseContext _localctx = new Sql_clauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_clause);
		try {
			setState(338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case SELECT:
			case UPDATE:
			case WITH:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(336);
				dml_clause();
				}
				break;
			case ALTER:
			case CREATE:
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(337);
				ddl_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_clauseContext extends ParserRuleContext {
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dml_clause);
		try {
			setState(344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(340);
				delete_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(341);
				insert_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(342);
				select_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(343);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ddl_clauseContext extends ParserRuleContext {
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_ddl_clause);
		try {
			setState(356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(346);
				create_sequence();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(347);
				alter_sequence();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(348);
				drop_sequence();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(349);
				create_table();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(350);
				alter_table();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(351);
				drop_table();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(352);
				create_index();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(353);
				drop_index();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(354);
				create_view();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(355);
				drop_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_sequenceContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_drop_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(358);
			match(DROP);
			setState(359);
			match(SEQUENCE);
			setState(362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(360);
				match(IF);
				setState(361);
				match(EXISTS);
				}
			}

			setState(378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0) || _la==COMMA) {
				{
				setState(365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(364);
					match(COMMA);
					}
				}

				setState(370);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					setState(367);
					((Drop_sequenceContext)_localctx).database_name = id();
					setState(368);
					match(DOT);
					}
					break;
				}
				setState(375);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					setState(372);
					((Drop_sequenceContext)_localctx).schema_name = id();
					setState(373);
					match(DOT);
					}
					break;
				}
				setState(377);
				((Drop_sequenceContext)_localctx).sequence_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public Token sequnce_increment;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode RESTART() { return getToken(MocaSqlParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(MocaSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(MocaSqlParser.MINVALUE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NO() { return getTokens(MocaSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MocaSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(MocaSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(MocaSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(MocaSqlParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(380);
			match(ALTER);
			setState(381);
			match(SEQUENCE);
			setState(385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(382);
				((Alter_sequenceContext)_localctx).schema_name = id();
				setState(383);
				match(DOT);
				}
				break;
			}
			setState(387);
			((Alter_sequenceContext)_localctx).sequence_name = id();
			setState(393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTART) {
				{
				setState(388);
				match(RESTART);
				setState(391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(389);
					match(WITH);
					setState(390);
					match(DECIMAL);
					}
					break;
				}
				}
			}

			setState(398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(395);
				match(INCREMENT);
				setState(396);
				match(BY);
				setState(397);
				((Alter_sequenceContext)_localctx).sequnce_increment = match(DECIMAL);
				}
			}

			setState(404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				setState(400);
				match(MINVALUE);
				setState(401);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(402);
				match(NO);
				setState(403);
				match(MINVALUE);
				}
				break;
			}
			setState(410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(406);
				match(MAXVALUE);
				setState(407);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(408);
				match(NO);
				setState(409);
				match(MAXVALUE);
				}
				break;
			}
			setState(415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				setState(412);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(413);
				match(NO);
				setState(414);
				match(CYCLE);
				}
				break;
			}
			setState(421);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CACHE:
				{
				setState(417);
				match(CACHE);
				setState(418);
				match(DECIMAL);
				}
				break;
			case NO:
				{
				setState(419);
				match(NO);
				setState(420);
				match(CACHE);
				}
				break;
			case EOF:
			case ALTER:
			case CREATE:
			case DELETE:
			case DROP:
			case INSERT:
			case SELECT:
			case UPDATE:
			case WITH:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode START() { return getToken(MocaSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode INCREMENT() { return getToken(MocaSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(MocaSqlParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(MocaSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MocaSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(MocaSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(MocaSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(MocaSqlParser.CACHE, 0); }
		public TerminalNode MINUS() { return getToken(MocaSqlParser.MINUS, 0); }
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(423);
			match(CREATE);
			setState(424);
			match(SEQUENCE);
			setState(428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				setState(425);
				((Create_sequenceContext)_localctx).schema_name = id();
				setState(426);
				match(DOT);
				}
				break;
			}
			setState(430);
			((Create_sequenceContext)_localctx).sequence_name = id();
			setState(433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(431);
				match(AS);
				setState(432);
				data_type();
				}
			}

			setState(438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==START) {
				{
				setState(435);
				match(START);
				setState(436);
				match(WITH);
				setState(437);
				match(DECIMAL);
				}
			}

			setState(446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(440);
				match(INCREMENT);
				setState(441);
				match(BY);
				setState(443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(442);
					match(MINUS);
					}
				}

				setState(445);
				match(DECIMAL);
				}
			}

			setState(454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(448);
				match(MINVALUE);
				setState(450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(449);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(452);
				match(NO);
				setState(453);
				match(MINVALUE);
				}
				break;
			}
			setState(462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(456);
				match(MAXVALUE);
				setState(458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(457);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(460);
				match(NO);
				setState(461);
				match(MAXVALUE);
				}
				break;
			}
			setState(467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(464);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(465);
				match(NO);
				setState(466);
				match(CYCLE);
				}
				break;
			}
			setState(475);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CACHE:
				{
				setState(469);
				match(CACHE);
				setState(471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(470);
					match(DECIMAL);
					}
				}

				}
				break;
			case NO:
				{
				setState(473);
				match(NO);
				setState(474);
				match(CACHE);
				}
				break;
			case EOF:
			case ALTER:
			case CREATE:
			case DELETE:
			case DROP:
			case INSERT:
			case SELECT:
			case UPDATE:
			case WITH:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode DELETE() { return getToken(MocaSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return getRuleContext(Delete_statement_fromContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public List<TerminalNode> FROM() { return getTokens(MocaSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MocaSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(MocaSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(477);
				with_expression();
				}
			}

			setState(480);
			match(DELETE);
			setState(490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(481);
				match(TOP);
				setState(482);
				match(LR_BRACKET);
				setState(483);
				expression(0);
				setState(484);
				match(RR_BRACKET);
				setState(486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(485);
					match(PERCENT);
					}
				}

				}
				break;
			case 2:
				{
				setState(488);
				match(TOP);
				setState(489);
				match(DECIMAL);
				}
				break;
			}
			setState(493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(492);
				match(FROM);
				}
			}

			setState(495);
			delete_statement_from();
			setState(497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(496);
				insert_with_table_hints();
				}
				break;
			}
			setState(500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(499);
				output_clause();
				}
			}

			setState(504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(502);
				match(FROM);
				setState(503);
				table_sources();
				}
			}

			setState(519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(506);
				match(WHERE);
				setState(517);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__0:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case URL:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case MOCA_AT_PLUS_VARIABLE:
				case MOCA_AT_STAR:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(507);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(508);
					match(CURRENT);
					setState(509);
					match(OF);
					setState(515);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
					case 1:
						{
						setState(511);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
						case 1:
							{
							setState(510);
							match(GLOBAL);
							}
							break;
						}
						setState(513);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(514);
						((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(521);
				for_clause();
				}
			}

			setState(525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(524);
				option_clause();
				}
			}

			setState(528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				setState(527);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_statement_fromContext extends ParserRuleContext {
		public Token table_var;
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_from; }
	}

	public final Delete_statement_fromContext delete_statement_from() throws RecognitionException {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_delete_statement_from);
		try {
			setState(534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(530);
				ddl_object();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(531);
				table_alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(532);
				rowset_function_limited();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(533);
				((Delete_statement_fromContext)_localctx).table_var = match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(MocaSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(536);
				with_expression();
				}
			}

			setState(539);
			match(INSERT);
			setState(547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(540);
				match(TOP);
				setState(541);
				match(LR_BRACKET);
				setState(542);
				expression(0);
				setState(543);
				match(RR_BRACKET);
				setState(545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(544);
					match(PERCENT);
					}
				}

				}
			}

			setState(550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(549);
				match(INTO);
				}
			}

			setState(554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(552);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(553);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				setState(556);
				insert_with_table_hints();
				}
				break;
			}
			setState(563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(559);
				match(LR_BRACKET);
				setState(560);
				column_name_list();
				setState(561);
				match(RR_BRACKET);
				}
				break;
			}
			setState(566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(565);
				output_clause();
				}
			}

			setState(568);
			insert_statement_value();
			setState(570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(569);
				for_clause();
				}
			}

			setState(573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(572);
				option_clause();
				}
			}

			setState(576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				setState(575);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_statement_valueContext extends ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement_value; }
	}

	public final Insert_statement_valueContext insert_statement_value() throws RecognitionException {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_insert_statement_value);
		try {
			setState(583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(578);
				table_value_constructor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(579);
				derived_table();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(580);
				execute_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(581);
				match(DEFAULT);
				setState(582);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_statementContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(585);
				with_expression();
				}
			}

			setState(588);
			query_expression();
			setState(590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				setState(589);
				order_by_clause();
				}
				break;
			}
			setState(593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(592);
				for_clause();
				}
				break;
			}
			setState(596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				setState(595);
				option_clause();
				}
				break;
			}
			setState(599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				setState(598);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public Search_condition_listContext search_condition_list() {
			return getRuleContext(Search_condition_listContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(MocaSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(601);
				with_expression();
				}
			}

			setState(604);
			match(UPDATE);
			setState(612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(605);
				match(TOP);
				setState(606);
				match(LR_BRACKET);
				setState(607);
				expression(0);
				setState(608);
				match(RR_BRACKET);
				setState(610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(609);
					match(PERCENT);
					}
				}

				}
			}

			setState(616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(614);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(615);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				setState(618);
				with_table_hints();
				}
			}

			setState(621);
			match(SET);
			setState(622);
			update_elem();
			setState(627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(623);
				match(COMMA);
				setState(624);
				update_elem();
				}
				}
				setState(629);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(630);
				output_clause();
				}
			}

			setState(635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(633);
				match(FROM);
				setState(634);
				table_sources();
				}
			}

			setState(650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(637);
				match(WHERE);
				setState(648);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__0:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case URL:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case MOCA_AT_PLUS_VARIABLE:
				case MOCA_AT_STAR:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(638);
					search_condition_list();
					}
					break;
				case CURRENT:
					{
					setState(639);
					match(CURRENT);
					setState(640);
					match(OF);
					setState(646);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
					case 1:
						{
						setState(642);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
						case 1:
							{
							setState(641);
							match(GLOBAL);
							}
							break;
						}
						setState(644);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(645);
						((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(652);
				for_clause();
				}
			}

			setState(656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(655);
				option_clause();
				}
			}

			setState(659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(658);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Output_clauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public List<Output_dml_list_elemContext> output_dml_list_elem() {
			return getRuleContexts(Output_dml_list_elemContext.class);
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return getRuleContext(Output_dml_list_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(661);
			match(OUTPUT);
			setState(662);
			output_dml_list_elem();
			setState(667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(663);
				match(COMMA);
				setState(664);
				output_dml_list_elem();
				}
				}
				setState(669);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(670);
				match(INTO);
				setState(673);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(671);
					match(LOCAL_ID);
					}
					break;
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case URL:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(672);
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
				case 1:
					{
					setState(675);
					match(LR_BRACKET);
					setState(676);
					column_name_list();
					setState(677);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Output_dml_list_elemContext extends ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return getRuleContext(Output_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_dml_list_elem; }
	}

	public final Output_dml_list_elemContext output_dml_list_elem() throws RecognitionException {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_output_dml_list_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(683);
				output_column_name();
				}
				break;
			case 2:
				{
				setState(684);
				expression(0);
				}
				break;
			}
			setState(688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0) || _la==STRING) {
				{
				setState(687);
				as_column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Output_column_nameContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode DELETED() { return getToken(MocaSqlParser.DELETED, 0); }
		public TerminalNode INSERTED() { return getToken(MocaSqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(MocaSqlParser.STAR, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOLLAR_ACTION() { return getToken(MocaSqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_column_name; }
	}

	public final Output_column_nameContext output_column_name() throws RecognitionException {
		Output_column_nameContext _localctx = new Output_column_nameContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_output_column_name);
		try {
			setState(701);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(693);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
				case 1:
					{
					setState(690);
					match(DELETED);
					}
					break;
				case 2:
					{
					setState(691);
					match(INSERTED);
					}
					break;
				case 3:
					{
					setState(692);
					table_name();
					}
					break;
				}
				setState(695);
				match(DOT);
				setState(698);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(696);
					match(STAR);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case URL:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(697);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(700);
				match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_indexContext extends ParserRuleContext {
		public Search_conditionContext where;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode UNIQUE() { return getToken(MocaSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(MocaSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(703);
			match(CREATE);
			setState(705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(704);
				match(UNIQUE);
				}
			}

			setState(708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(707);
				clustered();
				}
			}

			setState(710);
			match(INDEX);
			setState(711);
			id();
			setState(712);
			match(ON);
			setState(713);
			table_name_with_hint();
			setState(714);
			match(LR_BRACKET);
			setState(715);
			column_name_list_with_order();
			setState(716);
			match(RR_BRACKET);
			setState(722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(717);
				match(INCLUDE);
				setState(718);
				match(LR_BRACKET);
				setState(719);
				column_name_list();
				setState(720);
				match(RR_BRACKET);
				}
			}

			setState(726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(724);
				match(WHERE);
				setState(725);
				((Create_indexContext)_localctx).where = search_condition();
				}
			}

			setState(729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(728);
				index_options();
				}
				break;
			}
			setState(733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(731);
				match(ON);
				setState(732);
				id();
				}
			}

			setState(736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(735);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode LOCK() { return getToken(MocaSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public List<Table_optionsContext> table_options() {
			return getRuleContexts(Table_optionsContext.class);
		}
		public Table_optionsContext table_options(int i) {
			return getRuleContext(Table_optionsContext.class,i);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MocaSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MocaSqlParser.DEFAULT, i);
		}
		public TerminalNode TEXTIMAGE_ON() { return getToken(MocaSqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(738);
			match(CREATE);
			setState(739);
			match(TABLE);
			setState(740);
			table_name();
			setState(741);
			match(LR_BRACKET);
			setState(742);
			column_def_table_constraints();
			setState(744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(743);
				match(COMMA);
				}
			}

			setState(746);
			match(RR_BRACKET);
			setState(749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCK) {
				{
				setState(747);
				match(LOCK);
				setState(748);
				simple_id();
				}
			}

			setState(754);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(751);
					table_options();
					}
					} 
				}
				setState(756);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			}
			setState(760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(757);
				match(ON);
				setState(758);
				id();
				}
				break;
			case 2:
				{
				setState(759);
				match(DEFAULT);
				}
				break;
			}
			setState(765);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TEXTIMAGE_ON:
				{
				setState(762);
				match(TEXTIMAGE_ON);
				setState(763);
				id();
				}
				break;
			case DEFAULT:
				{
				setState(764);
				match(DEFAULT);
				}
				break;
			case EOF:
			case ALTER:
			case CREATE:
			case DELETE:
			case DROP:
			case INSERT:
			case SELECT:
			case UPDATE:
			case WITH:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(767);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_options; }
	}

	public final Table_optionsContext table_options() throws RecognitionException {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(770);
			match(WITH);
			setState(790);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(771);
				match(LR_BRACKET);
				setState(772);
				index_option();
				setState(777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(773);
					match(COMMA);
					setState(774);
					index_option();
					}
					}
					setState(779);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(780);
				match(RR_BRACKET);
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(782);
				index_option();
				setState(787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(783);
					match(COMMA);
					setState(784);
					index_option();
					}
					}
					setState(789);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MocaSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> WITH() { return getTokens(MocaSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MocaSqlParser.WITH, i);
		}
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MocaSqlParser.OPTION, 0); }
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(792);
			match(CREATE);
			setState(793);
			match(VIEW);
			setState(794);
			simple_name();
			setState(799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(795);
				match(LR_BRACKET);
				setState(796);
				column_name_list();
				setState(797);
				match(RR_BRACKET);
				}
			}

			setState(810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(801);
				match(WITH);
				setState(802);
				view_attribute();
				setState(807);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(803);
					match(COMMA);
					setState(804);
					view_attribute();
					}
					}
					setState(809);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(812);
			match(AS);
			setState(813);
			select_statement();
			setState(817);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(814);
				match(WITH);
				setState(815);
				match(CHECK);
				setState(816);
				match(OPTION);
				}
				break;
			}
			setState(820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(819);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(MocaSqlParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(MocaSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(822);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_tableContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> ALTER() { return getTokens(MocaSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(MocaSqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(MocaSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(MocaSqlParser.TABLE, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public TerminalNode LOCK_ESCALATION() { return getToken(MocaSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return getRuleContext(Column_def_table_constraintContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MocaSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public TerminalNode FOREIGN() { return getToken(MocaSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(MocaSqlParser.TRIGGER, 0); }
		public TerminalNode REBUILD() { return getToken(MocaSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return getRuleContext(Table_optionsContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(824);
			match(ALTER);
			setState(825);
			match(TABLE);
			setState(826);
			table_name();
			setState(870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				setState(827);
				match(SET);
				setState(828);
				match(LR_BRACKET);
				setState(829);
				match(LOCK_ESCALATION);
				setState(830);
				match(EQUAL);
				setState(831);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(832);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(833);
				match(ADD);
				setState(834);
				column_def_table_constraint();
				}
				break;
			case 3:
				{
				setState(835);
				match(ALTER);
				setState(836);
				match(COLUMN);
				setState(837);
				column_definition();
				}
				break;
			case 4:
				{
				setState(838);
				match(DROP);
				setState(839);
				match(COLUMN);
				setState(840);
				id();
				}
				break;
			case 5:
				{
				setState(841);
				match(DROP);
				setState(842);
				match(CONSTRAINT);
				setState(843);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 6:
				{
				setState(844);
				match(WITH);
				setState(845);
				match(CHECK);
				setState(846);
				match(ADD);
				setState(847);
				match(CONSTRAINT);
				setState(848);
				((Alter_tableContext)_localctx).constraint = id();
				setState(849);
				match(FOREIGN);
				setState(850);
				match(KEY);
				setState(851);
				match(LR_BRACKET);
				setState(852);
				((Alter_tableContext)_localctx).fk = column_name_list();
				setState(853);
				match(RR_BRACKET);
				setState(854);
				match(REFERENCES);
				setState(855);
				table_name();
				setState(856);
				match(LR_BRACKET);
				setState(857);
				((Alter_tableContext)_localctx).pk = column_name_list();
				setState(858);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(860);
				match(CHECK);
				setState(861);
				match(CONSTRAINT);
				setState(862);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 8:
				{
				setState(863);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(864);
				match(TRIGGER);
				setState(866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0)) {
					{
					setState(865);
					id();
					}
				}

				}
				break;
			case 9:
				{
				setState(868);
				match(REBUILD);
				setState(869);
				table_options();
				}
				break;
			}
			setState(873);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				{
				setState(872);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HostContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_host);
		try {
			setState(885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(875);
				id();
				setState(876);
				match(DOT);
				setState(877);
				host();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(883);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(879);
					id();
					setState(880);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(882);
					id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public List<Drop_relational_or_xml_or_spatial_indexContext> drop_relational_or_xml_or_spatial_index() {
			return getRuleContexts(Drop_relational_or_xml_or_spatial_indexContext.class);
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return getRuleContext(Drop_relational_or_xml_or_spatial_indexContext.class,i);
		}
		public List<Drop_backward_compatible_indexContext> drop_backward_compatible_index() {
			return getRuleContexts(Drop_backward_compatible_indexContext.class);
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return getRuleContext(Drop_backward_compatible_indexContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(887);
			match(DROP);
			setState(888);
			match(INDEX);
			setState(891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(889);
				match(IF);
				setState(890);
				match(EXISTS);
				}
			}

			setState(909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(893);
				drop_relational_or_xml_or_spatial_index();
				setState(898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(894);
					match(COMMA);
					setState(895);
					drop_relational_or_xml_or_spatial_index();
					}
					}
					setState(900);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(901);
				drop_backward_compatible_index();
				setState(906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(902);
					match(COMMA);
					setState(903);
					drop_backward_compatible_index();
					}
					}
					setState(908);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(911);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
		public IdContext index_name;
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_relational_or_xml_or_spatial_index; }
	}

	public final Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() throws RecognitionException {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(914);
			((Drop_relational_or_xml_or_spatial_indexContext)_localctx).index_name = id();
			setState(915);
			match(ON);
			setState(916);
			full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_backward_compatible_indexContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext table_or_view_name;
		public IdContext index_name;
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_backward_compatible_index; }
	}

	public final Drop_backward_compatible_indexContext drop_backward_compatible_index() throws RecognitionException {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_drop_backward_compatible_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(918);
				((Drop_backward_compatible_indexContext)_localctx).owner_name = id();
				setState(919);
				match(DOT);
				}
				break;
			}
			setState(923);
			((Drop_backward_compatible_indexContext)_localctx).table_or_view_name = id();
			setState(924);
			match(DOT);
			setState(925);
			((Drop_backward_compatible_indexContext)_localctx).index_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(927);
			match(DROP);
			setState(928);
			match(TABLE);
			setState(931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(929);
				match(IF);
				setState(930);
				match(EXISTS);
				}
			}

			setState(933);
			table_name();
			setState(935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(934);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MocaSqlParser.VIEW, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_drop_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(937);
			match(DROP);
			setState(938);
			match(VIEW);
			setState(941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(939);
				match(IF);
				setState(940);
				match(EXISTS);
				}
			}

			setState(943);
			simple_name();
			setState(948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(944);
				match(COMMA);
				setState(945);
				simple_name();
				}
				}
				setState(950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				setState(951);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_rowset_function_limited);
		try {
			setState(956);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(954);
				openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(955);
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenqueryContext extends ParserRuleContext {
		public IdContext linked_server;
		public Token query;
		public TerminalNode OPENQUERY() { return getToken(MocaSqlParser.OPENQUERY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(958);
			match(OPENQUERY);
			setState(959);
			match(LR_BRACKET);
			setState(960);
			((OpenqueryContext)_localctx).linked_server = id();
			setState(961);
			match(COMMA);
			setState(962);
			((OpenqueryContext)_localctx).query = match(STRING);
			setState(963);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public TerminalNode OPENDATASOURCE() { return getToken(MocaSqlParser.OPENDATASOURCE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(965);
			match(OPENDATASOURCE);
			setState(966);
			match(LR_BRACKET);
			setState(967);
			((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(968);
			match(COMMA);
			setState(969);
			((OpendatasourceContext)_localctx).init = match(STRING);
			setState(970);
			match(RR_BRACKET);
			setState(971);
			match(DOT);
			setState(973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0)) {
				{
				setState(972);
				((OpendatasourceContext)_localctx).database = id();
				}
			}

			setState(975);
			match(DOT);
			setState(977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0)) {
				{
				setState(976);
				((OpendatasourceContext)_localctx).scheme = id();
				}
			}

			setState(979);
			match(DOT);
			{
			setState(980);
			((OpendatasourceContext)_localctx).table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_statementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MocaSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return getRuleContext(Execute_bodyContext.class,0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_execute_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(982);
			match(EXECUTE);
			setState(983);
			execute_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_bodyContext extends ParserRuleContext {
		public Token return_status;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public TerminalNode SEMI() { return getToken(MocaSqlParser.SEMI, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> PLUS() { return getTokens(MocaSqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(MocaSqlParser.PLUS, i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_body; }
	}

	public final Execute_bodyContext execute_body() throws RecognitionException {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_execute_body);
		int _la;
		try {
			setState(1027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(985);
					((Execute_bodyContext)_localctx).return_status = match(LOCAL_ID);
					setState(986);
					match(EQUAL);
					}
					break;
				}
				setState(991);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(989);
					func_proc_name_server_database_schema();
					}
					break;
				case 2:
					{
					setState(990);
					expression(0);
					}
					break;
				}
				setState(1001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376833L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & -9223372035244158975L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 7034648456207532031L) != 0) || ((((_la - 811)) & ~0x3f) == 0 && ((1L << (_la - 811)) & 25786581007L) != 0)) {
					{
					setState(993);
					execute_statement_arg();
					setState(998);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(994);
						match(COMMA);
						setState(995);
						execute_statement_arg();
						}
						}
						setState(1000);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1004);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(1003);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1006);
				match(LR_BRACKET);
				setState(1007);
				execute_var_string();
				setState(1012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1008);
					match(PLUS);
					setState(1009);
					execute_var_string();
					}
					}
					setState(1014);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1015);
				match(RR_BRACKET);
				setState(1022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==USER || _la==LOGIN) {
					{
					setState(1017);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1016);
						match(AS);
						}
					}

					setState(1019);
					_la = _input.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1020);
					match(EQUAL);
					setState(1021);
					match(STRING);
					}
				}

				setState(1025);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(1024);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_statement_argContext extends ParserRuleContext {
		public Token parameter;
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public TerminalNode OUT() { return getToken(MocaSqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_execute_statement_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1029);
				((Execute_statement_argContext)_localctx).parameter = match(LOCAL_ID);
				setState(1030);
				match(EQUAL);
				}
				break;
			}
			setState(1042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(1035);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(1033);
					constant_LOCAL_ID();
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case URL:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1034);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUT || _la==OUTPUT) {
					{
					setState(1037);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case DEFAULT:
				{
				setState(1040);
				match(DEFAULT);
				}
				break;
			case NULL:
				{
				setState(1041);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_var_stringContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_var_string; }
	}

	public final Execute_var_stringContext execute_var_string() throws RecognitionException {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_execute_var_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1044);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1046);
			column_def_table_constraint();
			setState(1053);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1048);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1047);
						match(COMMA);
						}
					}

					setState(1050);
					column_def_table_constraint();
					}
					} 
				}
				setState(1055);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return getRuleContext(Materialized_column_definitionContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_column_def_table_constraint);
		try {
			setState(1059);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1056);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1057);
				materialized_column_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1058);
				table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_definitionContext extends ParserRuleContext {
		public IdContext constraint;
		public Token seed;
		public Token increment;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MocaSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public List<Null_or_defaultContext> null_or_default() {
			return getRuleContexts(Null_or_defaultContext.class);
		}
		public Null_or_defaultContext null_or_default(int i) {
			return getRuleContext(Null_or_defaultContext.class,i);
		}
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(MocaSqlParser.ROWGUIDCOL, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1061);
			id();
			setState(1065);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case DOUBLE:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(1062);
				data_type();
				}
				break;
			case AS:
				{
				setState(1063);
				match(AS);
				setState(1064);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(1067);
				match(COLLATE);
				setState(1068);
				id();
				}
			}

			setState(1072);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				setState(1071);
				null_notnull();
				}
				break;
			}
			setState(1095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(1076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1074);
					match(CONSTRAINT);
					setState(1075);
					((Column_definitionContext)_localctx).constraint = id();
					}
				}

				setState(1078);
				null_or_default();
				setState(1080);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					setState(1079);
					null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1082);
				match(IDENTITY);
				setState(1088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					setState(1083);
					match(LR_BRACKET);
					setState(1084);
					((Column_definitionContext)_localctx).seed = match(DECIMAL);
					setState(1085);
					match(COMMA);
					setState(1086);
					((Column_definitionContext)_localctx).increment = match(DECIMAL);
					setState(1087);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1093);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					setState(1090);
					match(NOT);
					setState(1091);
					match(FOR);
					setState(1092);
					match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			setState(1098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				setState(1097);
				match(ROWGUIDCOL);
				}
			}

			setState(1103);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1100);
					column_constraint();
					}
					} 
				}
				setState(1105);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Materialized_column_definitionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(MocaSqlParser.COMPUTE, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode MATERIALIZED() { return getToken(MocaSqlParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materialized_column_definition; }
	}

	public final Materialized_column_definitionContext materialized_column_definition() throws RecognitionException {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_materialized_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1106);
			id();
			setState(1107);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1108);
			expression(0);
			setState(1112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(1109);
				match(MATERIALIZED);
				}
				break;
			case 2:
				{
				setState(1110);
				match(NOT);
				setState(1111);
				match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext pk;
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(MocaSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(MocaSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public TerminalNode FOREIGN() { return getToken(MocaSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1114);
				match(CONSTRAINT);
				setState(1115);
				((Column_constraintContext)_localctx).constraint = id();
				}
			}

			setState(1155);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(1121);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(1118);
					match(PRIMARY);
					setState(1119);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(1120);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(1123);
					clustered();
					}
				}

				setState(1127);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1126);
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				setState(1129);
				match(CHECK);
				setState(1133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1130);
					match(NOT);
					setState(1131);
					match(FOR);
					setState(1132);
					match(REPLICATION);
					}
				}

				setState(1135);
				match(LR_BRACKET);
				setState(1136);
				search_condition();
				setState(1137);
				match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				setState(1141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(1139);
					match(FOREIGN);
					setState(1140);
					match(KEY);
					}
				}

				setState(1143);
				match(REFERENCES);
				setState(1144);
				table_name();
				setState(1145);
				match(LR_BRACKET);
				setState(1146);
				((Column_constraintContext)_localctx).pk = column_name_list();
				setState(1147);
				match(RR_BRACKET);
				setState(1149);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
				case 1:
					{
					setState(1148);
					on_delete();
					}
					break;
				}
				setState(1152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1151);
					on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL:
				{
				setState(1154);
				null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(MocaSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(MocaSqlParser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(MocaSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(MocaSqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(MocaSqlParser.PLUS, i);
		}
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1157);
				match(CONSTRAINT);
				setState(1158);
				((Table_constraintContext)_localctx).constraint = id();
				}
			}

			setState(1225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(1164);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(1161);
					match(PRIMARY);
					setState(1162);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(1163);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(1166);
					clustered();
					}
				}

				setState(1169);
				match(LR_BRACKET);
				setState(1170);
				column_name_list_with_order();
				setState(1171);
				match(RR_BRACKET);
				setState(1173);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					setState(1172);
					index_options();
					}
					break;
				}
				setState(1177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1175);
					match(ON);
					setState(1176);
					id();
					}
				}

				}
				break;
			case CHECK:
				{
				setState(1179);
				match(CHECK);
				setState(1183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1180);
					match(NOT);
					setState(1181);
					match(FOR);
					setState(1182);
					match(REPLICATION);
					}
				}

				setState(1185);
				match(LR_BRACKET);
				setState(1186);
				search_condition();
				setState(1187);
				match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				setState(1189);
				match(DEFAULT);
				setState(1191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1190);
					match(LR_BRACKET);
					}
				}

				setState(1197); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1197);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(1193);
						match(STRING);
						}
						break;
					case PLUS:
						{
						setState(1194);
						match(PLUS);
						}
						break;
					case CALLED:
					case COALESCE:
					case CONVERT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case EXPIREDATE:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case IDENTITY:
					case IIF:
					case INIT:
					case ISNULL:
					case KEY:
					case LEFT:
					case MASTER:
					case MAX_MEMORY:
					case NULLIF:
					case OFFSETS:
					case PAGE:
					case POLICY:
					case PRECISION:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case RIGHT:
					case ROLE:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SESSION_USER:
					case SID:
					case SOURCE:
					case SPLIT:
					case STATE:
					case START:
					case STOP:
					case SYSTEM_USER:
					case TARGET:
					case URL:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case ID:
						{
						setState(1195);
						function_call();
						}
						break;
					case DECIMAL:
						{
						setState(1196);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1199); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || _la==COALESCE || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & -7493418033898059391L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 1649406379025L) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & -8358678020570873847L) != 0) || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & 9610874659537155L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 7034648456207532031L) != 0) || _la==STRING || _la==PLUS );
				setState(1202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(1201);
					match(RR_BRACKET);
					}
				}

				setState(1204);
				match(FOR);
				setState(1205);
				id();
				}
				break;
			case FOREIGN:
				{
				setState(1206);
				match(FOREIGN);
				setState(1207);
				match(KEY);
				setState(1208);
				match(LR_BRACKET);
				setState(1209);
				((Table_constraintContext)_localctx).fk = column_name_list();
				setState(1210);
				match(RR_BRACKET);
				setState(1211);
				match(REFERENCES);
				setState(1212);
				table_name();
				setState(1217);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
				case 1:
					{
					setState(1213);
					match(LR_BRACKET);
					setState(1214);
					((Table_constraintContext)_localctx).pk = column_name_list();
					setState(1215);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
				case 1:
					{
					setState(1219);
					on_delete();
					}
					break;
				}
				setState(1223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1222);
					on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(MocaSqlParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MocaSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(MocaSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1227);
			match(ON);
			setState(1228);
			match(DELETE);
			setState(1236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(1229);
				match(NO);
				setState(1230);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(1231);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(1232);
				match(SET);
				setState(1233);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(1234);
				match(SET);
				setState(1235);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MocaSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(MocaSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1238);
			match(ON);
			setState(1239);
			match(UPDATE);
			setState(1247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(1240);
				match(NO);
				setState(1241);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(1242);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(1243);
				match(SET);
				setState(1244);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(1245);
				match(SET);
				setState(1246);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1249);
			match(WITH);
			setState(1250);
			match(LR_BRACKET);
			setState(1251);
			index_option();
			setState(1256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1252);
				match(COMMA);
				setState(1253);
				index_option();
				}
				}
				setState(1258);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1259);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_optionContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1261);
			simple_id();
			setState(1262);
			match(EQUAL);
			setState(1266);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(1263);
				simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				setState(1264);
				on_off();
				}
				break;
			case DECIMAL:
				{
				setState(1265);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constant_LOCAL_IDContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_LOCAL_ID; }
	}

	public final Constant_LOCAL_IDContext constant_LOCAL_ID() throws RecognitionException {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_constant_LOCAL_ID);
		try {
			setState(1270);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1268);
				constant();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1269);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public Token op;
		public Moca_at_variableContext moca_at_variable() {
			return getRuleContext(Moca_at_variableContext.class,0);
		}
		public Moca_at_minus_variableContext moca_at_minus_variable() {
			return getRuleContext(Moca_at_minus_variableContext.class,0);
		}
		public Moca_environment_variableContext moca_environment_variable() {
			return getRuleContext(Moca_environment_variableContext.class,0);
		}
		public Moca_integration_variableContext moca_integration_variable() {
			return getRuleContext(Moca_integration_variableContext.class,0);
		}
		public Primitive_expressionContext primitive_expression() {
			return getRuleContext(Primitive_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Bracket_expressionContext bracket_expression() {
			return getRuleContext(Bracket_expressionContext.class,0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return getRuleContext(Unary_operator_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode STAR() { return getToken(MocaSqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(MocaSqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(MocaSqlParser.MODULE, 0); }
		public TerminalNode PLUS() { return getToken(MocaSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MocaSqlParser.MINUS, 0); }
		public TerminalNode BIT_AND() { return getToken(MocaSqlParser.BIT_AND, 0); }
		public TerminalNode BIT_XOR() { return getToken(MocaSqlParser.BIT_XOR, 0); }
		public TerminalNode BIT_OR() { return getToken(MocaSqlParser.BIT_OR, 0); }
		public TerminalNode DOUBLE_BAR() { return getToken(MocaSqlParser.DOUBLE_BAR, 0); }
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MocaSqlParser.COLLATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 96;
		enterRecursionRule(_localctx, 96, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				setState(1273);
				moca_at_variable();
				}
				break;
			case 2:
				{
				setState(1274);
				moca_at_minus_variable();
				}
				break;
			case 3:
				{
				setState(1275);
				moca_environment_variable();
				}
				break;
			case 4:
				{
				setState(1276);
				moca_integration_variable();
				}
				break;
			case 5:
				{
				setState(1277);
				primitive_expression();
				}
				break;
			case 6:
				{
				setState(1278);
				function_call();
				}
				break;
			case 7:
				{
				setState(1279);
				case_expression();
				}
				break;
			case 8:
				{
				setState(1280);
				full_column_name();
				}
				break;
			case 9:
				{
				setState(1281);
				bracket_expression();
				}
				break;
			case 10:
				{
				setState(1282);
				unary_operator_expression();
				}
				break;
			case 11:
				{
				setState(1283);
				over_clause();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1305);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1303);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1286);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1287);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 841)) & ~0x3f) == 0 && ((1L << (_la - 841)) & 7L) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1288);
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1289);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1290);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 830)) & ~0x3f) == 0 && ((1L << (_la - 830)) & 966657L) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1291);
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1292);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1293);
						comparison_operator();
						setState(1294);
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1296);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1297);
						assignment_operator();
						setState(1298);
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1300);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(1301);
						match(COLLATE);
						setState(1302);
						id();
						}
						break;
					}
					} 
				}
				setState(1307);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Moca_at_variableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode MOCA_ONSTACK() { return getToken(MocaSqlParser.MOCA_ONSTACK, 0); }
		public TerminalNode MOCA_IGNORE() { return getToken(MocaSqlParser.MOCA_IGNORE, 0); }
		public Moca_at_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_variable; }
	}

	public final Moca_at_variableContext moca_at_variable() throws RecognitionException {
		Moca_at_variableContext _localctx = new Moca_at_variableContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_moca_at_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1308);
			match(LOCAL_ID);
			setState(1311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(1309);
				match(DOT);
				setState(1310);
				simple_id();
				}
				break;
			}
			setState(1323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				{
				setState(1313);
				match(COLON);
				setState(1314);
				simple_id();
				}
				}
				break;
			case 2:
				{
				setState(1321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					{
					setState(1315);
					match(SHARP);
					setState(1316);
					match(KEEP);
					}
					}
					break;
				case 2:
					{
					{
					setState(1317);
					match(SHARP);
					setState(1318);
					match(MOCA_ONSTACK);
					}
					}
					break;
				case 3:
					{
					{
					setState(1319);
					match(SHARP);
					setState(1320);
					match(MOCA_IGNORE);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Moca_environment_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_ENVIRONMENT_VARIABLE() { return getToken(MocaSqlParser.MOCA_ENVIRONMENT_VARIABLE, 0); }
		public Moca_environment_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_environment_variable; }
	}

	public final Moca_environment_variableContext moca_environment_variable() throws RecognitionException {
		Moca_environment_variableContext _localctx = new Moca_environment_variableContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_moca_environment_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1325);
			match(MOCA_ENVIRONMENT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Moca_at_minus_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_AT_MINUS_VARIABLE() { return getToken(MocaSqlParser.MOCA_AT_MINUS_VARIABLE, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode MOCA_ONSTACK() { return getToken(MocaSqlParser.MOCA_ONSTACK, 0); }
		public TerminalNode MOCA_IGNORE() { return getToken(MocaSqlParser.MOCA_IGNORE, 0); }
		public Moca_at_minus_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_minus_variable; }
	}

	public final Moca_at_minus_variableContext moca_at_minus_variable() throws RecognitionException {
		Moca_at_minus_variableContext _localctx = new Moca_at_minus_variableContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_moca_at_minus_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1327);
			match(MOCA_AT_MINUS_VARIABLE);
			setState(1330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				setState(1328);
				match(DOT);
				setState(1329);
				simple_id();
				}
				break;
			}
			setState(1342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				{
				setState(1332);
				match(COLON);
				setState(1333);
				simple_id();
				}
				}
				break;
			case 2:
				{
				setState(1340);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					{
					setState(1334);
					match(SHARP);
					setState(1335);
					match(KEEP);
					}
					}
					break;
				case 2:
					{
					{
					setState(1336);
					match(SHARP);
					setState(1337);
					match(MOCA_ONSTACK);
					}
					}
					break;
				case 3:
					{
					{
					setState(1338);
					match(SHARP);
					setState(1339);
					match(MOCA_IGNORE);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Moca_at_plus_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_AT_PLUS_VARIABLE() { return getToken(MocaSqlParser.MOCA_AT_PLUS_VARIABLE, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public TerminalNode BIT_XOR() { return getToken(MocaSqlParser.BIT_XOR, 0); }
		public Moca_at_plus_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_plus_variable; }
	}

	public final Moca_at_plus_variableContext moca_at_plus_variable() throws RecognitionException {
		Moca_at_plus_variableContext _localctx = new Moca_at_plus_variableContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_moca_at_plus_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1344);
			match(MOCA_AT_PLUS_VARIABLE);
			setState(1347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(1345);
				match(DOT);
				setState(1346);
				simple_id();
				}
			}

			setState(1353);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
				{
				{
				setState(1349);
				match(COLON);
				setState(1350);
				simple_id();
				}
				}
				break;
			case BIT_XOR:
				{
				{
				setState(1351);
				match(BIT_XOR);
				setState(1352);
				simple_id();
				}
				}
				break;
			case EOF:
			case ALTER:
			case AND:
			case AS:
			case CALLED:
			case CREATE:
			case CROSS:
			case DATA_COMPRESSION:
			case DELETE:
			case DROP:
			case EVENTDATA:
			case EXCEPT:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FOR:
			case FORCESEEK:
			case FULL:
			case GROUP:
			case HAVING:
			case INIT:
			case INNER:
			case INSERT:
			case INTERSECT:
			case JOIN:
			case KEY:
			case LEFT:
			case MASTER:
			case MAX_MEMORY:
			case MERGE:
			case OFFSETS:
			case ON:
			case OPTION:
			case OR:
			case ORDER:
			case OUTER:
			case PAGE:
			case PIVOT:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case RIGHT:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SELECT:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case THEN:
			case UNION:
			case UNPIVOT:
			case UPDATE:
			case URL:
			case WHERE:
			case WITH:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Moca_at_starContext extends ParserRuleContext {
		public TerminalNode MOCA_AT_STAR() { return getToken(MocaSqlParser.MOCA_AT_STAR, 0); }
		public Moca_at_starContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_star; }
	}

	public final Moca_at_starContext moca_at_star() throws RecognitionException {
		Moca_at_starContext _localctx = new Moca_at_starContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_moca_at_star);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1355);
			match(MOCA_AT_STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Moca_integration_variableContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Moca_integration_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_integration_variable; }
	}

	public final Moca_integration_variableContext moca_integration_variable() throws RecognitionException {
		Moca_integration_variableContext _localctx = new Moca_integration_variableContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_moca_integration_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1357);
			match(T__0);
			setState(1358);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Primitive_expressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_expression; }
	}

	public final Primitive_expressionContext primitive_expression() throws RecognitionException {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_primitive_expression);
		try {
			setState(1364);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1360);
				match(DEFAULT);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1361);
				match(NULL);
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(1362);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 4);
				{
				setState(1363);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_expressionContext extends ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public TerminalNode CASE() { return getToken(MocaSqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(MocaSqlParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MocaSqlParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_case_expression);
		int _la;
		try {
			setState(1391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1366);
				match(CASE);
				setState(1367);
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				setState(1369); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1368);
					switch_section();
					}
					}
					setState(1371); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(1375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(1373);
					match(ELSE);
					setState(1374);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(1377);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1379);
				match(CASE);
				setState(1381); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1380);
					switch_search_condition_section();
					}
					}
					setState(1383); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(1387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(1385);
					match(ELSE);
					setState(1386);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(1389);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unary_operator_expressionContext extends ParserRuleContext {
		public Token op;
		public TerminalNode BIT_NOT() { return getToken(MocaSqlParser.BIT_NOT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(MocaSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MocaSqlParser.MINUS, 0); }
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_operator_expression; }
	}

	public final Unary_operator_expressionContext unary_operator_expression() throws RecognitionException {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_unary_operator_expression);
		int _la;
		try {
			setState(1397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIT_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1393);
				match(BIT_NOT);
				setState(1394);
				expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1395);
				((Unary_operator_expressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1396);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bracket_expressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_expression; }
	}

	public final Bracket_expressionContext bracket_expression() throws RecognitionException {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_bracket_expression);
		try {
			setState(1407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1399);
				match(LR_BRACKET);
				setState(1400);
				expression(0);
				setState(1401);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1403);
				match(LR_BRACKET);
				setState(1404);
				subquery();
				setState(1405);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_constant_expression);
		try {
			setState(1417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1409);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1410);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1411);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1412);
				match(LOCAL_ID);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1413);
				match(LR_BRACKET);
				setState(1414);
				constant_expression();
				setState(1415);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1419);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_expressionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(MocaSqlParser.XMLNAMESPACES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(MocaSqlParser.BLOCKING_HIERARCHY, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_with_expression);
		int _la;
		try {
			setState(1447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1421);
				match(WITH);
				setState(1424);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
				case 1:
					{
					setState(1422);
					match(XMLNAMESPACES);
					setState(1423);
					match(COMMA);
					}
					break;
				}
				setState(1426);
				common_table_expression();
				setState(1431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1427);
					match(COMMA);
					setState(1428);
					common_table_expression();
					}
					}
					setState(1433);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1434);
				match(WITH);
				setState(1435);
				match(BLOCKING_HIERARCHY);
				setState(1440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1436);
					match(LR_BRACKET);
					setState(1437);
					full_column_name_list();
					setState(1438);
					match(RR_BRACKET);
					}
				}

				setState(1442);
				match(AS);
				setState(1443);
				match(LR_BRACKET);
				setState(1444);
				select_statement();
				setState(1445);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Common_table_expressionContext extends ParserRuleContext {
		public IdContext expression_name;
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1449);
			((Common_table_expressionContext)_localctx).expression_name = id();
			setState(1454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1450);
				match(LR_BRACKET);
				setState(1451);
				column_name_list();
				setState(1452);
				match(RR_BRACKET);
				}
			}

			setState(1456);
			match(AS);
			setState(1457);
			match(LR_BRACKET);
			setState(1458);
			select_statement();
			setState(1459);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_update_elem);
		try {
			setState(1477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1463);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case URL:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1461);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(1462);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1467);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(1465);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(1466);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1469);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1470);
				((Update_elemContext)_localctx).udt_column_name = id();
				setState(1471);
				match(DOT);
				setState(1472);
				((Update_elemContext)_localctx).method_name = id();
				setState(1473);
				match(LR_BRACKET);
				setState(1474);
				expression_list();
				setState(1475);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Search_condition_listContext extends ParserRuleContext {
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_list; }
	}

	public final Search_condition_listContext search_condition_list() throws RecognitionException {
		Search_condition_listContext _localctx = new Search_condition_listContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_search_condition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1479);
			search_condition();
			setState(1484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1480);
				match(COMMA);
				setState(1481);
				search_condition();
				}
				}
				setState(1486);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Search_conditionContext extends ParserRuleContext {
		public List<Search_condition_andContext> search_condition_and() {
			return getRuleContexts(Search_condition_andContext.class);
		}
		public Search_condition_andContext search_condition_and(int i) {
			return getRuleContext(Search_condition_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(MocaSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(MocaSqlParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_search_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1487);
			search_condition_and();
			setState(1492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1488);
				match(OR);
				setState(1489);
				search_condition_and();
				}
				}
				setState(1494);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Search_condition_andContext extends ParserRuleContext {
		public List<Search_condition_notContext> search_condition_not() {
			return getRuleContexts(Search_condition_notContext.class);
		}
		public Search_condition_notContext search_condition_not(int i) {
			return getRuleContext(Search_condition_notContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MocaSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MocaSqlParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_and; }
	}

	public final Search_condition_andContext search_condition_and() throws RecognitionException {
		Search_condition_andContext _localctx = new Search_condition_andContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_search_condition_and);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1495);
			search_condition_not();
			setState(1500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(1496);
				match(AND);
				setState(1497);
				search_condition_not();
				}
				}
				setState(1502);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Search_condition_notContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_not; }
	}

	public final Search_condition_notContext search_condition_not() throws RecognitionException {
		Search_condition_notContext _localctx = new Search_condition_notContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_search_condition_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1503);
				match(NOT);
				}
			}

			setState(1506);
			predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(MocaSqlParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(MocaSqlParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(MocaSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MocaSqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(MocaSqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(MocaSqlParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(MocaSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public Moca_at_plus_variableContext moca_at_plus_variable() {
			return getRuleContext(Moca_at_plus_variableContext.class,0);
		}
		public Moca_at_starContext moca_at_star() {
			return getRuleContext(Moca_at_starContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public TerminalNode RAW() { return getToken(MocaSqlParser.RAW, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode MOCA_AT_MINUS_VARIABLE() { return getToken(MocaSqlParser.MOCA_AT_MINUS_VARIABLE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_predicate);
		int _la;
		try {
			setState(1579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1508);
				match(EXISTS);
				setState(1509);
				match(LR_BRACKET);
				setState(1510);
				subquery();
				setState(1511);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1513);
				expression(0);
				setState(1514);
				comparison_operator();
				setState(1515);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1517);
				expression(0);
				setState(1518);
				comparison_operator();
				setState(1519);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1520);
				match(LR_BRACKET);
				setState(1521);
				subquery();
				setState(1522);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1524);
				expression(0);
				setState(1526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1525);
					match(NOT);
					}
				}

				setState(1528);
				match(BETWEEN);
				setState(1529);
				expression(0);
				setState(1530);
				match(AND);
				setState(1531);
				expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1533);
				expression(0);
				setState(1535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1534);
					match(NOT);
					}
				}

				setState(1537);
				match(IN);
				setState(1538);
				match(LR_BRACKET);
				setState(1541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					setState(1539);
					subquery();
					}
					break;
				case 2:
					{
					setState(1540);
					expression_list();
					}
					break;
				}
				setState(1543);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1545);
				expression(0);
				setState(1547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1546);
					match(NOT);
					}
				}

				setState(1549);
				match(LIKE);
				setState(1550);
				expression(0);
				setState(1553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ESCAPE) {
					{
					setState(1551);
					match(ESCAPE);
					setState(1552);
					expression(0);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1555);
				expression(0);
				setState(1556);
				match(IS);
				setState(1557);
				null_notnull();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1559);
				moca_at_plus_variable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1560);
				moca_at_star();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1561);
				match(LOCAL_ID);
				setState(1564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1562);
					match(DOT);
					setState(1563);
					simple_id();
					}
				}

				setState(1566);
				match(COLON);
				setState(1567);
				match(RAW);
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1568);
				match(MOCA_AT_MINUS_VARIABLE);
				setState(1571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1569);
					match(DOT);
					setState(1570);
					simple_id();
					}
				}

				setState(1573);
				match(COLON);
				setState(1574);
				match(RAW);
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1575);
				match(LR_BRACKET);
				setState(1576);
				search_condition();
				setState(1577);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_expressionContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<Sql_unionContext> sql_union() {
			return getRuleContexts(Sql_unionContext.class);
		}
		public Sql_unionContext sql_union(int i) {
			return getRuleContext(Sql_unionContext.class,i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_query_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1586);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(1581);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				setState(1582);
				match(LR_BRACKET);
				setState(1583);
				query_expression();
				setState(1584);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1591);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1588);
					sql_union();
					}
					} 
				}
				setState(1593);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_unionContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(MocaSqlParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(MocaSqlParser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(MocaSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public Sql_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_union; }
	}

	public final Sql_unionContext sql_union() throws RecognitionException {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_sql_union);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(1594);
				match(UNION);
				setState(1596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(1595);
					match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				setState(1598);
				match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				setState(1599);
				match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1607);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(1602);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				setState(1603);
				match(LR_BRACKET);
				setState(1604);
				query_expression();
				setState(1605);
				match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_specificationContext extends ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public TerminalNode SELECT() { return getToken(MocaSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(MocaSqlParser.HAVING, 0); }
		public List<TerminalNode> ALL() { return getTokens(MocaSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(MocaSqlParser.ALL, i);
		}
		public TerminalNode DISTINCT() { return getToken(MocaSqlParser.DISTINCT, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_query_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1609);
			match(SELECT);
			setState(1611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1610);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(1613);
				top_clause();
				}
			}

			setState(1616);
			select_list();
			setState(1619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1617);
				match(INTO);
				setState(1618);
				table_name();
				}
			}

			setState(1623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1621);
				match(FROM);
				setState(1622);
				table_sources();
				}
			}

			setState(1627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(1625);
				match(WHERE);
				setState(1626);
				((Query_specificationContext)_localctx).where = search_condition();
				}
				break;
			}
			setState(1642);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(1629);
				match(GROUP);
				setState(1630);
				match(BY);
				setState(1632);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(1631);
					match(ALL);
					}
				}

				setState(1634);
				group_by_item();
				setState(1639);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1635);
						match(COMMA);
						setState(1636);
						group_by_item();
						}
						} 
					}
					setState(1641);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
				}
				}
				break;
			}
			setState(1646);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(1644);
				match(HAVING);
				setState(1645);
				((Query_specificationContext)_localctx).having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return getRuleContext(Top_percentContext.class,0);
		}
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(MocaSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_top_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1648);
			match(TOP);
			setState(1651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				setState(1649);
				top_percent();
				}
				break;
			case 2:
				{
				setState(1650);
				top_count();
				}
				break;
			}
			setState(1655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1653);
				match(WITH);
				setState(1654);
				match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Top_percentContext extends ParserRuleContext {
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public TerminalNode REAL() { return getToken(MocaSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(MocaSqlParser.FLOAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Top_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_percent; }
	}

	public final Top_percentContext top_percent() throws RecognitionException {
		Top_percentContext _localctx = new Top_percentContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_top_percent);
		int _la;
		try {
			setState(1664);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLOAT:
			case REAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1657);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1658);
				match(PERCENT);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1659);
				match(LR_BRACKET);
				setState(1660);
				expression(0);
				setState(1661);
				match(RR_BRACKET);
				setState(1662);
				match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Top_countContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Top_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_count; }
	}

	public final Top_countContext top_count() throws RecognitionException {
		Top_countContext _localctx = new Top_countContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_top_count);
		try {
			setState(1671);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1666);
				match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1667);
				match(LR_BRACKET);
				setState(1668);
				expression(0);
				setState(1669);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MocaSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode OFFSET() { return getToken(MocaSqlParser.OFFSET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(MocaSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(MocaSqlParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MocaSqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MocaSqlParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(MocaSqlParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(MocaSqlParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(MocaSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MocaSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1673);
			match(ORDER);
			setState(1674);
			match(BY);
			setState(1675);
			order_by_expression();
			setState(1680);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1676);
					match(COMMA);
					setState(1677);
					order_by_expression();
					}
					} 
				}
				setState(1682);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			}
			setState(1694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(1683);
				match(OFFSET);
				setState(1684);
				expression(0);
				setState(1685);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FETCH) {
					{
					setState(1686);
					match(FETCH);
					setState(1687);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1688);
					expression(0);
					setState(1689);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1690);
					match(ONLY);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(MocaSqlParser.BROWSE, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode RAW() { return getToken(MocaSqlParser.RAW, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public List<Xml_common_directivesContext> xml_common_directives() {
			return getRuleContexts(Xml_common_directivesContext.class);
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return getRuleContext(Xml_common_directivesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode ELEMENTS() { return getToken(MocaSqlParser.ELEMENTS, 0); }
		public TerminalNode XSINIL() { return getToken(MocaSqlParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(MocaSqlParser.ABSENT, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode XMLDATA() { return getToken(MocaSqlParser.XMLDATA, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(MocaSqlParser.XMLSCHEMA, 0); }
		public TerminalNode EXPLICIT() { return getToken(MocaSqlParser.EXPLICIT, 0); }
		public TerminalNode PATH() { return getToken(MocaSqlParser.PATH, 0); }
		public TerminalNode JSON() { return getToken(MocaSqlParser.JSON, 0); }
		public TerminalNode ROOT() { return getToken(MocaSqlParser.ROOT, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(MocaSqlParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(MocaSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_for_clause);
		int _la;
		try {
			int _alt;
			setState(1784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1696);
				match(FOR);
				setState(1697);
				match(BROWSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1698);
				match(FOR);
				setState(1699);
				match(XML);
				setState(1707);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RAW:
					{
					setState(1700);
					match(RAW);
					setState(1704);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
					case 1:
						{
						setState(1701);
						match(LR_BRACKET);
						setState(1702);
						match(STRING);
						setState(1703);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					setState(1706);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1712);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,246,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1709);
						xml_common_directives();
						}
						} 
					}
					setState(1714);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,246,_ctx);
				}
				setState(1725);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(1715);
					match(COMMA);
					setState(1723);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case XMLDATA:
						{
						setState(1716);
						match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						setState(1717);
						match(XMLSCHEMA);
						setState(1721);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
						case 1:
							{
							setState(1718);
							match(LR_BRACKET);
							setState(1719);
							match(STRING);
							setState(1720);
							match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(1730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(1727);
					match(COMMA);
					setState(1728);
					match(ELEMENTS);
					setState(1729);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1732);
				match(FOR);
				setState(1733);
				match(XML);
				setState(1734);
				match(EXPLICIT);
				setState(1738);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1735);
						xml_common_directives();
						}
						} 
					}
					setState(1740);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
				}
				setState(1743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					setState(1741);
					match(COMMA);
					setState(1742);
					match(XMLDATA);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1745);
				match(FOR);
				setState(1746);
				match(XML);
				setState(1747);
				match(PATH);
				setState(1751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(1748);
					match(LR_BRACKET);
					setState(1749);
					match(STRING);
					setState(1750);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1756);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1753);
						xml_common_directives();
						}
						} 
					}
					setState(1758);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
				}
				setState(1762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(1759);
					match(COMMA);
					setState(1760);
					match(ELEMENTS);
					setState(1761);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1764);
				match(FOR);
				setState(1765);
				match(JSON);
				setState(1766);
				_la = _input.LA(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1774);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(1767);
					match(COMMA);
					setState(1768);
					match(ROOT);
					setState(1772);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
					case 1:
						{
						setState(1769);
						match(LR_BRACKET);
						setState(1770);
						match(STRING);
						setState(1771);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(1778);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(1776);
					match(COMMA);
					setState(1777);
					match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				setState(1782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(1780);
					match(COMMA);
					setState(1781);
					match(WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(MocaSqlParser.BINARY_BASE64, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(MocaSqlParser.ROOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_xml_common_directives);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			match(COMMA);
			setState(1795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_BASE64:
				{
				setState(1787);
				match(BINARY_BASE64);
				}
				break;
			case TYPE:
				{
				setState(1788);
				match(TYPE);
				}
				break;
			case ROOT:
				{
				setState(1789);
				match(ROOT);
				setState(1793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					setState(1790);
					match(LR_BRACKET);
					setState(1791);
					match(STRING);
					setState(1792);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MocaSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MocaSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_order_by_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1797);
			expression(0);
			setState(1799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1798);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_group_by_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Option_clauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(MocaSqlParser.OPTION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1803);
			match(OPTION);
			setState(1804);
			match(LR_BRACKET);
			setState(1805);
			option();
			setState(1810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1806);
				match(COMMA);
				setState(1807);
				option();
				}
				}
				setState(1812);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1813);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Token number_of_processors;
		public Token number_recursion;
		public TerminalNode FAST() { return getToken(MocaSqlParser.FAST, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(MocaSqlParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(MocaSqlParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(MocaSqlParser.UNION, 0); }
		public TerminalNode MERGE() { return getToken(MocaSqlParser.MERGE, 0); }
		public TerminalNode CONCAT() { return getToken(MocaSqlParser.CONCAT, 0); }
		public TerminalNode JOIN() { return getToken(MocaSqlParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(MocaSqlParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(MocaSqlParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(MocaSqlParser.VIEWS, 0); }
		public TerminalNode FORCE() { return getToken(MocaSqlParser.FORCE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(MocaSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(MocaSqlParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(MocaSqlParser.KEEPFIXED, 0); }
		public TerminalNode MAXDOP() { return getToken(MocaSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(MocaSqlParser.MAXRECURSION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(MocaSqlParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode UNKNOWN() { return getToken(MocaSqlParser.UNKNOWN, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(MocaSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(MocaSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(MocaSqlParser.FORCED, 0); }
		public TerminalNode RECOMPILE() { return getToken(MocaSqlParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(MocaSqlParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(MocaSqlParser.USE, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_option);
		int _la;
		try {
			setState(1860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1815);
				match(FAST);
				setState(1816);
				((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1817);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1818);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1819);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1820);
				match(UNION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1821);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1822);
				match(JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1823);
				match(EXPAND);
				setState(1824);
				match(VIEWS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1825);
				match(FORCE);
				setState(1826);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1827);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1828);
				match(KEEP);
				setState(1829);
				match(PLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1830);
				match(KEEPFIXED);
				setState(1831);
				match(PLAN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1832);
				match(MAXDOP);
				setState(1833);
				((OptionContext)_localctx).number_of_processors = match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1834);
				match(MAXRECURSION);
				setState(1835);
				((OptionContext)_localctx).number_recursion = match(DECIMAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1836);
				match(OPTIMIZE);
				setState(1837);
				match(FOR);
				setState(1838);
				match(LR_BRACKET);
				setState(1839);
				optimize_for_arg();
				setState(1844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1840);
					match(COMMA);
					setState(1841);
					optimize_for_arg();
					}
					}
					setState(1846);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1847);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1849);
				match(OPTIMIZE);
				setState(1850);
				match(FOR);
				setState(1851);
				match(UNKNOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1852);
				match(PARAMETERIZATION);
				setState(1853);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1854);
				match(RECOMPILE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1855);
				match(ROBUST);
				setState(1856);
				match(PLAN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1857);
				match(USE);
				setState(1858);
				match(PLAN);
				setState(1859);
				match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode UNKNOWN() { return getToken(MocaSqlParser.UNKNOWN, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862);
			match(LOCAL_ID);
			setState(1869);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(1863);
				match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(1864);
				match(EQUAL);
				setState(1867);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(1865);
					constant();
					}
					break;
				case NULL:
					{
					setState(1866);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1871);
			select_list_elem();
			setState(1876);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1872);
					match(COMMA);
					setState(1873);
					select_list_elem();
					}
					} 
				}
				setState(1878);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Udt_method_argumentsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_method_arguments; }
	}

	public final Udt_method_argumentsContext udt_method_arguments() throws RecognitionException {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_udt_method_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1879);
			match(LR_BRACKET);
			setState(1880);
			execute_var_string();
			setState(1885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1881);
				match(COMMA);
				setState(1882);
				execute_var_string();
				}
				}
				setState(1887);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1888);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AsteriskContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(MocaSqlParser.STAR, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public AsteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asterisk; }
	}

	public final AsteriskContext asterisk() throws RecognitionException {
		AsteriskContext _localctx = new AsteriskContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_asterisk);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCKING_HIERARCHY || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0)) {
				{
				setState(1890);
				table_name();
				setState(1891);
				match(DOT);
				}
			}

			setState(1895);
			match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_elemContext extends ParserRuleContext {
		public IdContext column_name;
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public TerminalNode DOLLAR() { return getToken(MocaSqlParser.DOLLAR, 0); }
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUID() { return getToken(MocaSqlParser.ROWGUID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem; }
	}

	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_column_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOLLAR:
				{
				setState(1900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(1897);
					table_name();
					setState(1898);
					match(DOT);
					}
					break;
				}
				setState(1907);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					setState(1902);
					((Column_elemContext)_localctx).column_name = id();
					}
					break;
				case 2:
					{
					setState(1903);
					match(DOLLAR);
					setState(1904);
					match(IDENTITY);
					}
					break;
				case 3:
					{
					setState(1905);
					match(DOLLAR);
					setState(1906);
					match(ROWGUID);
					}
					break;
				}
				}
				break;
			case NULL:
				{
				setState(1909);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(1912);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Udt_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext non_static_attr;
		public IdContext static_attr;
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Udt_method_argumentsContext udt_method_arguments() {
			return getRuleContext(Udt_method_argumentsContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(MocaSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(MocaSqlParser.COLON, i);
		}
		public Udt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_elem; }
	}

	public final Udt_elemContext udt_elem() throws RecognitionException {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_udt_elem);
		try {
			setState(1932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1915);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(1916);
				match(DOT);
				setState(1917);
				((Udt_elemContext)_localctx).non_static_attr = id();
				setState(1918);
				udt_method_arguments();
				setState(1920);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(1919);
					as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1922);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(1923);
				match(COLON);
				setState(1924);
				match(COLON);
				setState(1925);
				((Udt_elemContext)_localctx).static_attr = id();
				setState(1927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					setState(1926);
					udt_method_arguments();
					}
					break;
				}
				setState(1930);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(1929);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expression_elemContext extends ParserRuleContext {
		public Token eq;
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_elem; }
	}

	public final Expression_elemContext expression_elem() throws RecognitionException {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_expression_elem);
		try {
			setState(1942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1934);
				column_alias();
				setState(1935);
				((Expression_elemContext)_localctx).eq = match(EQUAL);
				setState(1936);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1938);
				expression(0);
				setState(1940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
				case 1:
					{
					setState(1939);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_list_elemContext extends ParserRuleContext {
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public Column_elemContext column_elem() {
			return getRuleContext(Column_elemContext.class,0);
		}
		public Udt_elemContext udt_elem() {
			return getRuleContext(Udt_elemContext.class,0);
		}
		public Expression_elemContext expression_elem() {
			return getRuleContext(Expression_elemContext.class,0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_select_list_elem);
		try {
			setState(1948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1944);
				asterisk();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1945);
				column_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1946);
				udt_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1947);
				expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_sourcesContext extends ParserRuleContext {
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_table_sources);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1950);
			table_source();
			setState(1955);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,283,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1951);
					match(COMMA);
					setState(1952);
					table_source();
					}
					} 
				}
				setState(1957);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,283,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_table_source);
		try {
			setState(1963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1958);
				table_source_item_joined();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1959);
				match(LR_BRACKET);
				setState(1960);
				table_source_item_joined();
				setState(1961);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_table_source_item_joined);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1965);
			table_source_item();
			setState(1969);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,285,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1966);
					join_part();
					}
					} 
				}
				setState(1971);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,285,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_source_itemContext extends ParserRuleContext {
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Open_xmlContext open_xml() {
			return getRuleContext(Open_xmlContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(MocaSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(MocaSqlParser.COLON, i);
		}
		public TerminalNode RAW() { return getToken(MocaSqlParser.RAW, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_table_source_item);
		int _la;
		try {
			setState(2028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1972);
				table_name_with_hint();
				setState(1974);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					setState(1973);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1976);
				full_table_name();
				setState(1978);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(1977);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1980);
				rowset_function();
				setState(1982);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					setState(1981);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1984);
				derived_table();
				setState(1989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(1985);
					as_table_alias();
					setState(1987);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
					case 1:
						{
						setState(1986);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1991);
				change_table();
				setState(1992);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1994);
				function_call();
				setState(1999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(1995);
					as_table_alias();
					setState(1997);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
					case 1:
						{
						setState(1996);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2001);
				match(LOCAL_ID);
				setState(2003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(2002);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2005);
				match(LOCAL_ID);
				setState(2006);
				match(DOT);
				setState(2007);
				function_call();
				setState(2012);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(2008);
					as_table_alias();
					setState(2010);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
					case 1:
						{
						setState(2009);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2014);
				open_xml();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2015);
				match(COLON);
				setState(2016);
				match(COLON);
				setState(2017);
				function_call();
				setState(2019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(2018);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(2021);
				match(LOCAL_ID);
				setState(2024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(2022);
					match(DOT);
					setState(2023);
					simple_id();
					}
				}

				setState(2026);
				match(COLON);
				setState(2027);
				match(RAW);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Open_xmlContext extends ParserRuleContext {
		public TerminalNode OPENXML() { return getToken(MocaSqlParser.OPENXML, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return getRuleContext(Schema_declarationContext.class,0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_xml; }
	}

	public final Open_xmlContext open_xml() throws RecognitionException {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_open_xml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2030);
			match(OPENXML);
			setState(2031);
			match(LR_BRACKET);
			setState(2032);
			expression(0);
			setState(2033);
			match(COMMA);
			setState(2034);
			expression(0);
			setState(2037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2035);
				match(COMMA);
				setState(2036);
				expression(0);
				}
			}

			setState(2039);
			match(RR_BRACKET);
			setState(2045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(2040);
				match(WITH);
				setState(2041);
				match(LR_BRACKET);
				setState(2042);
				schema_declaration();
				setState(2043);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_declarationContext extends ParserRuleContext {
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_declaration; }
	}

	public final Schema_declarationContext schema_declaration() throws RecognitionException {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_schema_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2047);
			column_declaration();
			setState(2052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2048);
				match(COMMA);
				setState(2049);
				column_declaration();
				}
				}
				setState(2054);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_declarationContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_declaration; }
	}

	public final Column_declarationContext column_declaration() throws RecognitionException {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2055);
			match(ID);
			setState(2056);
			data_type();
			setState(2058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(2057);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Change_tableContext extends ParserRuleContext {
		public TerminalNode CHANGETABLE() { return getToken(MocaSqlParser.CHANGETABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode CHANGES() { return getToken(MocaSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_change_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			match(CHANGETABLE);
			setState(2061);
			match(LR_BRACKET);
			setState(2062);
			match(CHANGES);
			setState(2063);
			table_name();
			setState(2064);
			match(COMMA);
			setState(2065);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2066);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_partContext extends ParserRuleContext {
		public Token join_type;
		public Token join_hint;
		public TerminalNode JOIN() { return getToken(MocaSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MocaSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MocaSqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(MocaSqlParser.FULL, 0); }
		public TerminalNode INNER() { return getToken(MocaSqlParser.INNER, 0); }
		public TerminalNode OUTER() { return getToken(MocaSqlParser.OUTER, 0); }
		public TerminalNode LOOP() { return getToken(MocaSqlParser.LOOP, 0); }
		public TerminalNode HASH() { return getToken(MocaSqlParser.HASH, 0); }
		public TerminalNode MERGE() { return getToken(MocaSqlParser.MERGE, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public TerminalNode CROSS() { return getToken(MocaSqlParser.CROSS, 0); }
		public TerminalNode APPLY() { return getToken(MocaSqlParser.APPLY, 0); }
		public TerminalNode PIVOT() { return getToken(MocaSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public TerminalNode UNPIVOT() { return getToken(MocaSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_join_part);
		int _la;
		try {
			setState(2102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2075);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					setState(2069);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INNER) {
						{
						setState(2068);
						match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					setState(2071);
					((Join_partContext)_localctx).join_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						((Join_partContext)_localctx).join_type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2073);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(2072);
						match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
					{
					setState(2077);
					((Join_partContext)_localctx).join_hint = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
						((Join_partContext)_localctx).join_hint = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2080);
				match(JOIN);
				setState(2081);
				table_source();
				setState(2082);
				match(ON);
				setState(2083);
				search_condition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2085);
				match(CROSS);
				setState(2086);
				match(JOIN);
				setState(2087);
				table_source();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2088);
				match(CROSS);
				setState(2089);
				match(APPLY);
				setState(2090);
				table_source();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2091);
				match(OUTER);
				setState(2092);
				match(APPLY);
				setState(2093);
				table_source();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2094);
				match(PIVOT);
				setState(2095);
				pivot_clause();
				setState(2096);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2098);
				match(UNPIVOT);
				setState(2099);
				unpivot_clause();
				setState(2100);
				as_table_alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_pivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2104);
			match(LR_BRACKET);
			setState(2105);
			aggregate_windowed_function();
			setState(2106);
			match(FOR);
			setState(2107);
			full_column_name();
			setState(2108);
			match(IN);
			setState(2109);
			column_alias_list();
			setState(2110);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unpivot_clauseContext extends ParserRuleContext {
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_unpivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2112);
			match(LR_BRACKET);
			setState(2113);
			expression(0);
			setState(2114);
			match(FOR);
			setState(2115);
			full_column_name();
			setState(2116);
			match(IN);
			setState(2117);
			match(LR_BRACKET);
			setState(2118);
			full_column_name_list();
			setState(2119);
			match(RR_BRACKET);
			setState(2120);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Full_column_name_listContext extends ParserRuleContext {
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name_list; }
	}

	public final Full_column_name_listContext full_column_name_list() throws RecognitionException {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_full_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2122);
			full_column_name();
			setState(2127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2123);
				match(COMMA);
				setState(2124);
				full_column_name();
				}
				}
				setState(2129);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_name_with_hintContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2130);
			table_name();
			setState(2132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(2131);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rowset_functionContext extends ParserRuleContext {
		public Token provider_name;
		public Token connectionString;
		public Token sql;
		public Token data_file;
		public TerminalNode OPENROWSET() { return getToken(MocaSqlParser.OPENROWSET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode BULK() { return getToken(MocaSqlParser.BULK, 0); }
		public List<Bulk_optionContext> bulk_option() {
			return getRuleContexts(Bulk_optionContext.class);
		}
		public Bulk_optionContext bulk_option(int i) {
			return getRuleContext(Bulk_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_rowset_function);
		int _la;
		try {
			setState(2160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2134);
				match(OPENROWSET);
				setState(2135);
				match(LR_BRACKET);
				setState(2136);
				((Rowset_functionContext)_localctx).provider_name = match(STRING);
				setState(2137);
				match(COMMA);
				setState(2138);
				((Rowset_functionContext)_localctx).connectionString = match(STRING);
				setState(2139);
				match(COMMA);
				setState(2140);
				((Rowset_functionContext)_localctx).sql = match(STRING);
				setState(2141);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2142);
				match(OPENROWSET);
				setState(2143);
				match(LR_BRACKET);
				setState(2144);
				match(BULK);
				setState(2145);
				((Rowset_functionContext)_localctx).data_file = match(STRING);
				setState(2146);
				match(COMMA);
				setState(2156);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(2147);
					bulk_option();
					setState(2152);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2148);
						match(COMMA);
						setState(2149);
						bulk_option();
						}
						}
						setState(2154);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(2155);
					id();
					}
					break;
				}
				setState(2158);
				match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bulk_optionContext extends ParserRuleContext {
		public Token bulk_option_value;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2162);
			id();
			setState(2163);
			match(EQUAL);
			setState(2164);
			((Bulk_optionContext)_localctx).bulk_option_value = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				((Bulk_optionContext)_localctx).bulk_option_value = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Derived_tableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_derived_table);
		try {
			setState(2176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2166);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2167);
				match(LR_BRACKET);
				setState(2168);
				subquery();
				setState(2169);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2171);
				table_value_constructor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2172);
				match(LR_BRACKET);
				setState(2173);
				table_value_constructor();
				setState(2174);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_callContext extends ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	 
		public Function_callContext() { }
		public void copyFrom(Function_callContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CURRENT_USERContext extends Function_callContext {
		public TerminalNode CURRENT_USER() { return getToken(MocaSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DATEADDContext extends Function_callContext {
		public TerminalNode DATEADD() { return getToken(MocaSqlParser.DATEADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public DATEADDContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CHECKSUMContext extends Function_callContext {
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(MocaSqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CURRENT_TIMESTAMPContext extends Function_callContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MocaSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BINARY_CHECKSUMContext extends Function_callContext {
		public TerminalNode BINARY_CHECKSUM() { return getToken(MocaSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(MocaSqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public BINARY_CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IFFContext extends Function_callContext {
		public TerminalNode IIF() { return getToken(MocaSqlParser.IIF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public IFFContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SYSTEM_USERContext extends Function_callContext {
		public TerminalNode SYSTEM_USER() { return getToken(MocaSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NULLIFContext extends Function_callContext {
		public TerminalNode NULLIF() { return getToken(MocaSqlParser.NULLIF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public NULLIFContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SESSION_USERContext extends Function_callContext {
		public TerminalNode SESSION_USER() { return getToken(MocaSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CONVERTContext extends Function_callContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public TerminalNode CONVERT() { return getToken(MocaSqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CONVERTContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class XML_DATA_TYPE_FUNCContext extends Function_callContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return getRuleContext(Xml_data_type_methodsContext.class,0);
		}
		public XML_DATA_TYPE_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class COALESCEContext extends Function_callContext {
		public TerminalNode COALESCE() { return getToken(MocaSqlParser.COALESCE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public COALESCEContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CASTContext extends Function_callContext {
		public TerminalNode CAST() { return getToken(MocaSqlParser.CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public CASTContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MIN_ACTIVE_ROWVERSIONContext extends Function_callContext {
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(MocaSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SCALAR_FUNCTIONContext extends Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DATEPARTContext extends Function_callContext {
		public TerminalNode DATEPART() { return getToken(MocaSqlParser.DATEPART, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public DATEPARTContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class STUFFContext extends Function_callContext {
		public TerminalNode STUFF() { return getToken(MocaSqlParser.STUFF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public STUFFContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AGGREGATE_WINDOWED_FUNCContext extends Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IDENTITYContext extends Function_callContext {
		public Token seed;
		public Token increment;
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RANKING_WINDOWED_FUNCContext extends Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DATENAMEContext extends Function_callContext {
		public TerminalNode DATENAME() { return getToken(MocaSqlParser.DATENAME, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public DATENAMEContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GETUTCDATEContext extends Function_callContext {
		public TerminalNode GETUTCDATE() { return getToken(MocaSqlParser.GETUTCDATE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public GETUTCDATEContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ANALYTIC_WINDOWED_FUNCContext extends Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return getRuleContext(Analytic_windowed_functionContext.class,0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ISNULLContext extends Function_callContext {
		public TerminalNode ISNULL() { return getToken(MocaSqlParser.ISNULL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public ISNULLContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DATEDIFFContext extends Function_callContext {
		public TerminalNode DATEDIFF() { return getToken(MocaSqlParser.DATEDIFF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public DATEDIFFContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GETDATEContext extends Function_callContext {
		public TerminalNode GETDATE() { return getToken(MocaSqlParser.GETDATE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public GETDATEContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class STRINGAGGContext extends Function_callContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public TerminalNode STRING_AGG() { return getToken(MocaSqlParser.STRING_AGG, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITHIN() { return getToken(MocaSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public STRINGAGGContext(Function_callContext ctx) { copyFrom(ctx); }
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_function_call);
		int _la;
		try {
			setState(2324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2178);
				match(BINARY_CHECKSUM);
				setState(2179);
				match(LR_BRACKET);
				setState(2180);
				match(STAR);
				setState(2181);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new CASTContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2182);
				match(CAST);
				setState(2183);
				match(LR_BRACKET);
				setState(2184);
				expression(0);
				setState(2185);
				match(AS);
				setState(2186);
				data_type();
				setState(2187);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new CONVERTContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2189);
				match(CONVERT);
				setState(2190);
				match(LR_BRACKET);
				setState(2191);
				((CONVERTContext)_localctx).convert_data_type = data_type();
				setState(2192);
				match(COMMA);
				setState(2193);
				((CONVERTContext)_localctx).convert_expression = expression(0);
				setState(2196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2194);
					match(COMMA);
					setState(2195);
					((CONVERTContext)_localctx).style = expression(0);
					}
				}

				setState(2198);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2200);
				match(CHECKSUM);
				setState(2201);
				match(LR_BRACKET);
				setState(2202);
				match(STAR);
				setState(2203);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new COALESCEContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2204);
				match(COALESCE);
				setState(2205);
				match(LR_BRACKET);
				setState(2206);
				expression_list();
				setState(2207);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2209);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 7:
				_localctx = new CURRENT_USERContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2210);
				match(CURRENT_USER);
				}
				break;
			case 8:
				_localctx = new DATEADDContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2211);
				match(DATEADD);
				setState(2212);
				match(LR_BRACKET);
				setState(2213);
				match(ID);
				setState(2214);
				match(COMMA);
				setState(2215);
				expression(0);
				setState(2216);
				match(COMMA);
				setState(2217);
				expression(0);
				setState(2218);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new DATEDIFFContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2220);
				match(DATEDIFF);
				setState(2221);
				match(LR_BRACKET);
				setState(2222);
				match(ID);
				setState(2223);
				match(COMMA);
				setState(2224);
				expression(0);
				setState(2225);
				match(COMMA);
				setState(2226);
				expression(0);
				setState(2227);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new DATENAMEContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2229);
				match(DATENAME);
				setState(2230);
				match(LR_BRACKET);
				setState(2231);
				match(ID);
				setState(2232);
				match(COMMA);
				setState(2233);
				expression(0);
				setState(2234);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new DATEPARTContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2236);
				match(DATEPART);
				setState(2237);
				match(LR_BRACKET);
				setState(2238);
				match(ID);
				setState(2239);
				match(COMMA);
				setState(2240);
				expression(0);
				setState(2241);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new GETDATEContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2243);
				match(GETDATE);
				setState(2244);
				match(LR_BRACKET);
				setState(2245);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new GETUTCDATEContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2246);
				match(GETUTCDATE);
				setState(2247);
				match(LR_BRACKET);
				setState(2248);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new IDENTITYContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2249);
				match(IDENTITY);
				setState(2250);
				match(LR_BRACKET);
				setState(2251);
				data_type();
				setState(2254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(2252);
					match(COMMA);
					setState(2253);
					((IDENTITYContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(2258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2256);
					match(COMMA);
					setState(2257);
					((IDENTITYContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(2260);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2262);
				match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 16:
				_localctx = new NULLIFContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2263);
				match(NULLIF);
				setState(2264);
				match(LR_BRACKET);
				setState(2265);
				expression(0);
				setState(2266);
				match(COMMA);
				setState(2267);
				expression(0);
				setState(2268);
				match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new STUFFContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2270);
				match(STUFF);
				setState(2271);
				match(LR_BRACKET);
				setState(2272);
				expression(0);
				setState(2273);
				match(COMMA);
				setState(2274);
				match(DECIMAL);
				setState(2275);
				match(COMMA);
				setState(2276);
				match(DECIMAL);
				setState(2277);
				match(COMMA);
				setState(2278);
				expression(0);
				setState(2279);
				match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new SESSION_USERContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2281);
				match(SESSION_USER);
				}
				break;
			case 19:
				_localctx = new SYSTEM_USERContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2282);
				match(SYSTEM_USER);
				}
				break;
			case 20:
				_localctx = new ISNULLContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2283);
				match(ISNULL);
				setState(2284);
				match(LR_BRACKET);
				setState(2285);
				expression(0);
				setState(2286);
				match(COMMA);
				setState(2287);
				expression(0);
				setState(2288);
				match(RR_BRACKET);
				}
				break;
			case 21:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2290);
				xml_data_type_methods();
				}
				break;
			case 22:
				_localctx = new IFFContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2291);
				match(IIF);
				setState(2292);
				match(LR_BRACKET);
				setState(2293);
				search_condition();
				setState(2294);
				match(COMMA);
				setState(2295);
				expression(0);
				setState(2296);
				match(COMMA);
				setState(2297);
				expression(0);
				setState(2298);
				match(RR_BRACKET);
				}
				break;
			case 23:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2300);
				ranking_windowed_function();
				}
				break;
			case 24:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2301);
				aggregate_windowed_function();
				}
				break;
			case 25:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2302);
				analytic_windowed_function();
				}
				break;
			case 26:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2303);
				scalar_function_name();
				setState(2304);
				match(LR_BRACKET);
				setState(2306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9009950181294082L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & -7493418033897797247L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 1649406379025L) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & 1729388032567934995L) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & 38443498638148621L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 7466994020435099647L) != 0) || ((((_la - 811)) & ~0x3f) == 0 && ((1L << (_la - 811)) & 60179873807L) != 0)) {
					{
					setState(2305);
					expression_list();
					}
				}

				setState(2308);
				match(RR_BRACKET);
				}
				break;
			case 27:
				_localctx = new STRINGAGGContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2310);
				match(STRING_AGG);
				setState(2311);
				match(LR_BRACKET);
				setState(2312);
				((STRINGAGGContext)_localctx).expr = expression(0);
				setState(2313);
				match(COMMA);
				setState(2314);
				((STRINGAGGContext)_localctx).separator = expression(0);
				setState(2315);
				match(RR_BRACKET);
				setState(2322);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					setState(2316);
					match(WITHIN);
					setState(2317);
					match(GROUP);
					setState(2318);
					match(LR_BRACKET);
					setState(2319);
					order_by_clause();
					setState(2320);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_data_type_methodsContext extends ParserRuleContext {
		public Value_methodContext value_method() {
			return getRuleContext(Value_methodContext.class,0);
		}
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Exist_methodContext exist_method() {
			return getRuleContext(Exist_methodContext.class,0);
		}
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Nodes_methodContext nodes_method() {
			return getRuleContext(Nodes_methodContext.class,0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_data_type_methods; }
	}

	public final Xml_data_type_methodsContext xml_data_type_methods() throws RecognitionException {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_xml_data_type_methods);
		try {
			setState(2331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2326);
				value_method();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2327);
				query_method();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2328);
				exist_method();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2329);
				modify_method();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2330);
				nodes_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Value_methodContext extends ParserRuleContext {
		public Token xquery;
		public Token sqltype;
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public TerminalNode VALUE() { return getToken(MocaSqlParser.VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode EVENTDATA() { return getToken(MocaSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public TerminalNode PARAM_NODE() { return getToken(MocaSqlParser.PARAM_NODE, 0); }
		public Value_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_method; }
	}

	public final Value_methodContext value_method() throws RecognitionException {
		Value_methodContext _localctx = new Value_methodContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_value_method);
		try {
			setState(2376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
				case 1:
					{
					setState(2333);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2334);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2335);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(2336);
					query_method();
					}
					break;
				}
				setState(2339);
				match(DOT);
				setState(2340);
				match(VALUE);
				setState(2341);
				match(LR_BRACKET);
				setState(2342);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(2343);
				match(COMMA);
				setState(2344);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(2345);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
				case 1:
					{
					setState(2346);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2347);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2348);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(2349);
					query_method();
					}
					break;
				}
				setState(2352);
				match(DOT);
				setState(2353);
				match(ROW);
				setState(2354);
				match(DOT);
				setState(2355);
				match(VALUE);
				setState(2356);
				match(LR_BRACKET);
				setState(2357);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(2358);
				match(COMMA);
				setState(2359);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(2360);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2365);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					setState(2361);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2362);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2363);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(2364);
					query_method();
					}
					break;
				}
				setState(2367);
				match(DOT);
				setState(2368);
				match(PARAM_NODE);
				setState(2369);
				match(DOT);
				setState(2370);
				match(VALUE);
				setState(2371);
				match(LR_BRACKET);
				setState(2372);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(2373);
				match(COMMA);
				setState(2374);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(2375);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_methodContext extends ParserRuleContext {
		public Token xquery;
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public TerminalNode QUERY() { return getToken(MocaSqlParser.QUERY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public Query_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_method; }
	}

	public final Query_methodContext query_method() throws RecognitionException {
		Query_methodContext _localctx = new Query_methodContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_query_method);
		try {
			setState(2400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
				case 1:
					{
					setState(2378);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2379);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2380);
					full_table_name();
					}
					break;
				}
				setState(2383);
				match(DOT);
				setState(2384);
				match(QUERY);
				setState(2385);
				match(LR_BRACKET);
				setState(2386);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(2387);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					setState(2388);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2389);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2390);
					full_table_name();
					}
					break;
				}
				setState(2393);
				match(DOT);
				setState(2394);
				match(ROW);
				setState(2395);
				match(DOT);
				setState(2396);
				match(QUERY);
				setState(2397);
				match(LR_BRACKET);
				setState(2398);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(2399);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exist_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode EXIST() { return getToken(MocaSqlParser.EXIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Exist_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_method; }
	}

	public final Exist_methodContext exist_method() throws RecognitionException {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_exist_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2402);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2403);
			match(DOT);
			setState(2404);
			match(EXIST);
			setState(2405);
			match(LR_BRACKET);
			setState(2406);
			((Exist_methodContext)_localctx).xquery = match(STRING);
			setState(2407);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Modify_methodContext extends ParserRuleContext {
		public Token xml_dml;
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Modify_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_method; }
	}

	public final Modify_methodContext modify_method() throws RecognitionException {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_modify_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2409);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2410);
			match(DOT);
			setState(2411);
			match(MODIFY);
			setState(2412);
			match(LR_BRACKET);
			setState(2413);
			((Modify_methodContext)_localctx).xml_dml = match(STRING);
			setState(2414);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nodes_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode NODES() { return getToken(MocaSqlParser.NODES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Nodes_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodes_method; }
	}

	public final Nodes_methodContext nodes_method() throws RecognitionException {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_nodes_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2416);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2417);
			match(DOT);
			setState(2418);
			match(NODES);
			setState(2419);
			match(LR_BRACKET);
			setState(2420);
			((Nodes_methodContext)_localctx).xquery = match(STRING);
			setState(2421);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MocaSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(MocaSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2423);
			match(WHEN);
			setState(2424);
			expression(0);
			setState(2425);
			match(THEN);
			setState(2426);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MocaSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MocaSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2428);
			match(WHEN);
			setState(2429);
			search_condition();
			setState(2430);
			match(THEN);
			setState(2431);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class As_column_aliasContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_column_alias; }
	}

	public final As_column_aliasContext as_column_alias() throws RecognitionException {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_as_column_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2433);
				match(AS);
				}
			}

			setState(2436);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class As_table_aliasContext extends ParserRuleContext {
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2438);
				match(AS);
				}
			}

			setState(2441);
			table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2443);
			id();
			setState(2445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(2444);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_table_hintsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2447);
				match(WITH);
				}
			}

			setState(2450);
			match(LR_BRACKET);
			setState(2451);
			table_hint();
			setState(2458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3073L) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(2453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2452);
					match(COMMA);
					}
				}

				setState(2455);
				table_hint();
				}
				}
				setState(2460);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2461);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_with_table_hintsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_table_hints; }
	}

	public final Insert_with_table_hintsContext insert_with_table_hints() throws RecognitionException {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_insert_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2463);
			match(WITH);
			setState(2464);
			match(LR_BRACKET);
			setState(2465);
			table_hint();
			setState(2472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3073L) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(2467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2466);
					match(COMMA);
					}
				}

				setState(2469);
				table_hint();
				}
				}
				setState(2474);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2475);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public List<Index_valueContext> index_value() {
			return getRuleContexts(Index_valueContext.class);
		}
		public Index_valueContext index_value(int i) {
			return getRuleContext(Index_valueContext.class,i);
		}
		public TerminalNode FORCESEEK() { return getToken(MocaSqlParser.FORCESEEK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MocaSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MocaSqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(MocaSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public List<TerminalNode> ID() { return getTokens(MocaSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(MocaSqlParser.ID, i);
		}
		public TerminalNode NOEXPAND() { return getToken(MocaSqlParser.NOEXPAND, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_table_hint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(2477);
				match(NOEXPAND);
				}
			}

			setState(2528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(2480);
				match(INDEX);
				setState(2500);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(2481);
					match(LR_BRACKET);
					setState(2482);
					index_value();
					setState(2487);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2483);
						match(COMMA);
						setState(2484);
						index_value();
						}
						}
						setState(2489);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2490);
					match(RR_BRACKET);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case URL:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case DECIMAL:
				case ID:
					{
					setState(2492);
					index_value();
					setState(2497);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2493);
							match(COMMA);
							setState(2494);
							index_value();
							}
							} 
						}
						setState(2499);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(2502);
				match(INDEX);
				setState(2503);
				match(EQUAL);
				setState(2504);
				index_value();
				}
				break;
			case 3:
				{
				setState(2505);
				match(FORCESEEK);
				setState(2520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2506);
					match(LR_BRACKET);
					setState(2507);
					index_value();
					setState(2508);
					match(LR_BRACKET);
					setState(2509);
					match(ID);
					setState(2514);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2510);
						match(COMMA);
						setState(2511);
						match(ID);
						}
						}
						setState(2516);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2517);
					match(RR_BRACKET);
					setState(2518);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				setState(2522);
				match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				setState(2523);
				match(SNAPSHOT);
				}
				break;
			case 6:
				{
				setState(2524);
				match(SPATIAL_WINDOW_MAX_CELLS);
				setState(2525);
				match(EQUAL);
				setState(2526);
				match(DECIMAL);
				}
				break;
			case 7:
				{
				setState(2527);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_valueContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_index_value);
		try {
			setState(2532);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2530);
				id();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2531);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_alias_listContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2534);
			match(LR_BRACKET);
			setState(2535);
			column_alias();
			setState(2540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2536);
				match(COMMA);
				setState(2537);
				column_alias();
				}
				}
				setState(2542);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2543);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_column_alias);
		try {
			setState(2547);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2545);
				id();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2546);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_value_constructorContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_table_value_constructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2549);
			match(VALUES);
			setState(2550);
			match(LR_BRACKET);
			setState(2551);
			expression_list();
			setState(2552);
			match(RR_BRACKET);
			setState(2560);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2553);
					match(COMMA);
					setState(2554);
					match(LR_BRACKET);
					setState(2555);
					expression_list();
					setState(2556);
					match(RR_BRACKET);
					}
					} 
				}
				setState(2562);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2563);
			expression(0);
			setState(2568);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2564);
				match(COMMA);
				setState(2565);
				expression(0);
				}
				}
				setState(2570);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RANK() { return getToken(MocaSqlParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MocaSqlParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MocaSqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTILE() { return getToken(MocaSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_ranking_windowed_function);
		int _la;
		try {
			setState(2581);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2571);
				_la = _input.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2572);
				match(LR_BRACKET);
				setState(2573);
				match(RR_BRACKET);
				setState(2574);
				over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2575);
				match(NTILE);
				setState(2576);
				match(LR_BRACKET);
				setState(2577);
				expression(0);
				setState(2578);
				match(RR_BRACKET);
				setState(2579);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(MocaSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MocaSqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MocaSqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MocaSqlParser.SUM, 0); }
		public TerminalNode STDEV() { return getToken(MocaSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(MocaSqlParser.STDEVP, 0); }
		public TerminalNode VAR() { return getToken(MocaSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(MocaSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(MocaSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(MocaSqlParser.COUNT_BIG, 0); }
		public TerminalNode STAR() { return getToken(MocaSqlParser.STAR, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(MocaSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode GROUPING() { return getToken(MocaSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode GROUPING_ID() { return getToken(MocaSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(2615);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				enterOuterAlt(_localctx, 1);
				{
				setState(2583);
				_la = _input.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 737)) & ~0x3f) == 0 && ((1L << (_la - 737)) & 13194139533443L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2584);
				match(LR_BRACKET);
				setState(2585);
				all_distinct_expression();
				setState(2586);
				match(RR_BRACKET);
				setState(2588);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(2587);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				enterOuterAlt(_localctx, 2);
				{
				setState(2590);
				_la = _input.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2591);
				match(LR_BRACKET);
				setState(2594);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(2592);
					match(STAR);
					}
					break;
				case T__0:
				case ALL:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case DISTINCT:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case URL:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(2593);
					all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2596);
				match(RR_BRACKET);
				setState(2598);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					setState(2597);
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				enterOuterAlt(_localctx, 3);
				{
				setState(2600);
				match(CHECKSUM_AGG);
				setState(2601);
				match(LR_BRACKET);
				setState(2602);
				all_distinct_expression();
				setState(2603);
				match(RR_BRACKET);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 4);
				{
				setState(2605);
				match(GROUPING);
				setState(2606);
				match(LR_BRACKET);
				setState(2607);
				expression(0);
				setState(2608);
				match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				enterOuterAlt(_localctx, 5);
				{
				setState(2610);
				match(GROUPING_ID);
				setState(2611);
				match(LR_BRACKET);
				setState(2612);
				expression_list();
				setState(2613);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Analytic_windowed_functionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(MocaSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MocaSqlParser.LAST_VALUE, 0); }
		public TerminalNode LAG() { return getToken(MocaSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(MocaSqlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_windowed_function; }
	}

	public final Analytic_windowed_functionContext analytic_windowed_function() throws RecognitionException {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_analytic_windowed_function);
		int _la;
		try {
			setState(2637);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2617);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2618);
				match(LR_BRACKET);
				setState(2619);
				expression(0);
				setState(2620);
				match(RR_BRACKET);
				setState(2621);
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 2);
				{
				setState(2623);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2624);
				match(LR_BRACKET);
				setState(2625);
				expression(0);
				setState(2632);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2626);
					match(COMMA);
					setState(2627);
					expression(0);
					setState(2630);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2628);
						match(COMMA);
						setState(2629);
						expression(0);
						}
					}

					}
				}

				setState(2634);
				match(RR_BRACKET);
				setState(2635);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class All_distinct_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MocaSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2639);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2642);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MocaSqlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2644);
			match(OVER);
			setState(2645);
			match(LR_BRACKET);
			setState(2649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2646);
				match(PARTITION);
				setState(2647);
				match(BY);
				setState(2648);
				expression_list();
				}
			}

			setState(2652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2651);
				order_by_clause();
				}
			}

			setState(2655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(2654);
				row_or_range_clause();
				}
			}

			setState(2657);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(MocaSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MocaSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2659);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2660);
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(MocaSqlParser.BETWEEN, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(MocaSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_window_frame_extent);
		try {
			setState(2668);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2662);
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2663);
				match(BETWEEN);
				setState(2664);
				window_frame_bound();
				setState(2665);
				match(AND);
				setState(2666);
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_window_frame_bound);
		try {
			setState(2672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2670);
				window_frame_preceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2671);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(MocaSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MocaSqlParser.PRECEDING, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_window_frame_preceding);
		try {
			setState(2680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2674);
				match(UNBOUNDED);
				setState(2675);
				match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2676);
				match(DECIMAL);
				setState(2677);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2678);
				match(CURRENT);
				setState(2679);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(MocaSqlParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(MocaSqlParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_window_frame_following);
		try {
			setState(2686);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2682);
				match(UNBOUNDED);
				setState(2683);
				match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2684);
				match(DECIMAL);
				setState(2685);
				match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Full_table_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_table_name; }
	}

	public final Full_table_nameContext full_table_name() throws RecognitionException {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_full_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(2688);
				((Full_table_nameContext)_localctx).server = id();
				setState(2689);
				match(DOT);
				setState(2690);
				((Full_table_nameContext)_localctx).database = id();
				setState(2691);
				match(DOT);
				setState(2692);
				((Full_table_nameContext)_localctx).schema = id();
				setState(2693);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(2695);
				((Full_table_nameContext)_localctx).database = id();
				setState(2696);
				match(DOT);
				setState(2698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0)) {
					{
					setState(2697);
					((Full_table_nameContext)_localctx).schema = id();
					}
				}

				setState(2700);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(2702);
				((Full_table_nameContext)_localctx).schema = id();
				setState(2703);
				match(DOT);
				}
				break;
			}
			setState(2707);
			((Full_table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(MocaSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_table_name);
		int _la;
		try {
			setState(2735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(2709);
					((Table_nameContext)_localctx).database = id();
					setState(2710);
					match(DOT);
					setState(2712);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0)) {
						{
						setState(2711);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(2714);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(2716);
					((Table_nameContext)_localctx).schema = id();
					setState(2717);
					match(DOT);
					}
					break;
				}
				setState(2721);
				((Table_nameContext)_localctx).table = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2732);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(2722);
					((Table_nameContext)_localctx).database = id();
					setState(2723);
					match(DOT);
					setState(2725);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0)) {
						{
						setState(2724);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(2727);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(2729);
					((Table_nameContext)_localctx).schema = id();
					setState(2730);
					match(DOT);
					}
					break;
				}
				setState(2734);
				match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_nameContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Simple_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_name; }
	}

	public final Simple_nameContext simple_name() throws RecognitionException {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_simple_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				setState(2737);
				((Simple_nameContext)_localctx).schema = id();
				setState(2738);
				match(DOT);
				}
				break;
			}
			setState(2742);
			((Simple_nameContext)_localctx).name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_proc_name_schemaContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext procedure;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_schema; }
	}

	public final Func_proc_name_schemaContext func_proc_name_schema() throws RecognitionException {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_func_proc_name_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				{
				setState(2744);
				((Func_proc_name_schemaContext)_localctx).schema = id();
				}
				setState(2745);
				match(DOT);
				}
				break;
			}
			setState(2749);
			((Func_proc_name_schemaContext)_localctx).procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_proc_name_database_schemaContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_database_schema; }
	}

	public final Func_proc_name_database_schemaContext func_proc_name_database_schema() throws RecognitionException {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_func_proc_name_database_schema);
		int _la;
		try {
			setState(2762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2751);
				func_proc_name_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(2752);
					((Func_proc_name_database_schemaContext)_localctx).database = id();
					setState(2753);
					match(DOT);
					setState(2755);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0)) {
						{
						setState(2754);
						((Func_proc_name_database_schemaContext)_localctx).schema = id();
						}
					}

					setState(2757);
					match(DOT);
					}
					break;
				}
				setState(2761);
				((Func_proc_name_database_schemaContext)_localctx).procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_proc_name_server_database_schemaContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return getRuleContext(Func_proc_name_database_schemaContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_server_database_schema; }
	}

	public final Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() throws RecognitionException {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_func_proc_name_server_database_schema);
		int _la;
		try {
			setState(2777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2764);
				func_proc_name_database_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2774);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					setState(2765);
					((Func_proc_name_server_database_schemaContext)_localctx).server = id();
					setState(2766);
					match(DOT);
					setState(2767);
					((Func_proc_name_server_database_schemaContext)_localctx).database = id();
					setState(2768);
					match(DOT);
					setState(2770);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4656747852955910143L) != 0)) {
						{
						setState(2769);
						((Func_proc_name_server_database_schemaContext)_localctx).schema = id();
						}
					}

					setState(2772);
					match(DOT);
					}
					break;
				}
				setState(2776);
				((Func_proc_name_server_database_schemaContext)_localctx).procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ddl_objectContext extends ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_object; }
	}

	public final Ddl_objectContext ddl_object() throws RecognitionException {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_ddl_object);
		try {
			setState(2781);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2779);
				full_table_name();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2780);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Full_column_nameContext extends ParserRuleContext {
		public IdContext column_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(MocaSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode STATUS() { return getToken(MocaSqlParser.STATUS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(MocaSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ARITHABORT() { return getToken(MocaSqlParser.ARITHABORT, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(MocaSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(MocaSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(MocaSqlParser.ANSI_NULLS, 0); }
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_full_column_name);
		try {
			setState(2831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2786);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(2783);
					table_name();
					setState(2784);
					match(DOT);
					}
					break;
				}
				setState(2788);
				((Full_column_nameContext)_localctx).column_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2792);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					setState(2789);
					table_name();
					setState(2790);
					match(DOT);
					}
					break;
				}
				setState(2794);
				match(COMPATIBILITY_LEVEL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
				case 1:
					{
					setState(2795);
					table_name();
					setState(2796);
					match(DOT);
					}
					break;
				}
				setState(2800);
				match(STATUS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					setState(2801);
					table_name();
					setState(2802);
					match(DOT);
					}
					break;
				}
				setState(2806);
				match(QUOTED_IDENTIFIER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(2807);
					table_name();
					setState(2808);
					match(DOT);
					}
					break;
				}
				setState(2812);
				match(ARITHABORT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					setState(2813);
					table_name();
					setState(2814);
					match(DOT);
					}
					break;
				}
				setState(2818);
				match(ANSI_WARNINGS);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2822);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(2819);
					table_name();
					setState(2820);
					match(DOT);
					}
					break;
				}
				setState(2824);
				match(ANSI_PADDING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2828);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					setState(2825);
					table_name();
					setState(2826);
					match(DOT);
					}
					break;
				}
				setState(2830);
				match(ANSI_NULLS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_name_list_with_orderContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(MocaSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(MocaSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(MocaSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(MocaSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_with_order; }
	}

	public final Column_name_list_with_orderContext column_name_list_with_order() throws RecognitionException {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_column_name_list_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2833);
			id();
			setState(2835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2834);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2837);
				match(COMMA);
				setState(2838);
				id();
				setState(2840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(2839);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(2846);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_name_listContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			id();
			setState(2852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2848);
				match(COMMA);
				setState(2849);
				id();
				}
				}
				setState(2854);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_cursor_name);
		try {
			setState(2857);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2855);
				id();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2856);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_offContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2859);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(MocaSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(MocaSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2861);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2864);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2863);
				match(NOT);
				}
			}

			setState(2866);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Null_or_defaultContext extends ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_or_default; }
	}

	public final Null_or_defaultContext null_or_default() throws RecognitionException {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_null_or_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(2868);
				null_notnull();
				}
				break;
			case DEFAULT:
				{
				setState(2869);
				match(DEFAULT);
				setState(2870);
				constant_expression();
				setState(2873);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					setState(2871);
					match(WITH);
					setState(2872);
					match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public TerminalNode RIGHT() { return getToken(MocaSqlParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(MocaSqlParser.LEFT, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(MocaSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_scalar_function_name);
		try {
			setState(2882);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2877);
				func_proc_name_server_database_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2878);
				match(RIGHT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2879);
				match(LEFT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2880);
				match(BINARY_CHECKSUM);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2881);
				match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_typeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX() { return getToken(MocaSqlParser.MAX, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode DOUBLE() { return getToken(MocaSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MocaSqlParser.PRECISION, 0); }
		public TerminalNode INT() { return getToken(MocaSqlParser.INT, 0); }
		public TerminalNode TINYINT() { return getToken(MocaSqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MocaSqlParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(MocaSqlParser.BIGINT, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_data_type);
		int _la;
		try {
			setState(2905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2884);
				id();
				setState(2886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(2885);
					match(IDENTITY);
					}
					break;
				}
				setState(2895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(2888);
					match(LR_BRACKET);
					setState(2889);
					_la = _input.LA(1);
					if ( !(_la==MAX || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2892);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2890);
						match(COMMA);
						setState(2891);
						match(DECIMAL);
						}
					}

					setState(2894);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2897);
				match(DOUBLE);
				setState(2899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					setState(2898);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2901);
				match(INT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2902);
				match(TINYINT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2903);
				match(SMALLINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2904);
				match(BIGINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(MocaSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(MocaSqlParser.FLOAT, 0); }
		public TerminalNode DOLLAR() { return getToken(MocaSqlParser.DOLLAR, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_constant);
		int _la;
		try {
			setState(2922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2907);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2908);
				match(BINARY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(2909);
					sign();
					}
				}

				setState(2912);
				match(DECIMAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(2913);
					sign();
					}
				}

				setState(2916);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(2917);
					sign();
					}
				}

				setState(2920);
				((ConstantContext)_localctx).dollar = match(DOLLAR);
				setState(2921);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(MocaSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MocaSqlParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2924);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(MocaSqlParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(MocaSqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_id);
		try {
			setState(2929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case URL:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2926);
				simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2927);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(2928);
				match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode ABSOLUTE() { return getToken(MocaSqlParser.ABSOLUTE, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(MocaSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode ACTION() { return getToken(MocaSqlParser.ACTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(MocaSqlParser.ACTIVATION, 0); }
		public TerminalNode ACTIVE() { return getToken(MocaSqlParser.ACTIVE, 0); }
		public TerminalNode ADDRESS() { return getToken(MocaSqlParser.ADDRESS, 0); }
		public TerminalNode AES_128() { return getToken(MocaSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(MocaSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(MocaSqlParser.AES_256, 0); }
		public TerminalNode AFFINITY() { return getToken(MocaSqlParser.AFFINITY, 0); }
		public TerminalNode AFTER() { return getToken(MocaSqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MocaSqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MocaSqlParser.ALGORITHM, 0); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(MocaSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(MocaSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public TerminalNode ALLOWED() { return getToken(MocaSqlParser.ALLOWED, 0); }
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(MocaSqlParser.ANSI_NULL_DEFAULT, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(MocaSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(MocaSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(MocaSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(MocaSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode APPLY() { return getToken(MocaSqlParser.APPLY, 0); }
		public TerminalNode ARITHABORT() { return getToken(MocaSqlParser.ARITHABORT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public TerminalNode AUDIT() { return getToken(MocaSqlParser.AUDIT, 0); }
		public TerminalNode AUDIT_GUID() { return getToken(MocaSqlParser.AUDIT_GUID, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public TerminalNode AUTO_CLEANUP() { return getToken(MocaSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode AUTO_CLOSE() { return getToken(MocaSqlParser.AUTO_CLOSE, 0); }
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(MocaSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(MocaSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(MocaSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(MocaSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public TerminalNode AVAILABILITY() { return getToken(MocaSqlParser.AVAILABILITY, 0); }
		public TerminalNode AVG() { return getToken(MocaSqlParser.AVG, 0); }
		public TerminalNode BACKUP_PRIORITY() { return getToken(MocaSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(MocaSqlParser.BEGIN_DIALOG, 0); }
		public TerminalNode BIGINT() { return getToken(MocaSqlParser.BIGINT, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(MocaSqlParser.BINARY_BASE64, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(MocaSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode BINDING() { return getToken(MocaSqlParser.BINDING, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(MocaSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode BROKER() { return getToken(MocaSqlParser.BROKER, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(MocaSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(MocaSqlParser.BULK_LOGGED, 0); }
		public TerminalNode CALLED() { return getToken(MocaSqlParser.CALLED, 0); }
		public TerminalNode CALLER() { return getToken(MocaSqlParser.CALLER, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(MocaSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode CAST() { return getToken(MocaSqlParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(MocaSqlParser.CATALOG, 0); }
		public TerminalNode CATCH() { return getToken(MocaSqlParser.CATCH, 0); }
		public TerminalNode CHANGE_RETENTION() { return getToken(MocaSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(MocaSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(MocaSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode CLEANUP() { return getToken(MocaSqlParser.CLEANUP, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(MocaSqlParser.COLUMN_MASTER_KEY, 0); }
		public TerminalNode COMMITTED() { return getToken(MocaSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(MocaSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode CONCAT() { return getToken(MocaSqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(MocaSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CONTENT() { return getToken(MocaSqlParser.CONTENT, 0); }
		public TerminalNode CONTROL() { return getToken(MocaSqlParser.CONTROL, 0); }
		public TerminalNode COOKIE() { return getToken(MocaSqlParser.COOKIE, 0); }
		public TerminalNode COUNT() { return getToken(MocaSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(MocaSqlParser.COUNT_BIG, 0); }
		public TerminalNode COUNTER() { return getToken(MocaSqlParser.COUNTER, 0); }
		public TerminalNode CPU() { return getToken(MocaSqlParser.CPU, 0); }
		public TerminalNode CREATE_NEW() { return getToken(MocaSqlParser.CREATE_NEW, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(MocaSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREDENTIAL() { return getToken(MocaSqlParser.CREDENTIAL, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(MocaSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(MocaSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode CURSOR_DEFAULT() { return getToken(MocaSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode DATA() { return getToken(MocaSqlParser.DATA, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(MocaSqlParser.DATA_COMPRESSION, 0); }
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(MocaSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public TerminalNode DATEADD() { return getToken(MocaSqlParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(MocaSqlParser.DATEDIFF, 0); }
		public TerminalNode DATENAME() { return getToken(MocaSqlParser.DATENAME, 0); }
		public TerminalNode DATEPART() { return getToken(MocaSqlParser.DATEPART, 0); }
		public TerminalNode DAYS() { return getToken(MocaSqlParser.DAYS, 0); }
		public TerminalNode DB_CHAINING() { return getToken(MocaSqlParser.DB_CHAINING, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(MocaSqlParser.DB_FAILOVER, 0); }
		public TerminalNode DECRYPTION() { return getToken(MocaSqlParser.DECRYPTION, 0); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(MocaSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode DELAY() { return getToken(MocaSqlParser.DELAY, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(MocaSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode DELETED() { return getToken(MocaSqlParser.DELETED, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MocaSqlParser.DENSE_RANK, 0); }
		public TerminalNode DEPENDENTS() { return getToken(MocaSqlParser.DEPENDENTS, 0); }
		public TerminalNode DES() { return getToken(MocaSqlParser.DES, 0); }
		public TerminalNode DESCRIPTION() { return getToken(MocaSqlParser.DESCRIPTION, 0); }
		public TerminalNode DESX() { return getToken(MocaSqlParser.DESX, 0); }
		public TerminalNode DHCP() { return getToken(MocaSqlParser.DHCP, 0); }
		public TerminalNode DIALOG() { return getToken(MocaSqlParser.DIALOG, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(MocaSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(MocaSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode DISABLED() { return getToken(MocaSqlParser.DISABLED, 0); }
		public TerminalNode DISK_DRIVE() { return getToken(MocaSqlParser.DISK_DRIVE, 0); }
		public TerminalNode DOCUMENT() { return getToken(MocaSqlParser.DOCUMENT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MocaSqlParser.DYNAMIC, 0); }
		public TerminalNode EMERGENCY() { return getToken(MocaSqlParser.EMERGENCY, 0); }
		public TerminalNode EMPTY() { return getToken(MocaSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public TerminalNode ENABLE_BROKER() { return getToken(MocaSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(MocaSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode ENDPOINT_URL() { return getToken(MocaSqlParser.ENDPOINT_URL, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(MocaSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode EVENTDATA() { return getToken(MocaSqlParser.EVENTDATA, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MocaSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTABLE() { return getToken(MocaSqlParser.EXECUTABLE, 0); }
		public TerminalNode EXIST() { return getToken(MocaSqlParser.EXIST, 0); }
		public TerminalNode EXPAND() { return getToken(MocaSqlParser.EXPAND, 0); }
		public TerminalNode EXPIREDATE() { return getToken(MocaSqlParser.EXPIREDATE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(MocaSqlParser.EXPIRY_DATE, 0); }
		public TerminalNode EXPLICIT() { return getToken(MocaSqlParser.EXPLICIT, 0); }
		public TerminalNode FAIL_OPERATION() { return getToken(MocaSqlParser.FAIL_OPERATION, 0); }
		public TerminalNode FAILOVER_MODE() { return getToken(MocaSqlParser.FAILOVER_MODE, 0); }
		public TerminalNode FAILURE() { return getToken(MocaSqlParser.FAILURE, 0); }
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(MocaSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode FAST() { return getToken(MocaSqlParser.FAST, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(MocaSqlParser.FAST_FORWARD, 0); }
		public TerminalNode FILEGROUP() { return getToken(MocaSqlParser.FILEGROUP, 0); }
		public TerminalNode FILEGROWTH() { return getToken(MocaSqlParser.FILEGROWTH, 0); }
		public TerminalNode FILENAME() { return getToken(MocaSqlParser.FILENAME, 0); }
		public TerminalNode FILEPATH() { return getToken(MocaSqlParser.FILEPATH, 0); }
		public TerminalNode FILESTREAM() { return getToken(MocaSqlParser.FILESTREAM, 0); }
		public TerminalNode FILLFACTOR() { return getToken(MocaSqlParser.FILLFACTOR, 0); }
		public TerminalNode FILTER() { return getToken(MocaSqlParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(MocaSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(MocaSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(MocaSqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(MocaSqlParser.FORCE, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(MocaSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode FORCED() { return getToken(MocaSqlParser.FORCED, 0); }
		public TerminalNode FORCESEEK() { return getToken(MocaSqlParser.FORCESEEK, 0); }
		public TerminalNode FORMAT() { return getToken(MocaSqlParser.FORMAT, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(MocaSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode FULLSCAN() { return getToken(MocaSqlParser.FULLSCAN, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode GB() { return getToken(MocaSqlParser.GB, 0); }
		public TerminalNode GETDATE() { return getToken(MocaSqlParser.GETDATE, 0); }
		public TerminalNode GETUTCDATE() { return getToken(MocaSqlParser.GETUTCDATE, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(MocaSqlParser.GO, 0); }
		public TerminalNode GROUP_MAX_REQUESTS() { return getToken(MocaSqlParser.GROUP_MAX_REQUESTS, 0); }
		public TerminalNode GROUPING() { return getToken(MocaSqlParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(MocaSqlParser.GROUPING_ID, 0); }
		public TerminalNode HADR() { return getToken(MocaSqlParser.HADR, 0); }
		public TerminalNode HASH() { return getToken(MocaSqlParser.HASH, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(MocaSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode HIGH() { return getToken(MocaSqlParser.HIGH, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(MocaSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public TerminalNode HOURS() { return getToken(MocaSqlParser.HOURS, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(MocaSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(MocaSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode IMMEDIATE() { return getToken(MocaSqlParser.IMMEDIATE, 0); }
		public TerminalNode IMPERSONATE() { return getToken(MocaSqlParser.IMPERSONATE, 0); }
		public TerminalNode IMPORTANCE() { return getToken(MocaSqlParser.IMPORTANCE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(MocaSqlParser.INCREMENTAL, 0); }
		public TerminalNode INIT() { return getToken(MocaSqlParser.INIT, 0); }
		public TerminalNode INITIATOR() { return getToken(MocaSqlParser.INITIATOR, 0); }
		public TerminalNode INPUT() { return getToken(MocaSqlParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(MocaSqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERTED() { return getToken(MocaSqlParser.INSERTED, 0); }
		public TerminalNode INT() { return getToken(MocaSqlParser.INT, 0); }
		public TerminalNode IP() { return getToken(MocaSqlParser.IP, 0); }
		public TerminalNode ISOLATION() { return getToken(MocaSqlParser.ISOLATION, 0); }
		public TerminalNode KB() { return getToken(MocaSqlParser.KB, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode KEEPFIXED() { return getToken(MocaSqlParser.KEEPFIXED, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(MocaSqlParser.KEY_SOURCE, 0); }
		public TerminalNode KEYS() { return getToken(MocaSqlParser.KEYS, 0); }
		public TerminalNode KEYSET() { return getToken(MocaSqlParser.KEYSET, 0); }
		public TerminalNode LAG() { return getToken(MocaSqlParser.LAG, 0); }
		public TerminalNode LAST() { return getToken(MocaSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MocaSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(MocaSqlParser.LEAD, 0); }
		public TerminalNode LEVEL() { return getToken(MocaSqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MocaSqlParser.LIST, 0); }
		public TerminalNode LISTENER() { return getToken(MocaSqlParser.LISTENER, 0); }
		public TerminalNode LISTENER_URL() { return getToken(MocaSqlParser.LISTENER_URL, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(MocaSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode LOCAL() { return getToken(MocaSqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(MocaSqlParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(MocaSqlParser.LOCK, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(MocaSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public TerminalNode LOOP() { return getToken(MocaSqlParser.LOOP, 0); }
		public TerminalNode LOW() { return getToken(MocaSqlParser.LOW, 0); }
		public TerminalNode MANUAL() { return getToken(MocaSqlParser.MANUAL, 0); }
		public TerminalNode MARK() { return getToken(MocaSqlParser.MARK, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(MocaSqlParser.MATERIALIZED, 0); }
		public TerminalNode MAX() { return getToken(MocaSqlParser.MAX, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(MocaSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode MAX_DOP() { return getToken(MocaSqlParser.MAX_DOP, 0); }
		public TerminalNode MAX_FILES() { return getToken(MocaSqlParser.MAX_FILES, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(MocaSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(MocaSqlParser.MAX_MEMORY, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(MocaSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(MocaSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode MAX_QUEUE_READERS() { return getToken(MocaSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode MAX_ROLLOVER_FILES() { return getToken(MocaSqlParser.MAX_ROLLOVER_FILES, 0); }
		public TerminalNode MAXDOP() { return getToken(MocaSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(MocaSqlParser.MAXRECURSION, 0); }
		public TerminalNode MAXSIZE() { return getToken(MocaSqlParser.MAXSIZE, 0); }
		public TerminalNode MB() { return getToken(MocaSqlParser.MB, 0); }
		public TerminalNode MEDIUM() { return getToken(MocaSqlParser.MEDIUM, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(MocaSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode MESSAGE() { return getToken(MocaSqlParser.MESSAGE, 0); }
		public TerminalNode MIN() { return getToken(MocaSqlParser.MIN, 0); }
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(MocaSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode MIN_CPU_PERCENT() { return getToken(MocaSqlParser.MIN_CPU_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(MocaSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(MocaSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MINUTES() { return getToken(MocaSqlParser.MINUTES, 0); }
		public TerminalNode MIRROR_ADDRESS() { return getToken(MocaSqlParser.MIRROR_ADDRESS, 0); }
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(MocaSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode MODE() { return getToken(MocaSqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode MOVE() { return getToken(MocaSqlParser.MOVE, 0); }
		public TerminalNode MULTI_USER() { return getToken(MocaSqlParser.MULTI_USER, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(MocaSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(MocaSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_BROKER() { return getToken(MocaSqlParser.NEW_BROKER, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(MocaSqlParser.NEW_PASSWORD, 0); }
		public TerminalNode NEXT() { return getToken(MocaSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode NO_TRUNCATE() { return getToken(MocaSqlParser.NO_TRUNCATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(MocaSqlParser.NO_WAIT, 0); }
		public TerminalNode NOCOUNT() { return getToken(MocaSqlParser.NOCOUNT, 0); }
		public TerminalNode NODES() { return getToken(MocaSqlParser.NODES, 0); }
		public TerminalNode NOEXPAND() { return getToken(MocaSqlParser.NOEXPAND, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(MocaSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(MocaSqlParser.NORECOMPUTE, 0); }
		public TerminalNode NORECOVERY() { return getToken(MocaSqlParser.NORECOVERY, 0); }
		public TerminalNode NOWAIT() { return getToken(MocaSqlParser.NOWAIT, 0); }
		public TerminalNode NTILE() { return getToken(MocaSqlParser.NTILE, 0); }
		public TerminalNode NUMANODE() { return getToken(MocaSqlParser.NUMANODE, 0); }
		public TerminalNode NUMBER() { return getToken(MocaSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(MocaSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode OBJECT() { return getToken(MocaSqlParser.OBJECT, 0); }
		public TerminalNode OFFLINE() { return getToken(MocaSqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MocaSqlParser.OFFSET, 0); }
		public TerminalNode OFFSETS() { return getToken(MocaSqlParser.OFFSETS, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(MocaSqlParser.OLD_ACCOUNT, 0); }
		public TerminalNode ONLINE() { return getToken(MocaSqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MocaSqlParser.ONLY, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(MocaSqlParser.OPEN_EXISTING, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(MocaSqlParser.OPTIMISTIC, 0); }
		public TerminalNode OPTIMIZE() { return getToken(MocaSqlParser.OPTIMIZE, 0); }
		public TerminalNode OUT() { return getToken(MocaSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public TerminalNode OWNER() { return getToken(MocaSqlParser.OWNER, 0); }
		public TerminalNode PAGE() { return getToken(MocaSqlParser.PAGE, 0); }
		public TerminalNode PAGE_VERIFY() { return getToken(MocaSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(MocaSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(MocaSqlParser.PARTITIONS, 0); }
		public TerminalNode PARTNER() { return getToken(MocaSqlParser.PARTNER, 0); }
		public TerminalNode PATH() { return getToken(MocaSqlParser.PATH, 0); }
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(MocaSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public TerminalNode POLICY() { return getToken(MocaSqlParser.POLICY, 0); }
		public TerminalNode POOL() { return getToken(MocaSqlParser.POOL, 0); }
		public TerminalNode PORT() { return getToken(MocaSqlParser.PORT, 0); }
		public TerminalNode PRECEDING() { return getToken(MocaSqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(MocaSqlParser.PRECISION, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(MocaSqlParser.PRIMARY_ROLE, 0); }
		public TerminalNode PRIOR() { return getToken(MocaSqlParser.PRIOR, 0); }
		public TerminalNode PRIORITY() { return getToken(MocaSqlParser.PRIORITY, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(MocaSqlParser.PRIORITY_LEVEL, 0); }
		public TerminalNode PRIVATE() { return getToken(MocaSqlParser.PRIVATE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(MocaSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MocaSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE_NAME() { return getToken(MocaSqlParser.PROCEDURE_NAME, 0); }
		public TerminalNode PROPERTY() { return getToken(MocaSqlParser.PROPERTY, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(MocaSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode PUBLIC() { return getToken(MocaSqlParser.PUBLIC, 0); }
		public TerminalNode QUERY() { return getToken(MocaSqlParser.QUERY, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public TerminalNode QUEUE_DELAY() { return getToken(MocaSqlParser.QUEUE_DELAY, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(MocaSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode R() { return getToken(MocaSqlParser.R, 0); }
		public TerminalNode RANGE() { return getToken(MocaSqlParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(MocaSqlParser.RANK, 0); }
		public TerminalNode RAW() { return getToken(MocaSqlParser.RAW, 0); }
		public TerminalNode RC2() { return getToken(MocaSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(MocaSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(MocaSqlParser.RC4_128, 0); }
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(MocaSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode READ_ONLY() { return getToken(MocaSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(MocaSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode READ_WRITE() { return getToken(MocaSqlParser.READ_WRITE, 0); }
		public TerminalNode READONLY() { return getToken(MocaSqlParser.READONLY, 0); }
		public TerminalNode REBUILD() { return getToken(MocaSqlParser.REBUILD, 0); }
		public TerminalNode RECEIVE() { return getToken(MocaSqlParser.RECEIVE, 0); }
		public TerminalNode RECOMPILE() { return getToken(MocaSqlParser.RECOMPILE, 0); }
		public TerminalNode RECOVERY() { return getToken(MocaSqlParser.RECOVERY, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(MocaSqlParser.RECURSIVE_TRIGGERS, 0); }
		public TerminalNode RELATIVE() { return getToken(MocaSqlParser.RELATIVE, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(MocaSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MocaSqlParser.REORGANIZE, 0); }
		public TerminalNode REPEATABLE() { return getToken(MocaSqlParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(MocaSqlParser.REPLICA, 0); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC() { return getToken(MocaSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getToken(MocaSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getToken(MocaSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(MocaSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode RESERVE_DISK_SPACE() { return getToken(MocaSqlParser.RESERVE_DISK_SPACE, 0); }
		public TerminalNode RESOURCE() { return getToken(MocaSqlParser.RESOURCE, 0); }
		public TerminalNode RESOURCE_MANAGER_LOCATION() { return getToken(MocaSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(MocaSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode RETENTION() { return getToken(MocaSqlParser.RETENTION, 0); }
		public TerminalNode RETURN() { return getToken(MocaSqlParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(MocaSqlParser.RETURNS, 0); }
		public TerminalNode ROBUST() { return getToken(MocaSqlParser.ROBUST, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public TerminalNode ROOT() { return getToken(MocaSqlParser.ROOT, 0); }
		public TerminalNode ROUTE() { return getToken(MocaSqlParser.ROUTE, 0); }
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MocaSqlParser.ROW_NUMBER, 0); }
		public TerminalNode ROWCOUNT() { return getToken(MocaSqlParser.ROWCOUNT, 0); }
		public TerminalNode ROWGUID() { return getToken(MocaSqlParser.ROWGUID, 0); }
		public TerminalNode ROWS() { return getToken(MocaSqlParser.ROWS, 0); }
		public TerminalNode SAFETY() { return getToken(MocaSqlParser.SAFETY, 0); }
		public TerminalNode SAMPLE() { return getToken(MocaSqlParser.SAMPLE, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(MocaSqlParser.SCHEMABINDING, 0); }
		public TerminalNode SCOPED() { return getToken(MocaSqlParser.SCOPED, 0); }
		public TerminalNode SCROLL() { return getToken(MocaSqlParser.SCROLL, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(MocaSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode SEARCH() { return getToken(MocaSqlParser.SEARCH, 0); }
		public TerminalNode SECONDARY() { return getToken(MocaSqlParser.SECONDARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(MocaSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY_ROLE() { return getToken(MocaSqlParser.SECONDARY_ROLE, 0); }
		public TerminalNode SECONDS() { return getToken(MocaSqlParser.SECONDS, 0); }
		public TerminalNode SECRET() { return getToken(MocaSqlParser.SECRET, 0); }
		public TerminalNode SECURITY() { return getToken(MocaSqlParser.SECURITY, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(MocaSqlParser.SECURITY_LOG, 0); }
		public TerminalNode SEEDING_MODE() { return getToken(MocaSqlParser.SEEDING_MODE, 0); }
		public TerminalNode SELF() { return getToken(MocaSqlParser.SELF, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(MocaSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode SEND() { return getToken(MocaSqlParser.SEND, 0); }
		public TerminalNode SENT() { return getToken(MocaSqlParser.SENT, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MocaSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(MocaSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode SETERROR() { return getToken(MocaSqlParser.SETERROR, 0); }
		public TerminalNode SHARE() { return getToken(MocaSqlParser.SHARE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(MocaSqlParser.SHOWPLAN, 0); }
		public TerminalNode SID() { return getToken(MocaSqlParser.SID, 0); }
		public TerminalNode SIGNATURE() { return getToken(MocaSqlParser.SIGNATURE, 0); }
		public TerminalNode SIMPLE() { return getToken(MocaSqlParser.SIMPLE, 0); }
		public TerminalNode SINGLE_USER() { return getToken(MocaSqlParser.SINGLE_USER, 0); }
		public TerminalNode SIZE() { return getToken(MocaSqlParser.SIZE, 0); }
		public TerminalNode SMALLINT() { return getToken(MocaSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MocaSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOURCE() { return getToken(MocaSqlParser.SOURCE, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(MocaSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode SPLIT() { return getToken(MocaSqlParser.SPLIT, 0); }
		public TerminalNode STANDBY() { return getToken(MocaSqlParser.STANDBY, 0); }
		public TerminalNode START() { return getToken(MocaSqlParser.START, 0); }
		public TerminalNode START_DATE() { return getToken(MocaSqlParser.START_DATE, 0); }
		public TerminalNode STATE() { return getToken(MocaSqlParser.STATE, 0); }
		public TerminalNode STATIC() { return getToken(MocaSqlParser.STATIC, 0); }
		public TerminalNode STATS_STREAM() { return getToken(MocaSqlParser.STATS_STREAM, 0); }
		public TerminalNode STATUS() { return getToken(MocaSqlParser.STATUS, 0); }
		public TerminalNode STDEV() { return getToken(MocaSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(MocaSqlParser.STDEVP, 0); }
		public TerminalNode STOP() { return getToken(MocaSqlParser.STOP, 0); }
		public TerminalNode STOPLIST() { return getToken(MocaSqlParser.STOPLIST, 0); }
		public TerminalNode STRING_AGG() { return getToken(MocaSqlParser.STRING_AGG, 0); }
		public TerminalNode STUFF() { return getToken(MocaSqlParser.STUFF, 0); }
		public TerminalNode SUBJECT() { return getToken(MocaSqlParser.SUBJECT, 0); }
		public TerminalNode SUM() { return getToken(MocaSqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MocaSqlParser.SUSPEND, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public TerminalNode SYNCHRONOUS_COMMIT() { return getToken(MocaSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public TerminalNode SYNONYM() { return getToken(MocaSqlParser.SYNONYM, 0); }
		public TerminalNode SYSTEM() { return getToken(MocaSqlParser.SYSTEM, 0); }
		public TerminalNode TAKE() { return getToken(MocaSqlParser.TAKE, 0); }
		public TerminalNode TARGET() { return getToken(MocaSqlParser.TARGET, 0); }
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(MocaSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode TB() { return getToken(MocaSqlParser.TB, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(MocaSqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode THROW() { return getToken(MocaSqlParser.THROW, 0); }
		public TerminalNode TIES() { return getToken(MocaSqlParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(MocaSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(MocaSqlParser.TIMEOUT, 0); }
		public TerminalNode TIMER() { return getToken(MocaSqlParser.TIMER, 0); }
		public TerminalNode TINYINT() { return getToken(MocaSqlParser.TINYINT, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(MocaSqlParser.TORN_PAGE_DETECTION, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(MocaSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(MocaSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(MocaSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(MocaSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode TRY() { return getToken(MocaSqlParser.TRY, 0); }
		public TerminalNode TSQL() { return getToken(MocaSqlParser.TSQL, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(MocaSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(MocaSqlParser.TYPE_WARNING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MocaSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MocaSqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(MocaSqlParser.UNKNOWN, 0); }
		public TerminalNode UNLIMITED() { return getToken(MocaSqlParser.UNLIMITED, 0); }
		public TerminalNode URL() { return getToken(MocaSqlParser.URL, 0); }
		public TerminalNode USING() { return getToken(MocaSqlParser.USING, 0); }
		public TerminalNode VALID_XML() { return getToken(MocaSqlParser.VALID_XML, 0); }
		public TerminalNode VALIDATION() { return getToken(MocaSqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MocaSqlParser.VALUE, 0); }
		public TerminalNode VAR() { return getToken(MocaSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(MocaSqlParser.VARP, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(MocaSqlParser.VIEW_METADATA, 0); }
		public TerminalNode VIEWS() { return getToken(MocaSqlParser.VIEWS, 0); }
		public TerminalNode WAIT() { return getToken(MocaSqlParser.WAIT, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(MocaSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode WORK() { return getToken(MocaSqlParser.WORK, 0); }
		public TerminalNode WORKLOAD() { return getToken(MocaSqlParser.WORKLOAD, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(MocaSqlParser.XMLNAMESPACES, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_simple_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2931);
			_la = _input.LA(1);
			if ( !(_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 5348303730376705L) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 1610616833L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -4503599266391900159L) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 35343455752193L) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & -524287L) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & -576460752303423489L) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & -1730508156817113089L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -1L) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & -131073L) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & -2323857407723175937L) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & 4611711856682205183L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comparison_operatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode LESS() { return getToken(MocaSqlParser.LESS, 0); }
		public TerminalNode GREATER() { return getToken(MocaSqlParser.GREATER, 0); }
		public TerminalNode LESS_EQUAL() { return getToken(MocaSqlParser.LESS_EQUAL, 0); }
		public TerminalNode GREATER_EQUAL() { return getToken(MocaSqlParser.GREATER_EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(MocaSqlParser.NOT_EQUAL, 0); }
		public TerminalNode EXCLAMATION() { return getToken(MocaSqlParser.EXCLAMATION, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_comparison_operator);
		try {
			setState(2943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2933);
				match(EQUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2934);
				match(LESS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2935);
				match(GREATER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2936);
				match(LESS_EQUAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2937);
				match(GREATER_EQUAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2938);
				match(NOT_EQUAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2939);
				match(EXCLAMATION);
				setState(2940);
				match(GREATER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2941);
				match(EXCLAMATION);
				setState(2942);
				match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Assignment_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS_ASSIGN() { return getToken(MocaSqlParser.PLUS_ASSIGN, 0); }
		public TerminalNode MINUS_ASSIGN() { return getToken(MocaSqlParser.MINUS_ASSIGN, 0); }
		public TerminalNode MULT_ASSIGN() { return getToken(MocaSqlParser.MULT_ASSIGN, 0); }
		public TerminalNode DIV_ASSIGN() { return getToken(MocaSqlParser.DIV_ASSIGN, 0); }
		public TerminalNode MOD_ASSIGN() { return getToken(MocaSqlParser.MOD_ASSIGN, 0); }
		public TerminalNode AND_ASSIGN() { return getToken(MocaSqlParser.AND_ASSIGN, 0); }
		public TerminalNode XOR_ASSIGN() { return getToken(MocaSqlParser.XOR_ASSIGN, 0); }
		public TerminalNode OR_ASSIGN() { return getToken(MocaSqlParser.OR_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2945);
			_la = _input.LA(1);
			if ( !(((((_la - 822)) & ~0x3f) == 0 && ((1L << (_la - 822)) & 255L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 48:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 5);
		case 1:
			return precpred(_ctx, 4);
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return precpred(_ctx, 2);
		case 4:
			return precpred(_ctx, 10);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0352\u0b84\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0001\u0000\u0005\u0000\u0140\b\u0000\n\u0000\f\u0000\u0143\t\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002"+
		"\u0003\u0002\u014b\b\u0002\u0004\u0002\u014d\b\u0002\u000b\u0002\f\u0002"+
		"\u014e\u0001\u0003\u0001\u0003\u0003\u0003\u0153\b\u0003\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u0159\b\u0004\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u0165\b\u0005\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u016b\b\u0006\u0001\u0006\u0003"+
		"\u0006\u016e\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u0173"+
		"\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u0178\b\u0006"+
		"\u0001\u0006\u0003\u0006\u017b\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0003\u0007\u0182\b\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0003\u0007\u0188\b\u0007\u0003\u0007\u018a\b"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u018f\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0195\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u019b\b\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01a0\b\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01a6\b\u0007\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0003\b\u01ad\b\b\u0001\b\u0001\b\u0001\b\u0003"+
		"\b\u01b2\b\b\u0001\b\u0001\b\u0001\b\u0003\b\u01b7\b\b\u0001\b\u0001\b"+
		"\u0001\b\u0003\b\u01bc\b\b\u0001\b\u0003\b\u01bf\b\b\u0001\b\u0001\b\u0003"+
		"\b\u01c3\b\b\u0001\b\u0001\b\u0003\b\u01c7\b\b\u0001\b\u0001\b\u0003\b"+
		"\u01cb\b\b\u0001\b\u0001\b\u0003\b\u01cf\b\b\u0001\b\u0001\b\u0001\b\u0003"+
		"\b\u01d4\b\b\u0001\b\u0001\b\u0003\b\u01d8\b\b\u0001\b\u0001\b\u0003\b"+
		"\u01dc\b\b\u0001\t\u0003\t\u01df\b\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0003\t\u01e7\b\t\u0001\t\u0001\t\u0003\t\u01eb\b\t\u0001\t"+
		"\u0003\t\u01ee\b\t\u0001\t\u0001\t\u0003\t\u01f2\b\t\u0001\t\u0003\t\u01f5"+
		"\b\t\u0001\t\u0001\t\u0003\t\u01f9\b\t\u0001\t\u0001\t\u0001\t\u0001\t"+
		"\u0001\t\u0003\t\u0200\b\t\u0001\t\u0001\t\u0003\t\u0204\b\t\u0003\t\u0206"+
		"\b\t\u0003\t\u0208\b\t\u0001\t\u0003\t\u020b\b\t\u0001\t\u0003\t\u020e"+
		"\b\t\u0001\t\u0003\t\u0211\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n"+
		"\u0217\b\n\u0001\u000b\u0003\u000b\u021a\b\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0222\b\u000b"+
		"\u0003\u000b\u0224\b\u000b\u0001\u000b\u0003\u000b\u0227\b\u000b\u0001"+
		"\u000b\u0001\u000b\u0003\u000b\u022b\b\u000b\u0001\u000b\u0003\u000b\u022e"+
		"\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0234"+
		"\b\u000b\u0001\u000b\u0003\u000b\u0237\b\u000b\u0001\u000b\u0001\u000b"+
		"\u0003\u000b\u023b\b\u000b\u0001\u000b\u0003\u000b\u023e\b\u000b\u0001"+
		"\u000b\u0003\u000b\u0241\b\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0003\f\u0248\b\f\u0001\r\u0003\r\u024b\b\r\u0001\r\u0001\r\u0003\r"+
		"\u024f\b\r\u0001\r\u0003\r\u0252\b\r\u0001\r\u0003\r\u0255\b\r\u0001\r"+
		"\u0003\r\u0258\b\r\u0001\u000e\u0003\u000e\u025b\b\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u0263"+
		"\b\u000e\u0003\u000e\u0265\b\u000e\u0001\u000e\u0001\u000e\u0003\u000e"+
		"\u0269\b\u000e\u0001\u000e\u0003\u000e\u026c\b\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000e\u0001\u000e\u0005\u000e\u0272\b\u000e\n\u000e\f\u000e"+
		"\u0275\t\u000e\u0001\u000e\u0003\u000e\u0278\b\u000e\u0001\u000e\u0001"+
		"\u000e\u0003\u000e\u027c\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000e\u0003\u000e\u0283\b\u000e\u0001\u000e\u0001\u000e\u0003"+
		"\u000e\u0287\b\u000e\u0003\u000e\u0289\b\u000e\u0003\u000e\u028b\b\u000e"+
		"\u0001\u000e\u0003\u000e\u028e\b\u000e\u0001\u000e\u0003\u000e\u0291\b"+
		"\u000e\u0001\u000e\u0003\u000e\u0294\b\u000e\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0005\u000f\u029a\b\u000f\n\u000f\f\u000f\u029d\t\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u02a2\b\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u02a8\b\u000f\u0003\u000f"+
		"\u02aa\b\u000f\u0001\u0010\u0001\u0010\u0003\u0010\u02ae\b\u0010\u0001"+
		"\u0010\u0003\u0010\u02b1\b\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0003"+
		"\u0011\u02b6\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u02bb"+
		"\b\u0011\u0001\u0011\u0003\u0011\u02be\b\u0011\u0001\u0012\u0001\u0012"+
		"\u0003\u0012\u02c2\b\u0012\u0001\u0012\u0003\u0012\u02c5\b\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003"+
		"\u0012\u02d3\b\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u02d7\b\u0012"+
		"\u0001\u0012\u0003\u0012\u02da\b\u0012\u0001\u0012\u0001\u0012\u0003\u0012"+
		"\u02de\b\u0012\u0001\u0012\u0003\u0012\u02e1\b\u0012\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u02e9"+
		"\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u02ee\b\u0013"+
		"\u0001\u0013\u0005\u0013\u02f1\b\u0013\n\u0013\f\u0013\u02f4\t\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u02f9\b\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0003\u0013\u02fe\b\u0013\u0001\u0013\u0003\u0013\u0301"+
		"\b\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0005"+
		"\u0014\u0308\b\u0014\n\u0014\f\u0014\u030b\t\u0014\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0005\u0014\u0312\b\u0014\n\u0014"+
		"\f\u0014\u0315\t\u0014\u0003\u0014\u0317\b\u0014\u0001\u0015\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015"+
		"\u0320\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0005\u0015"+
		"\u0326\b\u0015\n\u0015\f\u0015\u0329\t\u0015\u0003\u0015\u032b\b\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015"+
		"\u0332\b\u0015\u0001\u0015\u0003\u0015\u0335\b\u0015\u0001\u0016\u0001"+
		"\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0003\u0017\u0363\b\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u0367"+
		"\b\u0017\u0001\u0017\u0003\u0017\u036a\b\u0017\u0001\u0018\u0001\u0018"+
		"\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018"+
		"\u0003\u0018\u0374\b\u0018\u0003\u0018\u0376\b\u0018\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u037c\b\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0005\u0019\u0381\b\u0019\n\u0019\f\u0019\u0384\t\u0019"+
		"\u0001\u0019\u0001\u0019\u0001\u0019\u0005\u0019\u0389\b\u0019\n\u0019"+
		"\f\u0019\u038c\t\u0019\u0003\u0019\u038e\b\u0019\u0001\u0019\u0003\u0019"+
		"\u0391\b\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0003\u001b\u039a\b\u001b\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u03a4\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u03a8\b"+
		"\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u03ae"+
		"\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001d\u03b3\b\u001d"+
		"\n\u001d\f\u001d\u03b6\t\u001d\u0001\u001d\u0003\u001d\u03b9\b\u001d\u0001"+
		"\u001e\u0001\u001e\u0003\u001e\u03bd\b\u001e\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001"+
		" \u0001 \u0001 \u0001 \u0001 \u0001 \u0003 \u03ce\b \u0001 \u0001 \u0003"+
		" \u03d2\b \u0001 \u0001 \u0001 \u0001!\u0001!\u0001!\u0001\"\u0001\"\u0003"+
		"\"\u03dc\b\"\u0001\"\u0001\"\u0003\"\u03e0\b\"\u0001\"\u0001\"\u0001\""+
		"\u0005\"\u03e5\b\"\n\"\f\"\u03e8\t\"\u0003\"\u03ea\b\"\u0001\"\u0003\""+
		"\u03ed\b\"\u0001\"\u0001\"\u0001\"\u0001\"\u0005\"\u03f3\b\"\n\"\f\"\u03f6"+
		"\t\"\u0001\"\u0001\"\u0003\"\u03fa\b\"\u0001\"\u0001\"\u0001\"\u0003\""+
		"\u03ff\b\"\u0001\"\u0003\"\u0402\b\"\u0003\"\u0404\b\"\u0001#\u0001#\u0003"+
		"#\u0408\b#\u0001#\u0001#\u0003#\u040c\b#\u0001#\u0003#\u040f\b#\u0001"+
		"#\u0001#\u0003#\u0413\b#\u0001$\u0001$\u0001%\u0001%\u0003%\u0419\b%\u0001"+
		"%\u0005%\u041c\b%\n%\f%\u041f\t%\u0001&\u0001&\u0001&\u0003&\u0424\b&"+
		"\u0001\'\u0001\'\u0001\'\u0001\'\u0003\'\u042a\b\'\u0001\'\u0001\'\u0003"+
		"\'\u042e\b\'\u0001\'\u0003\'\u0431\b\'\u0001\'\u0001\'\u0003\'\u0435\b"+
		"\'\u0001\'\u0001\'\u0003\'\u0439\b\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0003\'\u0441\b\'\u0001\'\u0001\'\u0001\'\u0003\'\u0446\b\'"+
		"\u0003\'\u0448\b\'\u0001\'\u0003\'\u044b\b\'\u0001\'\u0005\'\u044e\b\'"+
		"\n\'\f\'\u0451\t\'\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u0459"+
		"\b(\u0001)\u0001)\u0003)\u045d\b)\u0001)\u0001)\u0001)\u0003)\u0462\b"+
		")\u0001)\u0003)\u0465\b)\u0001)\u0003)\u0468\b)\u0001)\u0001)\u0001)\u0001"+
		")\u0003)\u046e\b)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0003)\u0476"+
		"\b)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0003)\u047e\b)\u0001)\u0003"+
		")\u0481\b)\u0001)\u0003)\u0484\b)\u0001*\u0001*\u0003*\u0488\b*\u0001"+
		"*\u0001*\u0001*\u0003*\u048d\b*\u0001*\u0003*\u0490\b*\u0001*\u0001*\u0001"+
		"*\u0001*\u0003*\u0496\b*\u0001*\u0001*\u0003*\u049a\b*\u0001*\u0001*\u0001"+
		"*\u0001*\u0003*\u04a0\b*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0003"+
		"*\u04a8\b*\u0001*\u0001*\u0001*\u0001*\u0004*\u04ae\b*\u000b*\f*\u04af"+
		"\u0001*\u0003*\u04b3\b*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0003*\u04c2\b*\u0001*\u0003"+
		"*\u04c5\b*\u0001*\u0003*\u04c8\b*\u0003*\u04ca\b*\u0001+\u0001+\u0001"+
		"+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0003+\u04d5\b+\u0001,\u0001"+
		",\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,\u04e0\b,\u0001"+
		"-\u0001-\u0001-\u0001-\u0001-\u0005-\u04e7\b-\n-\f-\u04ea\t-\u0001-\u0001"+
		"-\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u04f3\b.\u0001/\u0001/\u0003"+
		"/\u04f7\b/\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00030\u0505\b0\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00050\u0518\b0\n0\f0\u051b\t0\u00011\u00011\u00011\u0003"+
		"1\u0520\b1\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u0003"+
		"1\u052a\b1\u00031\u052c\b1\u00012\u00012\u00013\u00013\u00013\u00033\u0533"+
		"\b3\u00013\u00013\u00013\u00013\u00013\u00013\u00013\u00013\u00033\u053d"+
		"\b3\u00033\u053f\b3\u00014\u00014\u00014\u00034\u0544\b4\u00014\u0001"+
		"4\u00014\u00014\u00034\u054a\b4\u00015\u00015\u00016\u00016\u00016\u0001"+
		"7\u00017\u00017\u00017\u00037\u0555\b7\u00018\u00018\u00018\u00048\u055a"+
		"\b8\u000b8\f8\u055b\u00018\u00018\u00038\u0560\b8\u00018\u00018\u0001"+
		"8\u00018\u00048\u0566\b8\u000b8\f8\u0567\u00018\u00018\u00038\u056c\b"+
		"8\u00018\u00018\u00038\u0570\b8\u00019\u00019\u00019\u00019\u00039\u0576"+
		"\b9\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0003:\u0580"+
		"\b:\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u058a"+
		"\b;\u0001<\u0001<\u0001=\u0001=\u0001=\u0003=\u0591\b=\u0001=\u0001=\u0001"+
		"=\u0005=\u0596\b=\n=\f=\u0599\t=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001"+
		"=\u0003=\u05a1\b=\u0001=\u0001=\u0001=\u0001=\u0001=\u0003=\u05a8\b=\u0001"+
		">\u0001>\u0001>\u0001>\u0001>\u0003>\u05af\b>\u0001>\u0001>\u0001>\u0001"+
		">\u0001>\u0001?\u0001?\u0003?\u05b8\b?\u0001?\u0001?\u0003?\u05bc\b?\u0001"+
		"?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0003?\u05c6\b?\u0001"+
		"@\u0001@\u0001@\u0005@\u05cb\b@\n@\f@\u05ce\t@\u0001A\u0001A\u0001A\u0005"+
		"A\u05d3\bA\nA\fA\u05d6\tA\u0001B\u0001B\u0001B\u0005B\u05db\bB\nB\fB\u05de"+
		"\tB\u0001C\u0003C\u05e1\bC\u0001C\u0001C\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0001D\u0001D\u0003D\u05f7\bD\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0001D\u0003D\u0600\bD\u0001D\u0001D\u0001D\u0001D\u0003D\u0606"+
		"\bD\u0001D\u0001D\u0001D\u0001D\u0003D\u060c\bD\u0001D\u0001D\u0001D\u0001"+
		"D\u0003D\u0612\bD\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0003D\u061d\bD\u0001D\u0001D\u0001D\u0001D\u0001D\u0003D\u0624"+
		"\bD\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0003D\u062c\bD\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0003E\u0633\bE\u0001E\u0005E\u0636\bE\nE\fE\u0639"+
		"\tE\u0001F\u0001F\u0003F\u063d\bF\u0001F\u0001F\u0003F\u0641\bF\u0001"+
		"F\u0001F\u0001F\u0001F\u0001F\u0003F\u0648\bF\u0001G\u0001G\u0003G\u064c"+
		"\bG\u0001G\u0003G\u064f\bG\u0001G\u0001G\u0001G\u0003G\u0654\bG\u0001"+
		"G\u0001G\u0003G\u0658\bG\u0001G\u0001G\u0003G\u065c\bG\u0001G\u0001G\u0001"+
		"G\u0003G\u0661\bG\u0001G\u0001G\u0001G\u0005G\u0666\bG\nG\fG\u0669\tG"+
		"\u0003G\u066b\bG\u0001G\u0001G\u0003G\u066f\bG\u0001H\u0001H\u0001H\u0003"+
		"H\u0674\bH\u0001H\u0001H\u0003H\u0678\bH\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0003I\u0681\bI\u0001J\u0001J\u0001J\u0001J\u0001J\u0003"+
		"J\u0688\bJ\u0001K\u0001K\u0001K\u0001K\u0001K\u0005K\u068f\bK\nK\fK\u0692"+
		"\tK\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003"+
		"K\u069d\bK\u0003K\u069f\bK\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0003L\u06a9\bL\u0001L\u0003L\u06ac\bL\u0001L\u0005L\u06af\b"+
		"L\nL\fL\u06b2\tL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u06ba"+
		"\bL\u0003L\u06bc\bL\u0003L\u06be\bL\u0001L\u0001L\u0001L\u0003L\u06c3"+
		"\bL\u0001L\u0001L\u0001L\u0001L\u0005L\u06c9\bL\nL\fL\u06cc\tL\u0001L"+
		"\u0001L\u0003L\u06d0\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003"+
		"L\u06d8\bL\u0001L\u0005L\u06db\bL\nL\fL\u06de\tL\u0001L\u0001L\u0001L"+
		"\u0003L\u06e3\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0003L\u06ed\bL\u0003L\u06ef\bL\u0001L\u0001L\u0003L\u06f3\bL\u0001"+
		"L\u0001L\u0003L\u06f7\bL\u0003L\u06f9\bL\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0003M\u0702\bM\u0003M\u0704\bM\u0001N\u0001N\u0003N\u0708"+
		"\bN\u0001O\u0001O\u0001P\u0001P\u0001P\u0001P\u0001P\u0005P\u0711\bP\n"+
		"P\fP\u0714\tP\u0001P\u0001P\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q"+
		"\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0005Q\u0733\bQ\nQ\fQ\u0736\tQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u0745"+
		"\bQ\u0001R\u0001R\u0001R\u0001R\u0001R\u0003R\u074c\bR\u0003R\u074e\b"+
		"R\u0001S\u0001S\u0001S\u0005S\u0753\bS\nS\fS\u0756\tS\u0001T\u0001T\u0001"+
		"T\u0001T\u0005T\u075c\bT\nT\fT\u075f\tT\u0001T\u0001T\u0001U\u0001U\u0001"+
		"U\u0003U\u0766\bU\u0001U\u0001U\u0001V\u0001V\u0001V\u0003V\u076d\bV\u0001"+
		"V\u0001V\u0001V\u0001V\u0001V\u0003V\u0774\bV\u0001V\u0003V\u0777\bV\u0001"+
		"V\u0003V\u077a\bV\u0001W\u0001W\u0001W\u0001W\u0001W\u0003W\u0781\bW\u0001"+
		"W\u0001W\u0001W\u0001W\u0001W\u0003W\u0788\bW\u0001W\u0003W\u078b\bW\u0003"+
		"W\u078d\bW\u0001X\u0001X\u0001X\u0001X\u0001X\u0001X\u0003X\u0795\bX\u0003"+
		"X\u0797\bX\u0001Y\u0001Y\u0001Y\u0001Y\u0003Y\u079d\bY\u0001Z\u0001Z\u0001"+
		"Z\u0005Z\u07a2\bZ\nZ\fZ\u07a5\tZ\u0001[\u0001[\u0001[\u0001[\u0001[\u0003"+
		"[\u07ac\b[\u0001\\\u0001\\\u0005\\\u07b0\b\\\n\\\f\\\u07b3\t\\\u0001]"+
		"\u0001]\u0003]\u07b7\b]\u0001]\u0001]\u0003]\u07bb\b]\u0001]\u0001]\u0003"+
		"]\u07bf\b]\u0001]\u0001]\u0001]\u0003]\u07c4\b]\u0003]\u07c6\b]\u0001"+
		"]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u07ce\b]\u0003]\u07d0\b]\u0001"+
		"]\u0001]\u0003]\u07d4\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u07db"+
		"\b]\u0003]\u07dd\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u07e4\b"+
		"]\u0001]\u0001]\u0001]\u0003]\u07e9\b]\u0001]\u0001]\u0003]\u07ed\b]\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0003^\u07f6\b^\u0001^\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0003^\u07fe\b^\u0001_\u0001_\u0001_\u0005"+
		"_\u0803\b_\n_\f_\u0806\t_\u0001`\u0001`\u0001`\u0003`\u080b\b`\u0001a"+
		"\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001b\u0003b\u0816"+
		"\bb\u0001b\u0001b\u0003b\u081a\bb\u0003b\u081c\bb\u0001b\u0003b\u081f"+
		"\bb\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001"+
		"b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001"+
		"b\u0001b\u0001b\u0003b\u0837\bb\u0001c\u0001c\u0001c\u0001c\u0001c\u0001"+
		"c\u0001c\u0001c\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001"+
		"d\u0001d\u0001d\u0001e\u0001e\u0001e\u0005e\u084e\be\ne\fe\u0851\te\u0001"+
		"f\u0001f\u0003f\u0855\bf\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0005"+
		"g\u0867\bg\ng\fg\u086a\tg\u0001g\u0003g\u086d\bg\u0001g\u0001g\u0003g"+
		"\u0871\bg\u0001h\u0001h\u0001h\u0001h\u0001i\u0001i\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0881\bi\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0003j\u0895\bj\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0003j\u08cf\bj\u0001j\u0001j\u0003j\u08d3\bj\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0003j\u0903\bj\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0003j\u0913\bj\u0003j\u0915\bj\u0001k\u0001k\u0001k\u0001k\u0001"+
		"k\u0003k\u091c\bk\u0001l\u0001l\u0001l\u0001l\u0003l\u0922\bl\u0001l\u0001"+
		"l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003"+
		"l\u092f\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001"+
		"l\u0001l\u0001l\u0001l\u0001l\u0003l\u093e\bl\u0001l\u0001l\u0001l\u0001"+
		"l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u0949\bl\u0001m\u0001m\u0001"+
		"m\u0003m\u094e\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001"+
		"m\u0003m\u0958\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003"+
		"m\u0961\bm\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001o\u0001"+
		"o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001p\u0001p\u0001p\u0001p\u0001"+
		"p\u0001p\u0001p\u0001q\u0001q\u0001q\u0001q\u0001q\u0001r\u0001r\u0001"+
		"r\u0001r\u0001r\u0001s\u0003s\u0983\bs\u0001s\u0001s\u0001t\u0003t\u0988"+
		"\bt\u0001t\u0001t\u0001u\u0001u\u0003u\u098e\bu\u0001v\u0003v\u0991\b"+
		"v\u0001v\u0001v\u0001v\u0003v\u0996\bv\u0001v\u0005v\u0999\bv\nv\fv\u099c"+
		"\tv\u0001v\u0001v\u0001w\u0001w\u0001w\u0001w\u0003w\u09a4\bw\u0001w\u0005"+
		"w\u09a7\bw\nw\fw\u09aa\tw\u0001w\u0001w\u0001x\u0003x\u09af\bx\u0001x"+
		"\u0001x\u0001x\u0001x\u0001x\u0005x\u09b6\bx\nx\fx\u09b9\tx\u0001x\u0001"+
		"x\u0001x\u0001x\u0001x\u0005x\u09c0\bx\nx\fx\u09c3\tx\u0003x\u09c5\bx"+
		"\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001"+
		"x\u0005x\u09d1\bx\nx\fx\u09d4\tx\u0001x\u0001x\u0001x\u0003x\u09d9\bx"+
		"\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0003x\u09e1\bx\u0001y\u0001"+
		"y\u0003y\u09e5\by\u0001z\u0001z\u0001z\u0001z\u0005z\u09eb\bz\nz\fz\u09ee"+
		"\tz\u0001z\u0001z\u0001{\u0001{\u0003{\u09f4\b{\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0005|\u09ff\b|\n|\f|\u0a02\t|\u0001"+
		"}\u0001}\u0001}\u0005}\u0a07\b}\n}\f}\u0a0a\t}\u0001~\u0001~\u0001~\u0001"+
		"~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0003~\u0a16\b~\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0a1d\b\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0a23\b\u007f"+
		"\u0001\u007f\u0001\u007f\u0003\u007f\u0a27\b\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0003\u007f\u0a38\b\u007f\u0001\u0080\u0001\u0080\u0001\u0080"+
		"\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080"+
		"\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0a47\b\u0080"+
		"\u0003\u0080\u0a49\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080"+
		"\u0a4e\b\u0080\u0001\u0081\u0003\u0081\u0a51\b\u0081\u0001\u0081\u0001"+
		"\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003"+
		"\u0082\u0a5a\b\u0082\u0001\u0082\u0003\u0082\u0a5d\b\u0082\u0001\u0082"+
		"\u0003\u0082\u0a60\b\u0082\u0001\u0082\u0001\u0082\u0001\u0083\u0001\u0083"+
		"\u0001\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084"+
		"\u0001\u0084\u0003\u0084\u0a6d\b\u0084\u0001\u0085\u0001\u0085\u0003\u0085"+
		"\u0a71\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0003\u0086\u0a79\b\u0086\u0001\u0087\u0001\u0087\u0001\u0087"+
		"\u0001\u0087\u0003\u0087\u0a7f\b\u0087\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0003\u0088\u0a8b\b\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0003\u0088\u0a92\b\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0a99\b\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0aa0\b\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0aa6\b\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089"+
		"\u0aad\b\u0089\u0001\u0089\u0003\u0089\u0ab0\b\u0089\u0001\u008a\u0001"+
		"\u008a\u0001\u008a\u0003\u008a\u0ab5\b\u008a\u0001\u008a\u0001\u008a\u0001"+
		"\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u0abc\b\u008b\u0001\u008b\u0001"+
		"\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0ac4"+
		"\b\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0ac8\b\u008c\u0001\u008c"+
		"\u0003\u008c\u0acb\b\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d"+
		"\u0001\u008d\u0001\u008d\u0003\u008d\u0ad3\b\u008d\u0001\u008d\u0001\u008d"+
		"\u0003\u008d\u0ad7\b\u008d\u0001\u008d\u0003\u008d\u0ada\b\u008d\u0001"+
		"\u008e\u0001\u008e\u0003\u008e\u0ade\b\u008e\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0ae3\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0ae9\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0aef\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0af5\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0afb\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0b01\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0b07\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0b0d\b\u008f\u0001\u008f\u0003\u008f\u0b10\b\u008f"+
		"\u0001\u0090\u0001\u0090\u0003\u0090\u0b14\b\u0090\u0001\u0090\u0001\u0090"+
		"\u0001\u0090\u0003\u0090\u0b19\b\u0090\u0005\u0090\u0b1b\b\u0090\n\u0090"+
		"\f\u0090\u0b1e\t\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0005\u0091"+
		"\u0b23\b\u0091\n\u0091\f\u0091\u0b26\t\u0091\u0001\u0092\u0001\u0092\u0003"+
		"\u0092\u0b2a\b\u0092\u0001\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0001"+
		"\u0095\u0003\u0095\u0b31\b\u0095\u0001\u0095\u0001\u0095\u0001\u0096\u0001"+
		"\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0003\u0096\u0b3a\b\u0096\u0003"+
		"\u0096\u0b3c\b\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001"+
		"\u0097\u0003\u0097\u0b43\b\u0097\u0001\u0098\u0001\u0098\u0003\u0098\u0b47"+
		"\b\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098\u0b4d"+
		"\b\u0098\u0001\u0098\u0003\u0098\u0b50\b\u0098\u0001\u0098\u0001\u0098"+
		"\u0003\u0098\u0b54\b\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0003\u0098\u0b5a\b\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099"+
		"\u0b5f\b\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u0b63\b\u0099\u0001"+
		"\u0099\u0001\u0099\u0003\u0099\u0b67\b\u0099\u0001\u0099\u0001\u0099\u0003"+
		"\u0099\u0b6b\b\u0099\u0001\u009a\u0001\u009a\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0003\u009b\u0b72\b\u009b\u0001\u009c\u0001\u009c\u0001\u009d\u0001"+
		"\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001"+
		"\u009d\u0001\u009d\u0001\u009d\u0003\u009d\u0b80\b\u009d\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0000\u0001`\u009f\u0000\u0002\u0004\u0006\b\n\f\u000e"+
		"\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDF"+
		"HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u0000\'\u0003\u0000\u01eb\u01eb\u02bd\u02bd\u030d"+
		"\u030d\u0003\u0000\u0152\u0152\u0197\u0197\u01df\u01df\u0002\u0000\u01df"+
		"\u01df\u01e8\u01e8\u0002\u0000\u016d\u016d\u023a\u023a\u0001\u0000\u0279"+
		"\u027a\u0002\u0000\u0322\u0322\u032b\u032b\u0002\u0000\u000f\u000f::\u0001"+
		"\u0000\u0349\u034b\u0003\u0000\u033e\u033e\u034c\u034d\u034f\u0351\u0001"+
		"\u0000\u034c\u034d\u0003\u0000\u0005\u0005\f\f\u0140\u0140\u0002\u0000"+
		"\u0005\u0005aa\u0001\u0000\u032d\u032e\u0002\u0000\u02b8\u02b8\u02bb\u02bb"+
		"\u0002\u0000\u01ff\u01ff\u0261\u0261\u0002\u0000\u0002\u0002\u0318\u0318"+
		"\u0002\u0000\u0197\u0197\u0282\u0282\u0002\u0000\u0010\u0010]]\u0002\u0000"+
		"\u00ed\u00ed\u0212\u0212\u0003\u0000\u00c8\u00c8\u01b8\u01b8\u0212\u0212"+
		"\u0003\u0000\u00c8\u00c8\u0212\u0212\u023b\u023b\u0002\u0000\u0204\u0204"+
		"\u02d5\u02d5\u0003\u0000\u00de\u00de\u0322\u0322\u0327\u0327\u0003\u0000"+
		"\u008b\u008b\u00b0\u00b0\u011e\u011e\u0004\u0000\u00c8\u00c8\u0212\u0212"+
		"\u023b\u023b\u02a6\u02a6\u0002\u0000\u0327\u0327\u032b\u032b\u0002\u0000"+
		"\u0322\u0322\u0328\u0328\u0003\u0000\u01d7\u01d7\u0297\u0297\u02b9\u02b9"+
		"\u0006\u0000\u019f\u019f\u0240\u0240\u0250\u0250\u02e1\u02e2\u02e8\u02e8"+
		"\u030b\u030c\u0001\u0000\u01bd\u01be\u0002\u0000\u0200\u0200\u022f\u022f"+
		"\u0002\u0000\u022d\u022d\u0230\u0230\u0002\u0000\u0296\u0296\u02bb\u02bb"+
		"\u0002\u0000\u00e1\u00e1\u00e4\u00e4\u0002\u000044\u00d3\u00d3\u0002\u0000"+
		"\u0240\u0240\u0327\u0327\u0002\u0000\u0327\u0327\u032d\u032d&\u0000\'"+
		"\'QQqqww\u0081\u0082\u0085\u0085\u009f\u009f\u00ab\u00ab\u00bc\u00bd\u00e2"+
		"\u00e2\u00f0\u00f0\u00fc\u00fd\u0104\u0104\u0106\u0106\u0108\u0108\u0119"+
		"\u011a\u0120\u0121\u0128\u0128\u0134\u0134\u013d\u013d\u0141\u0141\u0143"+
		"\u0143\u0148\u0148\u014a\u014a\u014d\u014d\u0155\u0155\u016a\u016a\u017d"+
		"\u01e4\u01e6\u021b\u021d\u0224\u0227\u027a\u027c\u02df\u02e1\u02e6\u02e8"+
		"\u0305\u0307\u0310\u0312\u0314\u0316\u0316\u0328\u0328\u0001\u0000\u0336"+
		"\u033d\u0d3c\u0000\u0141\u0001\u0000\u0000\u0000\u0002\u0146\u0001\u0000"+
		"\u0000\u0000\u0004\u014c\u0001\u0000\u0000\u0000\u0006\u0152\u0001\u0000"+
		"\u0000\u0000\b\u0158\u0001\u0000\u0000\u0000\n\u0164\u0001\u0000\u0000"+
		"\u0000\f\u0166\u0001\u0000\u0000\u0000\u000e\u017c\u0001\u0000\u0000\u0000"+
		"\u0010\u01a7\u0001\u0000\u0000\u0000\u0012\u01de\u0001\u0000\u0000\u0000"+
		"\u0014\u0216\u0001\u0000\u0000\u0000\u0016\u0219\u0001\u0000\u0000\u0000"+
		"\u0018\u0247\u0001\u0000\u0000\u0000\u001a\u024a\u0001\u0000\u0000\u0000"+
		"\u001c\u025a\u0001\u0000\u0000\u0000\u001e\u0295\u0001\u0000\u0000\u0000"+
		" \u02ad\u0001\u0000\u0000\u0000\"\u02bd\u0001\u0000\u0000\u0000$\u02bf"+
		"\u0001\u0000\u0000\u0000&\u02e2\u0001\u0000\u0000\u0000(\u0302\u0001\u0000"+
		"\u0000\u0000*\u0318\u0001\u0000\u0000\u0000,\u0336\u0001\u0000\u0000\u0000"+
		".\u0338\u0001\u0000\u0000\u00000\u0375\u0001\u0000\u0000\u00002\u0377"+
		"\u0001\u0000\u0000\u00004\u0392\u0001\u0000\u0000\u00006\u0399\u0001\u0000"+
		"\u0000\u00008\u039f\u0001\u0000\u0000\u0000:\u03a9\u0001\u0000\u0000\u0000"+
		"<\u03bc\u0001\u0000\u0000\u0000>\u03be\u0001\u0000\u0000\u0000@\u03c5"+
		"\u0001\u0000\u0000\u0000B\u03d6\u0001\u0000\u0000\u0000D\u0403\u0001\u0000"+
		"\u0000\u0000F\u0407\u0001\u0000\u0000\u0000H\u0414\u0001\u0000\u0000\u0000"+
		"J\u0416\u0001\u0000\u0000\u0000L\u0423\u0001\u0000\u0000\u0000N\u0425"+
		"\u0001\u0000\u0000\u0000P\u0452\u0001\u0000\u0000\u0000R\u045c\u0001\u0000"+
		"\u0000\u0000T\u0487\u0001\u0000\u0000\u0000V\u04cb\u0001\u0000\u0000\u0000"+
		"X\u04d6\u0001\u0000\u0000\u0000Z\u04e1\u0001\u0000\u0000\u0000\\\u04ed"+
		"\u0001\u0000\u0000\u0000^\u04f6\u0001\u0000\u0000\u0000`\u0504\u0001\u0000"+
		"\u0000\u0000b\u051c\u0001\u0000\u0000\u0000d\u052d\u0001\u0000\u0000\u0000"+
		"f\u052f\u0001\u0000\u0000\u0000h\u0540\u0001\u0000\u0000\u0000j\u054b"+
		"\u0001\u0000\u0000\u0000l\u054d\u0001\u0000\u0000\u0000n\u0554\u0001\u0000"+
		"\u0000\u0000p\u056f\u0001\u0000\u0000\u0000r\u0575\u0001\u0000\u0000\u0000"+
		"t\u057f\u0001\u0000\u0000\u0000v\u0589\u0001\u0000\u0000\u0000x\u058b"+
		"\u0001\u0000\u0000\u0000z\u05a7\u0001\u0000\u0000\u0000|\u05a9\u0001\u0000"+
		"\u0000\u0000~\u05c5\u0001\u0000\u0000\u0000\u0080\u05c7\u0001\u0000\u0000"+
		"\u0000\u0082\u05cf\u0001\u0000\u0000\u0000\u0084\u05d7\u0001\u0000\u0000"+
		"\u0000\u0086\u05e0\u0001\u0000\u0000\u0000\u0088\u062b\u0001\u0000\u0000"+
		"\u0000\u008a\u0632\u0001\u0000\u0000\u0000\u008c\u0640\u0001\u0000\u0000"+
		"\u0000\u008e\u0649\u0001\u0000\u0000\u0000\u0090\u0670\u0001\u0000\u0000"+
		"\u0000\u0092\u0680\u0001\u0000\u0000\u0000\u0094\u0687\u0001\u0000\u0000"+
		"\u0000\u0096\u0689\u0001\u0000\u0000\u0000\u0098\u06f8\u0001\u0000\u0000"+
		"\u0000\u009a\u06fa\u0001\u0000\u0000\u0000\u009c\u0705\u0001\u0000\u0000"+
		"\u0000\u009e\u0709\u0001\u0000\u0000\u0000\u00a0\u070b\u0001\u0000\u0000"+
		"\u0000\u00a2\u0744\u0001\u0000\u0000\u0000\u00a4\u0746\u0001\u0000\u0000"+
		"\u0000\u00a6\u074f\u0001\u0000\u0000\u0000\u00a8\u0757\u0001\u0000\u0000"+
		"\u0000\u00aa\u0765\u0001\u0000\u0000\u0000\u00ac\u0776\u0001\u0000\u0000"+
		"\u0000\u00ae\u078c\u0001\u0000\u0000\u0000\u00b0\u0796\u0001\u0000\u0000"+
		"\u0000\u00b2\u079c\u0001\u0000\u0000\u0000\u00b4\u079e\u0001\u0000\u0000"+
		"\u0000\u00b6\u07ab\u0001\u0000\u0000\u0000\u00b8\u07ad\u0001\u0000\u0000"+
		"\u0000\u00ba\u07ec\u0001\u0000\u0000\u0000\u00bc\u07ee\u0001\u0000\u0000"+
		"\u0000\u00be\u07ff\u0001\u0000\u0000\u0000\u00c0\u0807\u0001\u0000\u0000"+
		"\u0000\u00c2\u080c\u0001\u0000\u0000\u0000\u00c4\u0836\u0001\u0000\u0000"+
		"\u0000\u00c6\u0838\u0001\u0000\u0000\u0000\u00c8\u0840\u0001\u0000\u0000"+
		"\u0000\u00ca\u084a\u0001\u0000\u0000\u0000\u00cc\u0852\u0001\u0000\u0000"+
		"\u0000\u00ce\u0870\u0001\u0000\u0000\u0000\u00d0\u0872\u0001\u0000\u0000"+
		"\u0000\u00d2\u0880\u0001\u0000\u0000\u0000\u00d4\u0914\u0001\u0000\u0000"+
		"\u0000\u00d6\u091b\u0001\u0000\u0000\u0000\u00d8\u0948\u0001\u0000\u0000"+
		"\u0000\u00da\u0960\u0001\u0000\u0000\u0000\u00dc\u0962\u0001\u0000\u0000"+
		"\u0000\u00de\u0969\u0001\u0000\u0000\u0000\u00e0\u0970\u0001\u0000\u0000"+
		"\u0000\u00e2\u0977\u0001\u0000\u0000\u0000\u00e4\u097c\u0001\u0000\u0000"+
		"\u0000\u00e6\u0982\u0001\u0000\u0000\u0000\u00e8\u0987\u0001\u0000\u0000"+
		"\u0000\u00ea\u098b\u0001\u0000\u0000\u0000\u00ec\u0990\u0001\u0000\u0000"+
		"\u0000\u00ee\u099f\u0001\u0000\u0000\u0000\u00f0\u09ae\u0001\u0000\u0000"+
		"\u0000\u00f2\u09e4\u0001\u0000\u0000\u0000\u00f4\u09e6\u0001\u0000\u0000"+
		"\u0000\u00f6\u09f3\u0001\u0000\u0000\u0000\u00f8\u09f5\u0001\u0000\u0000"+
		"\u0000\u00fa\u0a03\u0001\u0000\u0000\u0000\u00fc\u0a15\u0001\u0000\u0000"+
		"\u0000\u00fe\u0a37\u0001\u0000\u0000\u0000\u0100\u0a4d\u0001\u0000\u0000"+
		"\u0000\u0102\u0a50\u0001\u0000\u0000\u0000\u0104\u0a54\u0001\u0000\u0000"+
		"\u0000\u0106\u0a63\u0001\u0000\u0000\u0000\u0108\u0a6c\u0001\u0000\u0000"+
		"\u0000\u010a\u0a70\u0001\u0000\u0000\u0000\u010c\u0a78\u0001\u0000\u0000"+
		"\u0000\u010e\u0a7e\u0001\u0000\u0000\u0000\u0110\u0a91\u0001\u0000\u0000"+
		"\u0000\u0112\u0aaf\u0001\u0000\u0000\u0000\u0114\u0ab4\u0001\u0000\u0000"+
		"\u0000\u0116\u0abb\u0001\u0000\u0000\u0000\u0118\u0aca\u0001\u0000\u0000"+
		"\u0000\u011a\u0ad9\u0001\u0000\u0000\u0000\u011c\u0add\u0001\u0000\u0000"+
		"\u0000\u011e\u0b0f\u0001\u0000\u0000\u0000\u0120\u0b11\u0001\u0000\u0000"+
		"\u0000\u0122\u0b1f\u0001\u0000\u0000\u0000\u0124\u0b29\u0001\u0000\u0000"+
		"\u0000\u0126\u0b2b\u0001\u0000\u0000\u0000\u0128\u0b2d\u0001\u0000\u0000"+
		"\u0000\u012a\u0b30\u0001\u0000\u0000\u0000\u012c\u0b3b\u0001\u0000\u0000"+
		"\u0000\u012e\u0b42\u0001\u0000\u0000\u0000\u0130\u0b59\u0001\u0000\u0000"+
		"\u0000\u0132\u0b6a\u0001\u0000\u0000\u0000\u0134\u0b6c\u0001\u0000\u0000"+
		"\u0000\u0136\u0b71\u0001\u0000\u0000\u0000\u0138\u0b73\u0001\u0000\u0000"+
		"\u0000\u013a\u0b7f\u0001\u0000\u0000\u0000\u013c\u0b81\u0001\u0000\u0000"+
		"\u0000\u013e\u0140\u0003\u0002\u0001\u0000\u013f\u013e\u0001\u0000\u0000"+
		"\u0000\u0140\u0143\u0001\u0000\u0000\u0000\u0141\u013f\u0001\u0000\u0000"+
		"\u0000\u0141\u0142\u0001\u0000\u0000\u0000\u0142\u0144\u0001\u0000\u0000"+
		"\u0000\u0143\u0141\u0001\u0000\u0000\u0000\u0144\u0145\u0005\u0000\u0000"+
		"\u0001\u0145\u0001\u0001\u0000\u0000\u0000\u0146\u0147\u0003\u0004\u0002"+
		"\u0000\u0147\u0003\u0001\u0000\u0000\u0000\u0148\u014a\u0003\u0006\u0003"+
		"\u0000\u0149\u014b\u0005\u0347\u0000\u0000\u014a\u0149\u0001\u0000\u0000"+
		"\u0000\u014a\u014b\u0001\u0000\u0000\u0000\u014b\u014d\u0001\u0000\u0000"+
		"\u0000\u014c\u0148\u0001\u0000\u0000\u0000\u014d\u014e\u0001\u0000\u0000"+
		"\u0000\u014e\u014c\u0001\u0000\u0000\u0000\u014e\u014f\u0001\u0000\u0000"+
		"\u0000\u014f\u0005\u0001\u0000\u0000\u0000\u0150\u0153\u0003\b\u0004\u0000"+
		"\u0151\u0153\u0003\n\u0005\u0000\u0152\u0150\u0001\u0000\u0000\u0000\u0152"+
		"\u0151\u0001\u0000\u0000\u0000\u0153\u0007\u0001\u0000\u0000\u0000\u0154"+
		"\u0159\u0003\u0012\t\u0000\u0155\u0159\u0003\u0016\u000b\u0000\u0156\u0159"+
		"\u0003\u001a\r\u0000\u0157\u0159\u0003\u001c\u000e\u0000\u0158\u0154\u0001"+
		"\u0000\u0000\u0000\u0158\u0155\u0001\u0000\u0000\u0000\u0158\u0156\u0001"+
		"\u0000\u0000\u0000\u0158\u0157\u0001\u0000\u0000\u0000\u0159\t\u0001\u0000"+
		"\u0000\u0000\u015a\u0165\u0003\u0010\b\u0000\u015b\u0165\u0003\u000e\u0007"+
		"\u0000\u015c\u0165\u0003\f\u0006\u0000\u015d\u0165\u0003&\u0013\u0000"+
		"\u015e\u0165\u0003.\u0017\u0000\u015f\u0165\u00038\u001c\u0000\u0160\u0165"+
		"\u0003$\u0012\u0000\u0161\u0165\u00032\u0019\u0000\u0162\u0165\u0003*"+
		"\u0015\u0000\u0163\u0165\u0003:\u001d\u0000\u0164\u015a\u0001\u0000\u0000"+
		"\u0000\u0164\u015b\u0001\u0000\u0000\u0000\u0164\u015c\u0001\u0000\u0000"+
		"\u0000\u0164\u015d\u0001\u0000\u0000\u0000\u0164\u015e\u0001\u0000\u0000"+
		"\u0000\u0164\u015f\u0001\u0000\u0000\u0000\u0164\u0160\u0001\u0000\u0000"+
		"\u0000\u0164\u0161\u0001\u0000\u0000\u0000\u0164\u0162\u0001\u0000\u0000"+
		"\u0000\u0164\u0163\u0001\u0000\u0000\u0000\u0165\u000b\u0001\u0000\u0000"+
		"\u0000\u0166\u0167\u0005f\u0000\u0000\u0167\u016a\u0005\u02ce\u0000\u0000"+
		"\u0168\u0169\u0005\u0098\u0000\u0000\u0169\u016b\u0005v\u0000\u0000\u016a"+
		"\u0168\u0001\u0000\u0000\u0000\u016a\u016b\u0001\u0000\u0000\u0000\u016b"+
		"\u017a\u0001\u0000\u0000\u0000\u016c\u016e\u0005\u0346\u0000\u0000\u016d"+
		"\u016c\u0001\u0000\u0000\u0000\u016d\u016e\u0001\u0000\u0000\u0000\u016e"+
		"\u0172\u0001\u0000\u0000\u0000\u016f\u0170\u0003\u0136\u009b\u0000\u0170"+
		"\u0171\u0005\u033f\u0000\u0000\u0171\u0173\u0001\u0000\u0000\u0000\u0172"+
		"\u016f\u0001\u0000\u0000\u0000\u0172\u0173\u0001\u0000\u0000\u0000\u0173"+
		"\u0177\u0001\u0000\u0000\u0000\u0174\u0175\u0003\u0136\u009b\u0000\u0175"+
		"\u0176\u0005\u033f\u0000\u0000\u0176\u0178\u0001\u0000\u0000\u0000\u0177"+
		"\u0174\u0001\u0000\u0000\u0000\u0177\u0178\u0001\u0000\u0000\u0000\u0178"+
		"\u0179\u0001\u0000\u0000\u0000\u0179\u017b\u0003\u0136\u009b\u0000\u017a"+
		"\u016d\u0001\u0000\u0000\u0000\u017a\u017b\u0001\u0000\u0000\u0000\u017b"+
		"\r\u0001\u0000\u0000\u0000\u017c\u017d\u0005\t\u0000\u0000\u017d\u0181"+
		"\u0005\u02ce\u0000\u0000\u017e\u017f\u0003\u0136\u009b\u0000\u017f\u0180"+
		"\u0005\u033f\u0000\u0000\u0180\u0182\u0001\u0000\u0000\u0000\u0181\u017e"+
		"\u0001\u0000\u0000\u0000\u0181\u0182\u0001\u0000\u0000\u0000\u0182\u0183"+
		"\u0001\u0000\u0000\u0000\u0183\u0189\u0003\u0136\u009b\u0000\u0184\u0187"+
		"\u0005\u0114\u0000\u0000\u0185\u0186\u0005\u0178\u0000\u0000\u0186\u0188"+
		"\u0005\u0327\u0000\u0000\u0187\u0185\u0001\u0000\u0000\u0000\u0187\u0188"+
		"\u0001\u0000\u0000\u0000\u0188\u018a\u0001\u0000\u0000\u0000\u0189\u0184"+
		"\u0001\u0000\u0000\u0000\u0189\u018a\u0001\u0000\u0000\u0000\u018a\u018e"+
		"\u0001\u0000\u0000\u0000\u018b\u018c\u0005\u009c\u0000\u0000\u018c\u018d"+
		"\u0005%\u0000\u0000\u018d\u018f\u0005\u0327\u0000\u0000\u018e\u018b\u0001"+
		"\u0000\u0000\u0000\u018e\u018f\u0001\u0000\u0000\u0000\u018f\u0194\u0001"+
		"\u0000\u0000\u0000\u0190\u0191\u0005\u00cb\u0000\u0000\u0191\u0195\u0005"+
		"\u0327\u0000\u0000\u0192\u0193\u0005\u0262\u0000\u0000\u0193\u0195\u0005"+
		"\u00cb\u0000\u0000\u0194\u0190\u0001\u0000\u0000\u0000\u0194\u0192\u0001"+
		"\u0000\u0000\u0000\u0194\u0195\u0001\u0000\u0000\u0000\u0195\u019a\u0001"+
		"\u0000\u0000\u0000\u0196\u0197\u0005\u00bf\u0000\u0000\u0197\u019b\u0005"+
		"\u0327\u0000\u0000\u0198\u0199\u0005\u0262\u0000\u0000\u0199\u019b\u0005"+
		"\u00bf\u0000\u0000\u019a\u0196\u0001\u0000\u0000\u0000\u019a\u0198\u0001"+
		"\u0000\u0000\u0000\u019a\u019b\u0001\u0000\u0000\u0000\u019b\u019f\u0001"+
		"\u0000\u0000\u0000\u019c\u01a0\u0005P\u0000\u0000\u019d\u019e\u0005\u0262"+
		"\u0000\u0000\u019e\u01a0\u0005P\u0000\u0000\u019f\u019c\u0001\u0000\u0000"+
		"\u0000\u019f\u019d\u0001\u0000\u0000\u0000\u019f\u01a0\u0001\u0000\u0000"+
		"\u0000\u01a0\u01a5\u0001\u0000\u0000\u0000\u01a1\u01a2\u0005&\u0000\u0000"+
		"\u01a2\u01a6\u0005\u0327\u0000\u0000\u01a3\u01a4\u0005\u0262\u0000\u0000"+
		"\u01a4\u01a6\u0005&\u0000\u0000\u01a5\u01a1\u0001\u0000\u0000\u0000\u01a5"+
		"\u01a3\u0001\u0000\u0000\u0000\u01a5\u01a6\u0001\u0000\u0000\u0000\u01a6"+
		"\u000f\u0001\u0000\u0000\u0000\u01a7\u01a8\u0005H\u0000\u0000\u01a8\u01ac"+
		"\u0005\u02ce\u0000\u0000\u01a9\u01aa\u0003\u0136\u009b\u0000\u01aa\u01ab"+
		"\u0005\u033f\u0000\u0000\u01ab\u01ad\u0001\u0000\u0000\u0000\u01ac\u01a9"+
		"\u0001\u0000\u0000\u0000\u01ac\u01ad\u0001\u0000\u0000\u0000\u01ad\u01ae"+
		"\u0001\u0000\u0000\u0000\u01ae\u01b1\u0003\u0136\u009b\u0000\u01af\u01b0"+
		"\u0005\u000f\u0000\u0000\u01b0\u01b2\u0003\u0130\u0098\u0000\u01b1\u01af"+
		"\u0001\u0000\u0000\u0000\u01b1\u01b2\u0001\u0000\u0000\u0000\u01b2\u01b6"+
		"\u0001\u0000\u0000\u0000\u01b3\u01b4\u0005\u014a\u0000\u0000\u01b4\u01b5"+
		"\u0005\u0178\u0000\u0000\u01b5\u01b7\u0005\u0327\u0000\u0000\u01b6\u01b3"+
		"\u0001\u0000\u0000\u0000\u01b6\u01b7\u0001\u0000\u0000\u0000\u01b7\u01be"+
		"\u0001\u0000\u0000\u0000\u01b8\u01b9\u0005\u009c\u0000\u0000\u01b9\u01bb"+
		"\u0005%\u0000\u0000\u01ba\u01bc\u0005\u034d\u0000\u0000\u01bb\u01ba\u0001"+
		"\u0000\u0000\u0000\u01bb\u01bc\u0001\u0000\u0000\u0000\u01bc\u01bd\u0001"+
		"\u0000\u0000\u0000\u01bd\u01bf\u0005\u0327\u0000\u0000\u01be\u01b8\u0001"+
		"\u0000\u0000\u0000\u01be\u01bf\u0001\u0000\u0000\u0000\u01bf\u01c6\u0001"+
		"\u0000\u0000\u0000\u01c0\u01c2\u0005\u00cb\u0000\u0000\u01c1\u01c3\u0005"+
		"\u0327\u0000\u0000\u01c2\u01c1\u0001\u0000\u0000\u0000\u01c2\u01c3\u0001"+
		"\u0000\u0000\u0000\u01c3\u01c7\u0001\u0000\u0000\u0000\u01c4\u01c5\u0005"+
		"\u0262\u0000\u0000\u01c5\u01c7\u0005\u00cb\u0000\u0000\u01c6\u01c0\u0001"+
		"\u0000\u0000\u0000\u01c6\u01c4\u0001\u0000\u0000\u0000\u01c6\u01c7\u0001"+
		"\u0000\u0000\u0000\u01c7\u01ce\u0001\u0000\u0000\u0000\u01c8\u01ca\u0005"+
		"\u00bf\u0000\u0000\u01c9\u01cb\u0005\u0327\u0000\u0000\u01ca\u01c9\u0001"+
		"\u0000\u0000\u0000\u01ca\u01cb\u0001\u0000\u0000\u0000\u01cb\u01cf\u0001"+
		"\u0000\u0000\u0000\u01cc\u01cd\u0005\u0262\u0000\u0000\u01cd\u01cf\u0005"+
		"\u00bf\u0000\u0000\u01ce\u01c8\u0001\u0000\u0000\u0000\u01ce\u01cc\u0001"+
		"\u0000\u0000\u0000\u01ce\u01cf\u0001\u0000\u0000\u0000\u01cf\u01d3\u0001"+
		"\u0000\u0000\u0000\u01d0\u01d4\u0005P\u0000\u0000\u01d1\u01d2\u0005\u0262"+
		"\u0000\u0000\u01d2\u01d4\u0005P\u0000\u0000\u01d3\u01d0\u0001\u0000\u0000"+
		"\u0000\u01d3\u01d1\u0001\u0000\u0000\u0000\u01d3\u01d4\u0001\u0000\u0000"+
		"\u0000\u01d4\u01db\u0001\u0000\u0000\u0000\u01d5\u01d7\u0005&\u0000\u0000"+
		"\u01d6\u01d8\u0005\u0327\u0000\u0000\u01d7\u01d6\u0001\u0000\u0000\u0000"+
		"\u01d7\u01d8\u0001\u0000\u0000\u0000\u01d8\u01dc\u0001\u0000\u0000\u0000"+
		"\u01d9\u01da\u0005\u0262\u0000\u0000\u01da\u01dc\u0005&\u0000\u0000\u01db"+
		"\u01d5\u0001\u0000\u0000\u0000\u01db\u01d9\u0001\u0000\u0000\u0000\u01db"+
		"\u01dc\u0001\u0000\u0000\u0000\u01dc\u0011\u0001\u0000\u0000\u0000\u01dd"+
		"\u01df\u0003z=\u0000\u01de\u01dd\u0001\u0000\u0000\u0000\u01de\u01df\u0001"+
		"\u0000\u0000\u0000\u01df\u01e0\u0001\u0000\u0000\u0000\u01e0\u01ea\u0005"+
		"[\u0000\u0000\u01e1\u01e2\u0005\u015a\u0000\u0000\u01e2\u01e3\u0005\u0344"+
		"\u0000\u0000\u01e3\u01e4\u0003`0\u0000\u01e4\u01e6\u0005\u0345\u0000\u0000"+
		"\u01e5\u01e7\u0005\u00f4\u0000\u0000\u01e6\u01e5\u0001\u0000\u0000\u0000"+
		"\u01e6\u01e7\u0001\u0000\u0000\u0000\u01e7\u01eb\u0001\u0000\u0000\u0000"+
		"\u01e8\u01e9\u0005\u015a\u0000\u0000\u01e9\u01eb\u0005\u0327\u0000\u0000"+
		"\u01ea\u01e1\u0001\u0000\u0000\u0000\u01ea\u01e8\u0001\u0000\u0000\u0000"+
		"\u01ea\u01eb\u0001\u0000\u0000\u0000\u01eb\u01ed\u0001\u0000\u0000\u0000"+
		"\u01ec\u01ee\u0005\u008a\u0000\u0000\u01ed\u01ec\u0001\u0000\u0000\u0000"+
		"\u01ed\u01ee\u0001\u0000\u0000\u0000\u01ee\u01ef\u0001\u0000\u0000\u0000"+
		"\u01ef\u01f1\u0003\u0014\n\u0000\u01f0\u01f2\u0003\u00eew\u0000\u01f1"+
		"\u01f0\u0001\u0000\u0000\u0000\u01f1\u01f2\u0001\u0000\u0000\u0000\u01f2"+
		"\u01f4\u0001\u0000\u0000\u0000\u01f3\u01f5\u0003\u001e\u000f\u0000\u01f4"+
		"\u01f3\u0001\u0000\u0000\u0000\u01f4\u01f5\u0001\u0000\u0000\u0000\u01f5"+
		"\u01f8\u0001\u0000\u0000\u0000\u01f6\u01f7\u0005\u008a\u0000\u0000\u01f7"+
		"\u01f9\u0003\u00b4Z\u0000\u01f8\u01f6\u0001\u0000\u0000\u0000\u01f8\u01f9"+
		"\u0001\u0000\u0000\u0000\u01f9\u0207\u0001\u0000\u0000\u0000\u01fa\u0205"+
		"\u0005\u0175\u0000\u0000\u01fb\u0206\u0003\u0082A\u0000\u01fc\u01fd\u0005"+
		"J\u0000\u0000\u01fd\u0203\u0005\u00e0\u0000\u0000\u01fe\u0200\u0005\u020c"+
		"\u0000\u0000\u01ff\u01fe\u0001\u0000\u0000\u0000\u01ff\u0200\u0001\u0000"+
		"\u0000\u0000\u0200\u0201\u0001\u0000\u0000\u0000\u0201\u0204\u0003\u0124"+
		"\u0092\u0000\u0202\u0204\u0005\u0322\u0000\u0000\u0203\u01ff\u0001\u0000"+
		"\u0000\u0000\u0203\u0202\u0001\u0000\u0000\u0000\u0204\u0206\u0001\u0000"+
		"\u0000\u0000\u0205\u01fb\u0001\u0000\u0000\u0000\u0205\u01fc\u0001\u0000"+
		"\u0000\u0000\u0206\u0208\u0001\u0000\u0000\u0000\u0207\u01fa\u0001\u0000"+
		"\u0000\u0000\u0207\u0208\u0001\u0000\u0000\u0000\u0208\u020a\u0001\u0000"+
		"\u0000\u0000\u0209\u020b\u0003\u0098L\u0000\u020a\u0209\u0001\u0000\u0000"+
		"\u0000\u020a\u020b\u0001\u0000\u0000\u0000\u020b\u020d\u0001\u0000\u0000"+
		"\u0000\u020c\u020e\u0003\u00a0P\u0000\u020d\u020c\u0001\u0000\u0000\u0000"+
		"\u020d\u020e\u0001\u0000\u0000\u0000\u020e\u0210\u0001\u0000\u0000\u0000"+
		"\u020f\u0211\u0005\u0347\u0000\u0000\u0210\u020f\u0001\u0000\u0000\u0000"+
		"\u0210\u0211\u0001\u0000\u0000\u0000\u0211\u0013\u0001\u0000\u0000\u0000"+
		"\u0212\u0217\u0003\u011c\u008e\u0000\u0213\u0217\u0003\u00eau\u0000\u0214"+
		"\u0217\u0003<\u001e\u0000\u0215\u0217\u0005\u0322\u0000\u0000\u0216\u0212"+
		"\u0001\u0000\u0000\u0000\u0216\u0213\u0001\u0000\u0000\u0000\u0216\u0214"+
		"\u0001\u0000\u0000\u0000\u0216\u0215\u0001\u0000\u0000\u0000\u0217\u0015"+
		"\u0001\u0000\u0000\u0000\u0218\u021a\u0003z=\u0000\u0219\u0218\u0001\u0000"+
		"\u0000\u0000\u0219\u021a\u0001\u0000\u0000\u0000\u021a\u021b\u0001\u0000"+
		"\u0000\u0000\u021b\u0223\u0005\u00a1\u0000\u0000\u021c\u021d\u0005\u015a"+
		"\u0000\u0000\u021d\u021e\u0005\u0344\u0000\u0000\u021e\u021f\u0003`0\u0000"+
		"\u021f\u0221\u0005\u0345\u0000\u0000\u0220\u0222\u0005\u00f4\u0000\u0000"+
		"\u0221\u0220\u0001\u0000\u0000\u0000\u0221\u0222\u0001\u0000\u0000\u0000"+
		"\u0222\u0224\u0001\u0000\u0000\u0000\u0223\u021c\u0001\u0000\u0000\u0000"+
		"\u0223\u0224\u0001\u0000\u0000\u0000\u0224\u0226\u0001\u0000\u0000\u0000"+
		"\u0225\u0227\u0005\u00a4\u0000\u0000\u0226\u0225\u0001\u0000\u0000\u0000"+
		"\u0226\u0227\u0001\u0000\u0000\u0000\u0227\u022a\u0001\u0000\u0000\u0000"+
		"\u0228\u022b\u0003\u011c\u008e\u0000\u0229\u022b\u0003<\u001e\u0000\u022a"+
		"\u0228\u0001\u0000\u0000\u0000\u022a\u0229\u0001\u0000\u0000\u0000\u022b"+
		"\u022d\u0001\u0000\u0000\u0000\u022c\u022e\u0003\u00eew\u0000\u022d\u022c"+
		"\u0001\u0000\u0000\u0000\u022d\u022e\u0001\u0000\u0000\u0000\u022e\u0233"+
		"\u0001\u0000\u0000\u0000\u022f\u0230\u0005\u0344\u0000\u0000\u0230\u0231"+
		"\u0003\u0122\u0091\u0000\u0231\u0232\u0005\u0345\u0000\u0000\u0232\u0234"+
		"\u0001\u0000\u0000\u0000\u0233\u022f\u0001\u0000\u0000\u0000\u0233\u0234"+
		"\u0001\u0000\u0000\u0000\u0234\u0236\u0001\u0000\u0000\u0000\u0235\u0237"+
		"\u0003\u001e\u000f\u0000\u0236\u0235\u0001\u0000\u0000\u0000\u0236\u0237"+
		"\u0001\u0000\u0000\u0000\u0237\u0238\u0001\u0000\u0000\u0000\u0238\u023a"+
		"\u0003\u0018\f\u0000\u0239\u023b\u0003\u0098L\u0000\u023a\u0239\u0001"+
		"\u0000\u0000\u0000\u023a\u023b\u0001\u0000\u0000\u0000\u023b\u023d\u0001"+
		"\u0000\u0000\u0000\u023c\u023e\u0003\u00a0P\u0000\u023d\u023c\u0001\u0000"+
		"\u0000\u0000\u023d\u023e\u0001\u0000\u0000\u0000\u023e\u0240\u0001\u0000"+
		"\u0000\u0000\u023f\u0241\u0005\u0347\u0000\u0000\u0240\u023f\u0001\u0000"+
		"\u0000\u0000\u0240\u0241\u0001\u0000\u0000\u0000\u0241\u0017\u0001\u0000"+
		"\u0000\u0000\u0242\u0248\u0003\u00f8|\u0000\u0243\u0248\u0003\u00d2i\u0000"+
		"\u0244\u0248\u0003B!\u0000\u0245\u0246\u0005X\u0000\u0000\u0246\u0248"+
		"\u0005\u016e\u0000\u0000\u0247\u0242\u0001\u0000\u0000\u0000\u0247\u0243"+
		"\u0001\u0000\u0000\u0000\u0247\u0244\u0001\u0000\u0000\u0000\u0247\u0245"+
		"\u0001\u0000\u0000\u0000\u0248\u0019\u0001\u0000\u0000\u0000\u0249\u024b"+
		"\u0003z=\u0000\u024a\u0249\u0001\u0000\u0000\u0000\u024a\u024b\u0001\u0000"+
		"\u0000\u0000\u024b\u024c\u0001\u0000\u0000\u0000\u024c\u024e\u0003\u008a"+
		"E\u0000\u024d\u024f\u0003\u0096K\u0000\u024e\u024d\u0001\u0000\u0000\u0000"+
		"\u024e\u024f\u0001\u0000\u0000\u0000\u024f\u0251\u0001\u0000\u0000\u0000"+
		"\u0250\u0252\u0003\u0098L\u0000\u0251\u0250\u0001\u0000\u0000\u0000\u0251"+
		"\u0252\u0001\u0000\u0000\u0000\u0252\u0254\u0001\u0000\u0000\u0000\u0253"+
		"\u0255\u0003\u00a0P\u0000\u0254\u0253\u0001\u0000\u0000\u0000\u0254\u0255"+
		"\u0001\u0000\u0000\u0000\u0255\u0257\u0001\u0000\u0000\u0000\u0256\u0258"+
		"\u0005\u0347\u0000\u0000\u0257\u0256\u0001\u0000\u0000\u0000\u0257\u0258"+
		"\u0001\u0000\u0000\u0000\u0258\u001b\u0001\u0000\u0000\u0000\u0259\u025b"+
		"\u0003z=\u0000\u025a\u0259\u0001\u0000\u0000\u0000\u025a\u025b\u0001\u0000"+
		"\u0000\u0000\u025b\u025c\u0001\u0000\u0000\u0000\u025c\u0264\u0005\u0168"+
		"\u0000\u0000\u025d\u025e\u0005\u015a\u0000\u0000\u025e\u025f\u0005\u0344"+
		"\u0000\u0000\u025f\u0260\u0003`0\u0000\u0260\u0262\u0005\u0345\u0000\u0000"+
		"\u0261\u0263\u0005\u00f4\u0000\u0000\u0262\u0261\u0001\u0000\u0000\u0000"+
		"\u0262\u0263\u0001\u0000\u0000\u0000\u0263\u0265\u0001\u0000\u0000\u0000"+
		"\u0264\u025d\u0001\u0000\u0000\u0000\u0264\u0265\u0001\u0000\u0000\u0000"+
		"\u0265\u0268\u0001\u0000\u0000\u0000\u0266\u0269\u0003\u011c\u008e\u0000"+
		"\u0267\u0269\u0003<\u001e\u0000\u0268\u0266\u0001\u0000\u0000\u0000\u0268"+
		"\u0267\u0001\u0000\u0000\u0000\u0269\u026b\u0001\u0000\u0000\u0000\u026a"+
		"\u026c\u0003\u00ecv\u0000\u026b\u026a\u0001\u0000\u0000\u0000\u026b\u026c"+
		"\u0001\u0000\u0000\u0000\u026c\u026d\u0001\u0000\u0000\u0000\u026d\u026e"+
		"\u0005\u013a\u0000\u0000\u026e\u0273\u0003~?\u0000\u026f\u0270\u0005\u0346"+
		"\u0000\u0000\u0270\u0272\u0003~?\u0000\u0271\u026f\u0001\u0000\u0000\u0000"+
		"\u0272\u0275\u0001\u0000\u0000\u0000\u0273\u0271\u0001\u0000\u0000\u0000"+
		"\u0273\u0274\u0001\u0000\u0000\u0000\u0274\u0277\u0001\u0000\u0000\u0000"+
		"\u0275\u0273\u0001\u0000\u0000\u0000\u0276\u0278\u0003\u001e\u000f\u0000"+
		"\u0277\u0276\u0001\u0000\u0000\u0000\u0277\u0278\u0001\u0000\u0000\u0000"+
		"\u0278\u027b\u0001\u0000\u0000\u0000\u0279\u027a\u0005\u008a\u0000\u0000"+
		"\u027a\u027c\u0003\u00b4Z\u0000\u027b\u0279\u0001\u0000\u0000\u0000\u027b"+
		"\u027c\u0001\u0000\u0000\u0000\u027c\u028a\u0001\u0000\u0000\u0000\u027d"+
		"\u0288\u0005\u0175\u0000\u0000\u027e\u0289\u0003\u0080@\u0000\u027f\u0280"+
		"\u0005J\u0000\u0000\u0280\u0286\u0005\u00e0\u0000\u0000\u0281\u0283\u0005"+
		"\u020c\u0000\u0000\u0282\u0281\u0001\u0000\u0000\u0000\u0282\u0283\u0001"+
		"\u0000\u0000\u0000\u0283\u0284\u0001\u0000\u0000\u0000\u0284\u0287\u0003"+
		"\u0124\u0092\u0000\u0285\u0287\u0005\u0322\u0000\u0000\u0286\u0282\u0001"+
		"\u0000\u0000\u0000\u0286\u0285\u0001\u0000\u0000\u0000\u0287\u0289\u0001"+
		"\u0000\u0000\u0000\u0288\u027e\u0001\u0000\u0000\u0000\u0288\u027f\u0001"+
		"\u0000\u0000\u0000\u0289\u028b\u0001\u0000\u0000\u0000\u028a\u027d\u0001"+
		"\u0000\u0000\u0000\u028a\u028b\u0001\u0000\u0000\u0000\u028b\u028d\u0001"+
		"\u0000\u0000\u0000\u028c\u028e\u0003\u0098L\u0000\u028d\u028c\u0001\u0000"+
		"\u0000\u0000\u028d\u028e\u0001\u0000\u0000\u0000\u028e\u0290\u0001\u0000"+
		"\u0000\u0000\u028f\u0291\u0003\u00a0P\u0000\u0290\u028f\u0001\u0000\u0000"+
		"\u0000\u0290\u0291\u0001\u0000\u0000\u0000\u0291\u0293\u0001\u0000\u0000"+
		"\u0000\u0292\u0294\u0005\u0347\u0000\u0000\u0293\u0292\u0001\u0000\u0000"+
		"\u0000\u0293\u0294\u0001\u0000\u0000\u0000\u0294\u001d\u0001\u0000\u0000"+
		"\u0000\u0295\u0296\u0005\u027a\u0000\u0000\u0296\u029b\u0003 \u0010\u0000"+
		"\u0297\u0298\u0005\u0346\u0000\u0000\u0298\u029a\u0003 \u0010\u0000\u0299"+
		"\u0297\u0001\u0000\u0000\u0000\u029a\u029d\u0001\u0000\u0000\u0000\u029b"+
		"\u0299\u0001\u0000\u0000\u0000\u029b\u029c\u0001\u0000\u0000\u0000\u029c"+
		"\u02a9\u0001\u0000\u0000\u0000\u029d\u029b\u0001\u0000\u0000\u0000\u029e"+
		"\u02a1\u0005\u00a4\u0000\u0000\u029f\u02a2\u0005\u0322\u0000\u0000\u02a0"+
		"\u02a2\u0003\u0112\u0089\u0000\u02a1\u029f\u0001\u0000\u0000\u0000\u02a1"+
		"\u02a0\u0001\u0000\u0000\u0000\u02a2\u02a7\u0001\u0000\u0000\u0000\u02a3"+
		"\u02a4\u0005\u0344\u0000\u0000\u02a4\u02a5\u0003\u0122\u0091\u0000\u02a5"+
		"\u02a6\u0005\u0345\u0000\u0000\u02a6\u02a8\u0001\u0000\u0000\u0000\u02a7"+
		"\u02a3\u0001\u0000\u0000\u0000\u02a7\u02a8\u0001\u0000\u0000\u0000\u02a8"+
		"\u02aa\u0001\u0000\u0000\u0000\u02a9\u029e\u0001\u0000\u0000\u0000\u02a9"+
		"\u02aa\u0001\u0000\u0000\u0000\u02aa\u001f\u0001\u0000\u0000\u0000\u02ab"+
		"\u02ae\u0003\"\u0011\u0000\u02ac\u02ae\u0003`0\u0000\u02ad\u02ab\u0001"+
		"\u0000\u0000\u0000\u02ad\u02ac\u0001\u0000\u0000\u0000\u02ae\u02b0\u0001"+
		"\u0000\u0000\u0000\u02af\u02b1\u0003\u00e6s\u0000\u02b0\u02af\u0001\u0000"+
		"\u0000\u0000\u02b0\u02b1\u0001\u0000\u0000\u0000\u02b1!\u0001\u0000\u0000"+
		"\u0000\u02b2\u02b6\u0005\u01d6\u0000\u0000\u02b3\u02b6\u0005\u0221\u0000"+
		"\u0000\u02b4\u02b6\u0003\u0112\u0089\u0000\u02b5\u02b2\u0001\u0000\u0000"+
		"\u0000\u02b5\u02b3\u0001\u0000\u0000\u0000\u02b5\u02b4\u0001\u0000\u0000"+
		"\u0000\u02b6\u02b7\u0001\u0000\u0000\u0000\u02b7\u02ba\u0005\u033f\u0000"+
		"\u0000\u02b8\u02bb\u0005\u0349\u0000\u0000\u02b9\u02bb\u0003\u0136\u009b"+
		"\u0000\u02ba\u02b8\u0001\u0000\u0000\u0000\u02ba\u02b9\u0001\u0000\u0000"+
		"\u0000\u02bb\u02be\u0001\u0000\u0000\u0000\u02bc\u02be\u0005\u0319\u0000"+
		"\u0000\u02bd\u02b5\u0001\u0000\u0000\u0000\u02bd\u02bc\u0001\u0000\u0000"+
		"\u0000\u02be#\u0001\u0000\u0000\u0000\u02bf\u02c1\u0005H\u0000\u0000\u02c0"+
		"\u02c2\u0005\u0164\u0000\u0000\u02c1\u02c0\u0001\u0000\u0000\u0000\u02c1"+
		"\u02c2\u0001\u0000\u0000\u0000\u02c2\u02c4\u0001\u0000\u0000\u0000\u02c3"+
		"\u02c5\u0003\u0128\u0094\u0000\u02c4\u02c3\u0001\u0000\u0000\u0000\u02c4"+
		"\u02c5\u0001\u0000\u0000\u0000\u02c5\u02c6\u0001\u0000\u0000\u0000\u02c6"+
		"\u02c7\u0005\u009d\u0000\u0000\u02c7\u02c8\u0003\u0136\u009b\u0000\u02c8"+
		"\u02c9\u0005\u00e4\u0000\u0000\u02c9\u02ca\u0003\u00ccf\u0000\u02ca\u02cb"+
		"\u0005\u0344\u0000\u0000\u02cb\u02cc\u0003\u0120\u0090\u0000\u02cc\u02d2"+
		"\u0005\u0345\u0000\u0000\u02cd\u02ce\u0005\u009b\u0000\u0000\u02ce\u02cf"+
		"\u0005\u0344\u0000\u0000\u02cf\u02d0\u0003\u0122\u0091\u0000\u02d0\u02d1"+
		"\u0005\u0345\u0000\u0000\u02d1\u02d3\u0001\u0000\u0000\u0000\u02d2\u02cd"+
		"\u0001\u0000\u0000\u0000\u02d2\u02d3\u0001\u0000\u0000\u0000\u02d3\u02d6"+
		"\u0001\u0000\u0000\u0000\u02d4\u02d5\u0005\u0175\u0000\u0000\u02d5\u02d7"+
		"\u0003\u0082A\u0000\u02d6\u02d4\u0001\u0000\u0000\u0000\u02d6\u02d7\u0001"+
		"\u0000\u0000\u0000\u02d7\u02d9\u0001\u0000\u0000\u0000\u02d8\u02da\u0003"+
		"Z-\u0000\u02d9\u02d8\u0001\u0000\u0000\u0000\u02d9\u02da\u0001\u0000\u0000"+
		"\u0000\u02da\u02dd\u0001\u0000\u0000\u0000\u02db\u02dc\u0005\u00e4\u0000"+
		"\u0000\u02dc\u02de\u0003\u0136\u009b\u0000\u02dd\u02db\u0001\u0000\u0000"+
		"\u0000\u02dd\u02de\u0001\u0000\u0000\u0000\u02de\u02e0\u0001\u0000\u0000"+
		"\u0000\u02df\u02e1\u0005\u0347\u0000\u0000\u02e0\u02df\u0001\u0000\u0000"+
		"\u0000\u02e0\u02e1\u0001\u0000\u0000\u0000\u02e1%\u0001\u0000\u0000\u0000"+
		"\u02e2\u02e3\u0005H\u0000\u0000\u02e3\u02e4\u0005\u0152\u0000\u0000\u02e4"+
		"\u02e5\u0003\u0112\u0089\u0000\u02e5\u02e6\u0005\u0344\u0000\u0000\u02e6"+
		"\u02e8\u0003J%\u0000\u02e7\u02e9\u0005\u0346\u0000\u0000\u02e8\u02e7\u0001"+
		"\u0000\u0000\u0000\u02e8\u02e9\u0001\u0000\u0000\u0000\u02e9\u02ea\u0001"+
		"\u0000\u0000\u0000\u02ea\u02ed\u0005\u0345\u0000\u0000\u02eb\u02ec\u0005"+
		"\u0238\u0000\u0000\u02ec\u02ee\u0003\u0138\u009c\u0000\u02ed\u02eb\u0001"+
		"\u0000\u0000\u0000\u02ed\u02ee\u0001\u0000\u0000\u0000\u02ee\u02f2\u0001"+
		"\u0000\u0000\u0000\u02ef\u02f1\u0003(\u0014\u0000\u02f0\u02ef\u0001\u0000"+
		"\u0000\u0000\u02f1\u02f4\u0001\u0000\u0000\u0000\u02f2\u02f0\u0001\u0000"+
		"\u0000\u0000\u02f2\u02f3\u0001\u0000\u0000\u0000\u02f3\u02f8\u0001\u0000"+
		"\u0000\u0000\u02f4\u02f2\u0001\u0000\u0000\u0000\u02f5\u02f6\u0005\u00e4"+
		"\u0000\u0000\u02f6\u02f9\u0003\u0136\u009b\u0000\u02f7\u02f9\u0005X\u0000"+
		"\u0000\u02f8\u02f5\u0001\u0000\u0000\u0000\u02f8\u02f7\u0001\u0000\u0000"+
		"\u0000\u02f8\u02f9\u0001\u0000\u0000\u0000\u02f9\u02fd\u0001\u0000\u0000"+
		"\u0000\u02fa\u02fb\u0005\u02f1\u0000\u0000\u02fb\u02fe\u0003\u0136\u009b"+
		"\u0000\u02fc\u02fe\u0005X\u0000\u0000\u02fd\u02fa\u0001\u0000\u0000\u0000"+
		"\u02fd\u02fc\u0001\u0000\u0000\u0000\u02fd\u02fe\u0001\u0000\u0000\u0000"+
		"\u02fe\u0300\u0001\u0000\u0000\u0000\u02ff\u0301\u0005\u0347\u0000\u0000"+
		"\u0300\u02ff\u0001\u0000\u0000\u0000\u0300\u0301\u0001\u0000\u0000\u0000"+
		"\u0301\'\u0001\u0000\u0000\u0000\u0302\u0316\u0005\u0178\u0000\u0000\u0303"+
		"\u0304\u0005\u0344\u0000\u0000\u0304\u0309\u0003\\.\u0000\u0305\u0306"+
		"\u0005\u0346\u0000\u0000\u0306\u0308\u0003\\.\u0000\u0307\u0305\u0001"+
		"\u0000\u0000\u0000\u0308\u030b\u0001\u0000\u0000\u0000\u0309\u0307\u0001"+
		"\u0000\u0000\u0000\u0309\u030a\u0001\u0000\u0000\u0000\u030a\u030c\u0001"+
		"\u0000\u0000\u0000\u030b\u0309\u0001\u0000\u0000\u0000\u030c\u030d\u0005"+
		"\u0345\u0000\u0000\u030d\u0317\u0001\u0000\u0000\u0000\u030e\u0313\u0003"+
		"\\.\u0000\u030f\u0310\u0005\u0346\u0000\u0000\u0310\u0312\u0003\\.\u0000"+
		"\u0311\u030f\u0001\u0000\u0000\u0000\u0312\u0315\u0001\u0000\u0000\u0000"+
		"\u0313\u0311\u0001\u0000\u0000\u0000\u0313\u0314\u0001\u0000\u0000\u0000"+
		"\u0314\u0317\u0001\u0000\u0000\u0000\u0315\u0313\u0001\u0000\u0000\u0000"+
		"\u0316\u0303\u0001\u0000\u0000\u0000\u0316\u030e\u0001\u0000\u0000\u0000"+
		"\u0317)\u0001\u0000\u0000\u0000\u0318\u0319\u0005H\u0000\u0000\u0319\u031a"+
		"\u0005\u0171\u0000\u0000\u031a\u031f\u0003\u0114\u008a\u0000\u031b\u031c"+
		"\u0005\u0344\u0000\u0000\u031c\u031d\u0003\u0122\u0091\u0000\u031d\u031e"+
		"\u0005\u0345\u0000\u0000\u031e\u0320\u0001\u0000\u0000\u0000\u031f\u031b"+
		"\u0001\u0000\u0000\u0000\u031f\u0320\u0001\u0000\u0000\u0000\u0320\u032a"+
		"\u0001\u0000\u0000\u0000\u0321\u0322\u0005\u0178\u0000\u0000\u0322\u0327"+
		"\u0003,\u0016\u0000\u0323\u0324\u0005\u0346\u0000\u0000\u0324\u0326\u0003"+
		",\u0016\u0000\u0325\u0323\u0001\u0000\u0000\u0000\u0326\u0329\u0001\u0000"+
		"\u0000\u0000\u0327\u0325\u0001\u0000\u0000\u0000\u0327\u0328\u0001\u0000"+
		"\u0000\u0000\u0328\u032b\u0001\u0000\u0000\u0000\u0329\u0327\u0001\u0000"+
		"\u0000\u0000\u032a\u0321\u0001\u0000\u0000\u0000\u032a\u032b\u0001\u0000"+
		"\u0000\u0000\u032b\u032c\u0001\u0000\u0000\u0000\u032c\u032d\u0005\u000f"+
		"\u0000\u0000\u032d\u0331\u0003\u001a\r\u0000\u032e\u032f\u0005\u0178\u0000"+
		"\u0000\u032f\u0330\u0005-\u0000\u0000\u0330\u0332\u0005\u00eb\u0000\u0000"+
		"\u0331\u032e\u0001\u0000\u0000\u0000\u0331\u0332\u0001\u0000\u0000\u0000"+
		"\u0332\u0334\u0001\u0000\u0000\u0000\u0333\u0335\u0005\u0347\u0000\u0000"+
		"\u0334\u0333\u0001\u0000\u0000\u0000\u0334\u0335\u0001\u0000\u0000\u0000"+
		"\u0335+\u0001\u0000\u0000\u0000\u0336\u0337\u0007\u0000\u0000\u0000\u0337"+
		"-\u0001\u0000\u0000\u0000\u0338\u0339\u0005\t\u0000\u0000\u0339\u033a"+
		"\u0005\u0152\u0000\u0000\u033a\u0366\u0003\u0112\u0089\u0000\u033b\u033c"+
		"\u0005\u013a\u0000\u0000\u033c\u033d\u0005\u0344\u0000\u0000\u033d\u033e"+
		"\u0005\u0239\u0000\u0000\u033e\u033f\u0005\u032f\u0000\u0000\u033f\u0340"+
		"\u0007\u0001\u0000\u0000\u0340\u0367\u0005\u0345\u0000\u0000\u0341\u0342"+
		"\u0005\u0003\u0000\u0000\u0342\u0367\u0003L&\u0000\u0343\u0344\u0005\t"+
		"\u0000\u0000\u0344\u0345\u00057\u0000\u0000\u0345\u0367\u0003N\'\u0000"+
		"\u0346\u0347\u0005f\u0000\u0000\u0347\u0348\u00057\u0000\u0000\u0348\u0367"+
		"\u0003\u0136\u009b\u0000\u0349\u034a\u0005f\u0000\u0000\u034a\u034b\u0005"+
		"<\u0000\u0000\u034b\u0367\u0003\u0136\u009b\u0000\u034c\u034d\u0005\u0178"+
		"\u0000\u0000\u034d\u034e\u0005-\u0000\u0000\u034e\u034f\u0005\u0003\u0000"+
		"\u0000\u034f\u0350\u0005<\u0000\u0000\u0350\u0351\u0003\u0136\u009b\u0000"+
		"\u0351\u0352\u0005\u0087\u0000\u0000\u0352\u0353\u0005\u00ab\u0000\u0000"+
		"\u0353\u0354\u0005\u0344\u0000\u0000\u0354\u0355\u0003\u0122\u0091\u0000"+
		"\u0355\u0356\u0005\u0345\u0000\u0000\u0356\u0357\u0005\u010d\u0000\u0000"+
		"\u0357\u0358\u0003\u0112\u0089\u0000\u0358\u0359\u0005\u0344\u0000\u0000"+
		"\u0359\u035a\u0003\u0122\u0091\u0000\u035a\u035b\u0005\u0345\u0000\u0000"+
		"\u035b\u0367\u0001\u0000\u0000\u0000\u035c\u035d\u0005-\u0000\u0000\u035d"+
		"\u035e\u0005<\u0000\u0000\u035e\u0367\u0003\u0136\u009b\u0000\u035f\u0360"+
		"\u0007\u0002\u0000\u0000\u0360\u0362\u0005\u015f\u0000\u0000\u0361\u0363"+
		"\u0003\u0136\u009b\u0000\u0362\u0361\u0001\u0000\u0000\u0000\u0362\u0363"+
		"\u0001\u0000\u0000\u0000\u0363\u0367\u0001\u0000\u0000\u0000\u0364\u0365"+
		"\u0005\u02a0\u0000\u0000\u0365\u0367\u0003(\u0014\u0000\u0366\u033b\u0001"+
		"\u0000\u0000\u0000\u0366\u0341\u0001\u0000\u0000\u0000\u0366\u0343\u0001"+
		"\u0000\u0000\u0000\u0366\u0346\u0001\u0000\u0000\u0000\u0366\u0349\u0001"+
		"\u0000\u0000\u0000\u0366\u034c\u0001\u0000\u0000\u0000\u0366\u035c\u0001"+
		"\u0000\u0000\u0000\u0366\u035f\u0001\u0000\u0000\u0000\u0366\u0364\u0001"+
		"\u0000\u0000\u0000\u0367\u0369\u0001\u0000\u0000\u0000\u0368\u036a\u0005"+
		"\u0347\u0000\u0000\u0369\u0368\u0001\u0000\u0000\u0000\u0369\u036a\u0001"+
		"\u0000\u0000\u0000\u036a/\u0001\u0000\u0000\u0000\u036b\u036c\u0003\u0136"+
		"\u009b\u0000\u036c\u036d\u0005\u033f\u0000\u0000\u036d\u036e\u00030\u0018"+
		"\u0000\u036e\u0376\u0001\u0000\u0000\u0000\u036f\u0370\u0003\u0136\u009b"+
		"\u0000\u0370\u0371\u0005\u033f\u0000\u0000\u0371\u0374\u0001\u0000\u0000"+
		"\u0000\u0372\u0374\u0003\u0136\u009b\u0000\u0373\u036f\u0001\u0000\u0000"+
		"\u0000\u0373\u0372\u0001\u0000\u0000\u0000\u0374\u0376\u0001\u0000\u0000"+
		"\u0000\u0375\u036b\u0001\u0000\u0000\u0000\u0375\u0373\u0001\u0000\u0000"+
		"\u0000\u03761\u0001\u0000\u0000\u0000\u0377\u0378\u0005f\u0000\u0000\u0378"+
		"\u037b\u0005\u009d\u0000\u0000\u0379\u037a\u0005\u0098\u0000\u0000\u037a"+
		"\u037c\u0005v\u0000\u0000\u037b\u0379\u0001\u0000\u0000\u0000\u037b\u037c"+
		"\u0001\u0000\u0000\u0000\u037c\u038d\u0001\u0000\u0000\u0000\u037d\u0382"+
		"\u00034\u001a\u0000\u037e\u037f\u0005\u0346\u0000\u0000\u037f\u0381\u0003"+
		"4\u001a\u0000\u0380\u037e\u0001\u0000\u0000\u0000\u0381\u0384\u0001\u0000"+
		"\u0000\u0000\u0382\u0380\u0001\u0000\u0000\u0000\u0382\u0383\u0001\u0000"+
		"\u0000\u0000\u0383\u038e\u0001\u0000\u0000\u0000\u0384\u0382\u0001\u0000"+
		"\u0000\u0000\u0385\u038a\u00036\u001b\u0000\u0386\u0387\u0005\u0346\u0000"+
		"\u0000\u0387\u0389\u00036\u001b\u0000\u0388\u0386\u0001\u0000\u0000\u0000"+
		"\u0389\u038c\u0001\u0000\u0000\u0000\u038a\u0388\u0001\u0000\u0000\u0000"+
		"\u038a\u038b\u0001\u0000\u0000\u0000\u038b\u038e\u0001\u0000\u0000\u0000"+
		"\u038c\u038a\u0001\u0000\u0000\u0000\u038d\u037d\u0001\u0000\u0000\u0000"+
		"\u038d\u0385\u0001\u0000\u0000\u0000\u038e\u0390\u0001\u0000\u0000\u0000"+
		"\u038f\u0391\u0005\u0347\u0000\u0000\u0390\u038f\u0001\u0000\u0000\u0000"+
		"\u0390\u0391\u0001\u0000\u0000\u0000\u03913\u0001\u0000\u0000\u0000\u0392"+
		"\u0393\u0003\u0136\u009b\u0000\u0393\u0394\u0005\u00e4\u0000\u0000\u0394"+
		"\u0395\u0003\u0110\u0088\u0000\u03955\u0001\u0000\u0000\u0000\u0396\u0397"+
		"\u0003\u0136\u009b\u0000\u0397\u0398\u0005\u033f\u0000\u0000\u0398\u039a"+
		"\u0001\u0000\u0000\u0000\u0399\u0396\u0001\u0000\u0000\u0000\u0399\u039a"+
		"\u0001\u0000\u0000\u0000\u039a\u039b\u0001\u0000\u0000\u0000\u039b\u039c"+
		"\u0003\u0136\u009b\u0000\u039c\u039d\u0005\u033f\u0000\u0000\u039d\u039e"+
		"\u0003\u0136\u009b\u0000\u039e7\u0001\u0000\u0000\u0000\u039f\u03a0\u0005"+
		"f\u0000\u0000\u03a0\u03a3\u0005\u0152\u0000\u0000\u03a1\u03a2\u0005\u0098"+
		"\u0000\u0000\u03a2\u03a4\u0005v\u0000\u0000\u03a3\u03a1\u0001\u0000\u0000"+
		"\u0000\u03a3\u03a4\u0001\u0000\u0000\u0000\u03a4\u03a5\u0001\u0000\u0000"+
		"\u0000\u03a5\u03a7\u0003\u0112\u0089\u0000\u03a6\u03a8\u0005\u0347\u0000"+
		"\u0000\u03a7\u03a6\u0001\u0000\u0000\u0000\u03a7\u03a8\u0001\u0000\u0000"+
		"\u0000\u03a89\u0001\u0000\u0000\u0000\u03a9\u03aa\u0005f\u0000\u0000\u03aa"+
		"\u03ad\u0005\u0171\u0000\u0000\u03ab\u03ac\u0005\u0098\u0000\u0000\u03ac"+
		"\u03ae\u0005v\u0000\u0000\u03ad\u03ab\u0001\u0000\u0000\u0000\u03ad\u03ae"+
		"\u0001\u0000\u0000\u0000\u03ae\u03af\u0001\u0000\u0000\u0000\u03af\u03b4"+
		"\u0003\u0114\u008a\u0000\u03b0\u03b1\u0005\u0346\u0000\u0000\u03b1\u03b3"+
		"\u0003\u0114\u008a\u0000\u03b2\u03b0\u0001\u0000\u0000\u0000\u03b3\u03b6"+
		"\u0001\u0000\u0000\u0000\u03b4\u03b2\u0001\u0000\u0000\u0000\u03b4\u03b5"+
		"\u0001\u0000\u0000\u0000\u03b5\u03b8\u0001\u0000\u0000\u0000\u03b6\u03b4"+
		"\u0001\u0000\u0000\u0000\u03b7\u03b9\u0005\u0347\u0000\u0000\u03b8\u03b7"+
		"\u0001\u0000\u0000\u0000\u03b8\u03b9\u0001\u0000\u0000\u0000\u03b9;\u0001"+
		"\u0000\u0000\u0000\u03ba\u03bd\u0003>\u001f\u0000\u03bb\u03bd\u0003@ "+
		"\u0000\u03bc\u03ba\u0001\u0000\u0000\u0000\u03bc\u03bb\u0001\u0000\u0000"+
		"\u0000\u03bd=\u0001\u0000\u0000\u0000\u03be\u03bf\u0005\u00e8\u0000\u0000"+
		"\u03bf\u03c0\u0005\u0344\u0000\u0000\u03c0\u03c1\u0003\u0136\u009b\u0000"+
		"\u03c1\u03c2\u0005\u0346\u0000\u0000\u03c2\u03c3\u0005\u032b\u0000\u0000"+
		"\u03c3\u03c4\u0005\u0345\u0000\u0000\u03c4?\u0001\u0000\u0000\u0000\u03c5"+
		"\u03c6\u0005\u00e7\u0000\u0000\u03c6\u03c7\u0005\u0344\u0000\u0000\u03c7"+
		"\u03c8\u0005\u032b\u0000\u0000\u03c8\u03c9\u0005\u0346\u0000\u0000\u03c9"+
		"\u03ca\u0005\u032b\u0000\u0000\u03ca\u03cb\u0005\u0345\u0000\u0000\u03cb"+
		"\u03cd\u0005\u033f\u0000\u0000\u03cc\u03ce\u0003\u0136\u009b\u0000\u03cd"+
		"\u03cc\u0001\u0000\u0000\u0000\u03cd\u03ce\u0001\u0000\u0000\u0000\u03ce"+
		"\u03cf\u0001\u0000\u0000\u0000\u03cf\u03d1\u0005\u033f\u0000\u0000\u03d0"+
		"\u03d2\u0003\u0136\u009b\u0000\u03d1\u03d0\u0001\u0000\u0000\u0000\u03d1"+
		"\u03d2\u0001\u0000\u0000\u0000\u03d2\u03d3\u0001\u0000\u0000\u0000\u03d3"+
		"\u03d4\u0005\u033f\u0000\u0000\u03d4\u03d5\u0003\u0136\u009b\u0000\u03d5"+
		"A\u0001\u0000\u0000\u0000\u03d6\u03d7\u0005u\u0000\u0000\u03d7\u03d8\u0003"+
		"D\"\u0000\u03d8C\u0001\u0000\u0000\u0000\u03d9\u03da\u0005\u0322\u0000"+
		"\u0000\u03da\u03dc\u0005\u032f\u0000\u0000\u03db\u03d9\u0001\u0000\u0000"+
		"\u0000\u03db\u03dc\u0001\u0000\u0000\u0000\u03dc\u03df\u0001\u0000\u0000"+
		"\u0000\u03dd\u03e0\u0003\u011a\u008d\u0000\u03de\u03e0\u0003`0\u0000\u03df"+
		"\u03dd\u0001\u0000\u0000\u0000\u03df\u03de\u0001\u0000\u0000\u0000\u03e0"+
		"\u03e9\u0001\u0000\u0000\u0000\u03e1\u03e6\u0003F#\u0000\u03e2\u03e3\u0005"+
		"\u0346\u0000\u0000\u03e3\u03e5\u0003F#\u0000\u03e4\u03e2\u0001\u0000\u0000"+
		"\u0000\u03e5\u03e8\u0001\u0000\u0000\u0000\u03e6\u03e4\u0001\u0000\u0000"+
		"\u0000\u03e6\u03e7\u0001\u0000\u0000\u0000\u03e7\u03ea\u0001\u0000\u0000"+
		"\u0000\u03e8\u03e6\u0001\u0000\u0000\u0000\u03e9\u03e1\u0001\u0000\u0000"+
		"\u0000\u03e9\u03ea\u0001\u0000\u0000\u0000\u03ea\u03ec\u0001\u0000\u0000"+
		"\u0000\u03eb\u03ed\u0005\u0347\u0000\u0000\u03ec\u03eb\u0001\u0000\u0000"+
		"\u0000\u03ec\u03ed\u0001\u0000\u0000\u0000\u03ed\u0404\u0001\u0000\u0000"+
		"\u0000\u03ee\u03ef\u0005\u0344\u0000\u0000\u03ef\u03f4\u0003H$\u0000\u03f0"+
		"\u03f1\u0005\u034c\u0000\u0000\u03f1\u03f3\u0003H$\u0000\u03f2\u03f0\u0001"+
		"\u0000\u0000\u0000\u03f3\u03f6\u0001\u0000\u0000\u0000\u03f4\u03f2\u0001"+
		"\u0000\u0000\u0000\u03f4\u03f5\u0001\u0000\u0000\u0000\u03f5\u03f7\u0001"+
		"\u0000\u0000\u0000\u03f6\u03f4\u0001\u0000\u0000\u0000\u03f7\u03fe\u0005"+
		"\u0345\u0000\u0000\u03f8\u03fa\u0005\u000f\u0000\u0000\u03f9\u03f8\u0001"+
		"\u0000\u0000\u0000\u03f9\u03fa\u0001\u0000\u0000\u0000\u03fa\u03fb\u0001"+
		"\u0000\u0000\u0000\u03fb\u03fc\u0007\u0003\u0000\u0000\u03fc\u03fd\u0005"+
		"\u032f\u0000\u0000\u03fd\u03ff\u0005\u032b\u0000\u0000\u03fe\u03f9\u0001"+
		"\u0000\u0000\u0000\u03fe\u03ff\u0001\u0000\u0000\u0000\u03ff\u0401\u0001"+
		"\u0000\u0000\u0000\u0400\u0402\u0005\u0347\u0000\u0000\u0401\u0400\u0001"+
		"\u0000\u0000\u0000\u0401\u0402\u0001\u0000\u0000\u0000\u0402\u0404\u0001"+
		"\u0000\u0000\u0000\u0403\u03db\u0001\u0000\u0000\u0000\u0403\u03ee\u0001"+
		"\u0000\u0000\u0000\u0404E\u0001\u0000\u0000\u0000\u0405\u0406\u0005\u0322"+
		"\u0000\u0000\u0406\u0408\u0005\u032f\u0000\u0000\u0407\u0405\u0001\u0000"+
		"\u0000\u0000\u0407\u0408\u0001\u0000\u0000\u0000\u0408\u0412\u0001\u0000"+
		"\u0000\u0000\u0409\u040c\u0003^/\u0000\u040a\u040c\u0003\u0136\u009b\u0000"+
		"\u040b\u0409\u0001\u0000\u0000\u0000\u040b\u040a\u0001\u0000\u0000\u0000"+
		"\u040c\u040e\u0001\u0000\u0000\u0000\u040d\u040f\u0007\u0004\u0000\u0000"+
		"\u040e\u040d\u0001\u0000\u0000\u0000\u040e\u040f\u0001\u0000\u0000\u0000"+
		"\u040f\u0413\u0001\u0000\u0000\u0000\u0410\u0413\u0005X\u0000\u0000\u0411"+
		"\u0413\u0005\u00de\u0000\u0000\u0412\u040b\u0001\u0000\u0000\u0000\u0412"+
		"\u0410\u0001\u0000\u0000\u0000\u0412\u0411\u0001\u0000\u0000\u0000\u0413"+
		"G\u0001\u0000\u0000\u0000\u0414\u0415\u0007\u0005\u0000\u0000\u0415I\u0001"+
		"\u0000\u0000\u0000\u0416\u041d\u0003L&\u0000\u0417\u0419\u0005\u0346\u0000"+
		"\u0000\u0418\u0417\u0001\u0000\u0000\u0000\u0418\u0419\u0001\u0000\u0000"+
		"\u0000\u0419\u041a\u0001\u0000\u0000\u0000\u041a\u041c\u0003L&\u0000\u041b"+
		"\u0418\u0001\u0000\u0000\u0000\u041c\u041f\u0001\u0000\u0000\u0000\u041d"+
		"\u041b\u0001\u0000\u0000\u0000\u041d\u041e\u0001\u0000\u0000\u0000\u041e"+
		"K\u0001\u0000\u0000\u0000\u041f\u041d\u0001\u0000\u0000\u0000\u0420\u0424"+
		"\u0003N\'\u0000\u0421\u0424\u0003P(\u0000\u0422\u0424\u0003T*\u0000\u0423"+
		"\u0420\u0001\u0000\u0000\u0000\u0423\u0421\u0001\u0000\u0000\u0000\u0423"+
		"\u0422\u0001\u0000\u0000\u0000\u0424M\u0001\u0000\u0000\u0000\u0425\u0429"+
		"\u0003\u0136\u009b\u0000\u0426\u042a\u0003\u0130\u0098\u0000\u0427\u0428"+
		"\u0005\u000f\u0000\u0000\u0428\u042a\u0003`0\u0000\u0429\u0426\u0001\u0000"+
		"\u0000\u0000\u0429\u0427\u0001\u0000\u0000\u0000\u042a\u042d\u0001\u0000"+
		"\u0000\u0000\u042b\u042c\u00056\u0000\u0000\u042c\u042e\u0003\u0136\u009b"+
		"\u0000\u042d\u042b\u0001\u0000\u0000\u0000\u042d\u042e\u0001\u0000\u0000"+
		"\u0000\u042e\u0430\u0001\u0000\u0000\u0000\u042f\u0431\u0003\u012a\u0095"+
		"\u0000\u0430\u042f\u0001\u0000\u0000\u0000\u0430\u0431\u0001\u0000\u0000"+
		"\u0000\u0431\u0447\u0001\u0000\u0000\u0000\u0432\u0433\u0005<\u0000\u0000"+
		"\u0433\u0435\u0003\u0136\u009b\u0000\u0434\u0432\u0001\u0000\u0000\u0000"+
		"\u0434\u0435\u0001\u0000\u0000\u0000\u0435\u0436\u0001\u0000\u0000\u0000"+
		"\u0436\u0438\u0003\u012c\u0096\u0000\u0437\u0439\u0003\u012c\u0096\u0000"+
		"\u0438\u0437\u0001\u0000\u0000\u0000\u0438\u0439\u0001\u0000\u0000\u0000"+
		"\u0439\u0448\u0001\u0000\u0000\u0000\u043a\u0440\u0005\u0095\u0000\u0000"+
		"\u043b\u043c\u0005\u0344\u0000\u0000\u043c\u043d\u0005\u0327\u0000\u0000"+
		"\u043d\u043e\u0005\u0346\u0000\u0000\u043e\u043f\u0005\u0327\u0000\u0000"+
		"\u043f\u0441\u0005\u0345\u0000\u0000\u0440\u043b\u0001\u0000\u0000\u0000"+
		"\u0440\u0441\u0001\u0000\u0000\u0000\u0441\u0445\u0001\u0000\u0000\u0000"+
		"\u0442\u0443\u0005\u00db\u0000\u0000\u0443\u0444\u0005\u0084\u0000\u0000"+
		"\u0444\u0446\u0005\u0111\u0000\u0000\u0445\u0442\u0001\u0000\u0000\u0000"+
		"\u0445\u0446\u0001\u0000\u0000\u0000\u0446\u0448\u0001\u0000\u0000\u0000"+
		"\u0447\u0434\u0001\u0000\u0000\u0000\u0447\u043a\u0001\u0000\u0000\u0000"+
		"\u0447\u0448\u0001\u0000\u0000\u0000\u0448\u044a\u0001\u0000\u0000\u0000"+
		"\u0449\u044b\u0005\u0122\u0000\u0000\u044a\u0449\u0001\u0000\u0000\u0000"+
		"\u044a\u044b\u0001\u0000\u0000\u0000\u044b\u044f\u0001\u0000\u0000\u0000"+
		"\u044c\u044e\u0003R)\u0000\u044d\u044c\u0001\u0000\u0000\u0000\u044e\u0451"+
		"\u0001\u0000\u0000\u0000\u044f\u044d\u0001\u0000\u0000\u0000\u044f\u0450"+
		"\u0001\u0000\u0000\u0000\u0450O\u0001\u0000\u0000\u0000\u0451\u044f\u0001"+
		"\u0000\u0000\u0000\u0452\u0453\u0003\u0136\u009b\u0000\u0453\u0454\u0007"+
		"\u0006\u0000\u0000\u0454\u0458\u0003`0\u0000\u0455\u0459\u0005\u023f\u0000"+
		"\u0000\u0456\u0457\u0005\u00db\u0000\u0000\u0457\u0459\u0005\u023f\u0000"+
		"\u0000\u0458\u0455\u0001\u0000\u0000\u0000\u0458\u0456\u0001\u0000\u0000"+
		"\u0000\u0458\u0459\u0001\u0000\u0000\u0000\u0459Q\u0001\u0000\u0000\u0000"+
		"\u045a\u045b\u0005<\u0000\u0000\u045b\u045d\u0003\u0136\u009b\u0000\u045c"+
		"\u045a\u0001\u0000\u0000\u0000\u045c\u045d\u0001\u0000\u0000\u0000\u045d"+
		"\u0483\u0001\u0000\u0000\u0000\u045e\u045f\u0005\u00ff\u0000\u0000\u045f"+
		"\u0462\u0005\u00ab\u0000\u0000\u0460\u0462\u0005\u0164\u0000\u0000\u0461"+
		"\u045e\u0001\u0000\u0000\u0000\u0461\u0460\u0001\u0000\u0000\u0000\u0462"+
		"\u0464\u0001\u0000\u0000\u0000\u0463\u0465\u0003\u0128\u0094\u0000\u0464"+
		"\u0463\u0001\u0000\u0000\u0000\u0464\u0465\u0001\u0000\u0000\u0000\u0465"+
		"\u0467\u0001\u0000\u0000\u0000\u0466\u0468\u0003Z-\u0000\u0467\u0466\u0001"+
		"\u0000\u0000\u0000\u0467\u0468\u0001\u0000\u0000\u0000\u0468\u0484\u0001"+
		"\u0000\u0000\u0000\u0469\u046d\u0005-\u0000\u0000\u046a\u046b\u0005\u00db"+
		"\u0000\u0000\u046b\u046c\u0005\u0084\u0000\u0000\u046c\u046e\u0005\u0111"+
		"\u0000\u0000\u046d\u046a\u0001\u0000\u0000\u0000\u046d\u046e\u0001\u0000"+
		"\u0000\u0000\u046e\u046f\u0001\u0000\u0000\u0000\u046f\u0470\u0005\u0344"+
		"\u0000\u0000\u0470\u0471\u0003\u0082A\u0000\u0471\u0472\u0005\u0345\u0000"+
		"\u0000\u0472\u0484\u0001\u0000\u0000\u0000\u0473\u0474\u0005\u0087\u0000"+
		"\u0000\u0474\u0476\u0005\u00ab\u0000\u0000\u0475\u0473\u0001\u0000\u0000"+
		"\u0000\u0475\u0476\u0001\u0000\u0000\u0000\u0476\u0477\u0001\u0000\u0000"+
		"\u0000\u0477\u0478\u0005\u010d\u0000\u0000\u0478\u0479\u0003\u0112\u0089"+
		"\u0000\u0479\u047a\u0005\u0344\u0000\u0000\u047a\u047b\u0003\u0122\u0091"+
		"\u0000\u047b\u047d\u0005\u0345\u0000\u0000\u047c\u047e\u0003V+\u0000\u047d"+
		"\u047c\u0001\u0000\u0000\u0000\u047d\u047e\u0001\u0000\u0000\u0000\u047e"+
		"\u0480\u0001\u0000\u0000\u0000\u047f\u0481\u0003X,\u0000\u0480\u047f\u0001"+
		"\u0000\u0000\u0000\u0480\u0481\u0001\u0000\u0000\u0000\u0481\u0484\u0001"+
		"\u0000\u0000\u0000\u0482\u0484\u0003\u012a\u0095\u0000\u0483\u0461\u0001"+
		"\u0000\u0000\u0000\u0483\u0469\u0001\u0000\u0000\u0000\u0483\u0475\u0001"+
		"\u0000\u0000\u0000\u0483\u0482\u0001\u0000\u0000\u0000\u0484S\u0001\u0000"+
		"\u0000\u0000\u0485\u0486\u0005<\u0000\u0000\u0486\u0488\u0003\u0136\u009b"+
		"\u0000\u0487\u0485\u0001\u0000\u0000\u0000\u0487\u0488\u0001\u0000\u0000"+
		"\u0000\u0488\u04c9\u0001\u0000\u0000\u0000\u0489\u048a\u0005\u00ff\u0000"+
		"\u0000\u048a\u048d\u0005\u00ab\u0000\u0000\u048b\u048d\u0005\u0164\u0000"+
		"\u0000\u048c\u0489\u0001\u0000\u0000\u0000\u048c\u048b\u0001\u0000\u0000"+
		"\u0000\u048d\u048f\u0001\u0000\u0000\u0000\u048e\u0490\u0003\u0128\u0094"+
		"\u0000\u048f\u048e\u0001\u0000\u0000\u0000\u048f\u0490\u0001\u0000\u0000"+
		"\u0000\u0490\u0491\u0001\u0000\u0000\u0000\u0491\u0492\u0005\u0344\u0000"+
		"\u0000\u0492\u0493\u0003\u0120\u0090\u0000\u0493\u0495\u0005\u0345\u0000"+
		"\u0000\u0494\u0496\u0003Z-\u0000\u0495\u0494\u0001\u0000\u0000\u0000\u0495"+
		"\u0496\u0001\u0000\u0000\u0000\u0496\u0499\u0001\u0000\u0000\u0000\u0497"+
		"\u0498\u0005\u00e4\u0000\u0000\u0498\u049a\u0003\u0136\u009b\u0000\u0499"+
		"\u0497\u0001\u0000\u0000\u0000\u0499\u049a\u0001\u0000\u0000\u0000\u049a"+
		"\u04ca\u0001\u0000\u0000\u0000\u049b\u049f\u0005-\u0000\u0000\u049c\u049d"+
		"\u0005\u00db\u0000\u0000\u049d\u049e\u0005\u0084\u0000\u0000\u049e\u04a0"+
		"\u0005\u0111\u0000\u0000\u049f\u049c\u0001\u0000\u0000\u0000\u049f\u04a0"+
		"\u0001\u0000\u0000\u0000\u04a0\u04a1\u0001\u0000\u0000\u0000\u04a1\u04a2"+
		"\u0005\u0344\u0000\u0000\u04a2\u04a3\u0003\u0082A\u0000\u04a3\u04a4\u0005"+
		"\u0345\u0000\u0000\u04a4\u04ca\u0001\u0000\u0000\u0000\u04a5\u04a7\u0005"+
		"X\u0000\u0000\u04a6\u04a8\u0005\u0344\u0000\u0000\u04a7\u04a6\u0001\u0000"+
		"\u0000\u0000\u04a7\u04a8\u0001\u0000\u0000\u0000\u04a8\u04ad\u0001\u0000"+
		"\u0000\u0000\u04a9\u04ae\u0005\u032b\u0000\u0000\u04aa\u04ae\u0005\u034c"+
		"\u0000\u0000\u04ab\u04ae\u0003\u00d4j\u0000\u04ac\u04ae\u0005\u0327\u0000"+
		"\u0000\u04ad\u04a9\u0001\u0000\u0000\u0000\u04ad\u04aa\u0001\u0000\u0000"+
		"\u0000\u04ad\u04ab\u0001\u0000\u0000\u0000\u04ad\u04ac\u0001\u0000\u0000"+
		"\u0000\u04ae\u04af\u0001\u0000\u0000\u0000\u04af\u04ad\u0001\u0000\u0000"+
		"\u0000\u04af\u04b0\u0001\u0000\u0000\u0000\u04b0\u04b2\u0001\u0000\u0000"+
		"\u0000\u04b1\u04b3\u0005\u0345\u0000\u0000\u04b2\u04b1\u0001\u0000\u0000"+
		"\u0000\u04b2\u04b3\u0001\u0000\u0000\u0000\u04b3\u04b4\u0001\u0000\u0000"+
		"\u0000\u04b4\u04b5\u0005\u0084\u0000\u0000\u04b5\u04ca\u0003\u0136\u009b"+
		"\u0000\u04b6\u04b7\u0005\u0087\u0000\u0000\u04b7\u04b8\u0005\u00ab\u0000"+
		"\u0000\u04b8\u04b9\u0005\u0344\u0000\u0000\u04b9\u04ba\u0003\u0122\u0091"+
		"\u0000\u04ba\u04bb\u0005\u0345\u0000\u0000\u04bb\u04bc\u0005\u010d\u0000"+
		"\u0000\u04bc\u04c1\u0003\u0112\u0089\u0000\u04bd\u04be\u0005\u0344\u0000"+
		"\u0000\u04be\u04bf\u0003\u0122\u0091\u0000\u04bf\u04c0\u0005\u0345\u0000"+
		"\u0000\u04c0\u04c2\u0001\u0000\u0000\u0000\u04c1\u04bd\u0001\u0000\u0000"+
		"\u0000\u04c1\u04c2\u0001\u0000\u0000\u0000\u04c2\u04c4\u0001\u0000\u0000"+
		"\u0000\u04c3\u04c5\u0003V+\u0000\u04c4\u04c3\u0001\u0000\u0000\u0000\u04c4"+
		"\u04c5\u0001\u0000\u0000\u0000\u04c5\u04c7\u0001\u0000\u0000\u0000\u04c6"+
		"\u04c8\u0003X,\u0000\u04c7\u04c6\u0001\u0000\u0000\u0000\u04c7\u04c8\u0001"+
		"\u0000\u0000\u0000\u04c8\u04ca\u0001\u0000\u0000\u0000\u04c9\u048c\u0001"+
		"\u0000\u0000\u0000\u04c9\u049b\u0001\u0000\u0000\u0000\u04c9\u04a5\u0001"+
		"\u0000\u0000\u0000\u04c9\u04b6\u0001\u0000\u0000\u0000\u04caU\u0001\u0000"+
		"\u0000\u0000\u04cb\u04cc\u0005\u00e4\u0000\u0000\u04cc\u04d4\u0005[\u0000"+
		"\u0000\u04cd\u04ce\u0005\u0262\u0000\u0000\u04ce\u04d5\u0005\u017f\u0000"+
		"\u0000\u04cf\u04d5\u0005(\u0000\u0000\u04d0\u04d1\u0005\u013a\u0000\u0000"+
		"\u04d1\u04d5\u0005\u00de\u0000\u0000\u04d2\u04d3\u0005\u013a\u0000\u0000"+
		"\u04d3\u04d5\u0005X\u0000\u0000\u04d4\u04cd\u0001\u0000\u0000\u0000\u04d4"+
		"\u04cf\u0001\u0000\u0000\u0000\u04d4\u04d0\u0001\u0000\u0000\u0000\u04d4"+
		"\u04d2\u0001\u0000\u0000\u0000\u04d5W\u0001\u0000\u0000\u0000\u04d6\u04d7"+
		"\u0005\u00e4\u0000\u0000\u04d7\u04df\u0005\u0168\u0000\u0000\u04d8\u04d9"+
		"\u0005\u0262\u0000\u0000\u04d9\u04e0\u0005\u017f\u0000\u0000\u04da\u04e0"+
		"\u0005(\u0000\u0000\u04db\u04dc\u0005\u013a\u0000\u0000\u04dc\u04e0\u0005"+
		"\u00de\u0000\u0000\u04dd\u04de\u0005\u013a\u0000\u0000\u04de\u04e0\u0005"+
		"X\u0000\u0000\u04df\u04d8\u0001\u0000\u0000\u0000\u04df\u04da\u0001\u0000"+
		"\u0000\u0000\u04df\u04db\u0001\u0000\u0000\u0000\u04df\u04dd\u0001\u0000"+
		"\u0000\u0000\u04e0Y\u0001\u0000\u0000\u0000\u04e1\u04e2\u0005\u0178\u0000"+
		"\u0000\u04e2\u04e3\u0005\u0344\u0000\u0000\u04e3\u04e8\u0003\\.\u0000"+
		"\u04e4\u04e5\u0005\u0346\u0000\u0000\u04e5\u04e7\u0003\\.\u0000\u04e6"+
		"\u04e4\u0001\u0000\u0000\u0000\u04e7\u04ea\u0001\u0000\u0000\u0000\u04e8"+
		"\u04e6\u0001\u0000\u0000\u0000\u04e8\u04e9\u0001\u0000\u0000\u0000\u04e9"+
		"\u04eb\u0001\u0000\u0000\u0000\u04ea\u04e8\u0001\u0000\u0000\u0000\u04eb"+
		"\u04ec\u0005\u0345\u0000\u0000\u04ec[\u0001\u0000\u0000\u0000\u04ed\u04ee"+
		"\u0003\u0138\u009c\u0000\u04ee\u04f2\u0005\u032f\u0000\u0000\u04ef\u04f3"+
		"\u0003\u0138\u009c\u0000\u04f0\u04f3\u0003\u0126\u0093\u0000\u04f1\u04f3"+
		"\u0005\u0327\u0000\u0000\u04f2\u04ef\u0001\u0000\u0000\u0000\u04f2\u04f0"+
		"\u0001\u0000\u0000\u0000\u04f2\u04f1\u0001\u0000\u0000\u0000\u04f3]\u0001"+
		"\u0000\u0000\u0000\u04f4\u04f7\u0003\u0132\u0099\u0000\u04f5\u04f7\u0005"+
		"\u0322\u0000\u0000\u04f6\u04f4\u0001\u0000\u0000\u0000\u04f6\u04f5\u0001"+
		"\u0000\u0000\u0000\u04f7_\u0001\u0000\u0000\u0000\u04f8\u04f9\u00060\uffff"+
		"\uffff\u0000\u04f9\u0505\u0003b1\u0000\u04fa\u0505\u0003f3\u0000\u04fb"+
		"\u0505\u0003d2\u0000\u04fc\u0505\u0003l6\u0000\u04fd\u0505\u0003n7\u0000"+
		"\u04fe\u0505\u0003\u00d4j\u0000\u04ff\u0505\u0003p8\u0000\u0500\u0505"+
		"\u0003\u011e\u008f\u0000\u0501\u0505\u0003t:\u0000\u0502\u0505\u0003r"+
		"9\u0000\u0503\u0505\u0003\u0104\u0082\u0000\u0504\u04f8\u0001\u0000\u0000"+
		"\u0000\u0504\u04fa\u0001\u0000\u0000\u0000\u0504\u04fb\u0001\u0000\u0000"+
		"\u0000\u0504\u04fc\u0001\u0000\u0000\u0000\u0504\u04fd\u0001\u0000\u0000"+
		"\u0000\u0504\u04fe\u0001\u0000\u0000\u0000\u0504\u04ff\u0001\u0000\u0000"+
		"\u0000\u0504\u0500\u0001\u0000\u0000\u0000\u0504\u0501\u0001\u0000\u0000"+
		"\u0000\u0504\u0502\u0001\u0000\u0000\u0000\u0504\u0503\u0001\u0000\u0000"+
		"\u0000\u0505\u0519\u0001\u0000\u0000\u0000\u0506\u0507\n\u0005\u0000\u0000"+
		"\u0507\u0508\u0007\u0007\u0000\u0000\u0508\u0518\u0003`0\u0006\u0509\u050a"+
		"\n\u0004\u0000\u0000\u050a\u050b\u0007\b\u0000\u0000\u050b\u0518\u0003"+
		"`0\u0005\u050c\u050d\n\u0003\u0000\u0000\u050d\u050e\u0003\u013a\u009d"+
		"\u0000\u050e\u050f\u0003`0\u0004\u050f\u0518\u0001\u0000\u0000\u0000\u0510"+
		"\u0511\n\u0002\u0000\u0000\u0511\u0512\u0003\u013c\u009e\u0000\u0512\u0513"+
		"\u0003`0\u0003\u0513\u0518\u0001\u0000\u0000\u0000\u0514\u0515\n\n\u0000"+
		"\u0000\u0515\u0516\u00056\u0000\u0000\u0516\u0518\u0003\u0136\u009b\u0000"+
		"\u0517\u0506\u0001\u0000\u0000\u0000\u0517\u0509\u0001\u0000\u0000\u0000"+
		"\u0517\u050c\u0001\u0000\u0000\u0000\u0517\u0510\u0001\u0000\u0000\u0000"+
		"\u0517\u0514\u0001\u0000\u0000\u0000\u0518\u051b\u0001\u0000\u0000\u0000"+
		"\u0519\u0517\u0001\u0000\u0000\u0000\u0519\u051a\u0001\u0000\u0000\u0000"+
		"\u051aa\u0001\u0000\u0000\u0000\u051b\u0519\u0001\u0000\u0000\u0000\u051c"+
		"\u051f\u0005\u0322\u0000\u0000\u051d\u051e\u0005\u033f\u0000\u0000\u051e"+
		"\u0520\u0003\u0138\u009c\u0000\u051f\u051d\u0001\u0000\u0000\u0000\u051f"+
		"\u0520\u0001\u0000\u0000\u0000\u0520\u052b\u0001\u0000\u0000\u0000\u0521"+
		"\u0522\u0005\u0348\u0000\u0000\u0522\u052c\u0003\u0138\u009c\u0000\u0523"+
		"\u0524\u0005\u0342\u0000\u0000\u0524\u052a\u0005\u0228\u0000\u0000\u0525"+
		"\u0526\u0005\u0342\u0000\u0000\u0526\u052a\u0005\u031a\u0000\u0000\u0527"+
		"\u0528\u0005\u0342\u0000\u0000\u0528\u052a\u0005\u031b\u0000\u0000\u0529"+
		"\u0523\u0001\u0000\u0000\u0000\u0529\u0525\u0001\u0000\u0000\u0000\u0529"+
		"\u0527\u0001\u0000\u0000\u0000\u052a\u052c\u0001\u0000\u0000\u0000\u052b"+
		"\u0521\u0001\u0000\u0000\u0000\u052b\u0529\u0001\u0000\u0000\u0000\u052b"+
		"\u052c\u0001\u0000\u0000\u0000\u052cc\u0001\u0000\u0000\u0000\u052d\u052e"+
		"\u0005\u0323\u0000\u0000\u052ee\u0001\u0000\u0000\u0000\u052f\u0532\u0005"+
		"\u0324\u0000\u0000\u0530\u0531\u0005\u033f\u0000\u0000\u0531\u0533\u0003"+
		"\u0138\u009c\u0000\u0532\u0530\u0001\u0000\u0000\u0000\u0532\u0533\u0001"+
		"\u0000\u0000\u0000\u0533\u053e\u0001\u0000\u0000\u0000\u0534\u0535\u0005"+
		"\u0348\u0000\u0000\u0535\u053f\u0003\u0138\u009c\u0000\u0536\u0537\u0005"+
		"\u0342\u0000\u0000\u0537\u053d\u0005\u0228\u0000\u0000\u0538\u0539\u0005"+
		"\u0342\u0000\u0000\u0539\u053d\u0005\u031a\u0000\u0000\u053a\u053b\u0005"+
		"\u0342\u0000\u0000\u053b\u053d\u0005\u031b\u0000\u0000\u053c\u0536\u0001"+
		"\u0000\u0000\u0000\u053c\u0538\u0001\u0000\u0000\u0000\u053c\u053a\u0001"+
		"\u0000\u0000\u0000\u053d\u053f\u0001\u0000\u0000\u0000\u053e\u0534\u0001"+
		"\u0000\u0000\u0000\u053e\u053c\u0001\u0000\u0000\u0000\u053e\u053f\u0001"+
		"\u0000\u0000\u0000\u053fg\u0001\u0000\u0000\u0000\u0540\u0543\u0005\u0325"+
		"\u0000\u0000\u0541\u0542\u0005\u033f\u0000\u0000\u0542\u0544\u0003\u0138"+
		"\u009c\u0000\u0543\u0541\u0001\u0000\u0000\u0000\u0543\u0544\u0001\u0000"+
		"\u0000\u0000\u0544\u0549\u0001\u0000\u0000\u0000\u0545\u0546\u0005\u0348"+
		"\u0000\u0000\u0546\u054a\u0003\u0138\u009c\u0000\u0547\u0548\u0005\u0351"+
		"\u0000\u0000\u0548\u054a\u0003\u0138\u009c\u0000\u0549\u0545\u0001\u0000"+
		"\u0000\u0000\u0549\u0547\u0001\u0000\u0000\u0000\u0549\u054a\u0001\u0000"+
		"\u0000\u0000\u054ai\u0001\u0000\u0000\u0000\u054b\u054c\u0005\u0326\u0000"+
		"\u0000\u054ck\u0001\u0000\u0000\u0000\u054d\u054e\u0005\u0001\u0000\u0000"+
		"\u054e\u054f\u0003\u0138\u009c\u0000\u054fm\u0001\u0000\u0000\u0000\u0550"+
		"\u0555\u0005X\u0000\u0000\u0551\u0555\u0005\u00de\u0000\u0000\u0552\u0555"+
		"\u0005\u0322\u0000\u0000\u0553\u0555\u0003\u0132\u0099\u0000\u0554\u0550"+
		"\u0001\u0000\u0000\u0000\u0554\u0551\u0001\u0000\u0000\u0000\u0554\u0552"+
		"\u0001\u0000\u0000\u0000\u0554\u0553\u0001\u0000\u0000\u0000\u0555o\u0001"+
		"\u0000\u0000\u0000\u0556\u0557\u0005)\u0000\u0000\u0557\u0559\u0003`0"+
		"\u0000\u0558\u055a\u0003\u00e2q\u0000\u0559\u0558\u0001\u0000\u0000\u0000"+
		"\u055a\u055b\u0001\u0000\u0000\u0000\u055b\u0559\u0001\u0000\u0000\u0000"+
		"\u055b\u055c\u0001\u0000\u0000\u0000\u055c\u055f\u0001\u0000\u0000\u0000"+
		"\u055d\u055e\u0005i\u0000\u0000\u055e\u0560\u0003`0\u0000\u055f\u055d"+
		"\u0001\u0000\u0000\u0000\u055f\u0560\u0001\u0000\u0000\u0000\u0560\u0561"+
		"\u0001\u0000\u0000\u0000\u0561\u0562\u0005k\u0000\u0000\u0562\u0570\u0001"+
		"\u0000\u0000\u0000\u0563\u0565\u0005)\u0000\u0000\u0564\u0566\u0003\u00e4"+
		"r\u0000\u0565\u0564\u0001\u0000\u0000\u0000\u0566\u0567\u0001\u0000\u0000"+
		"\u0000\u0567\u0565\u0001\u0000\u0000\u0000\u0567\u0568\u0001\u0000\u0000"+
		"\u0000\u0568\u056b\u0001\u0000\u0000\u0000\u0569\u056a\u0005i\u0000\u0000"+
		"\u056a\u056c\u0003`0\u0000\u056b\u0569\u0001\u0000\u0000\u0000\u056b\u056c"+
		"\u0001\u0000\u0000\u0000\u056c\u056d\u0001\u0000\u0000\u0000\u056d\u056e"+
		"\u0005k\u0000\u0000\u056e\u0570\u0001\u0000\u0000\u0000\u056f\u0556\u0001"+
		"\u0000\u0000\u0000\u056f\u0563\u0001\u0000\u0000\u0000\u0570q\u0001\u0000"+
		"\u0000\u0000\u0571\u0572\u0005\u034e\u0000\u0000\u0572\u0576\u0003`0\u0000"+
		"\u0573\u0574\u0007\t\u0000\u0000\u0574\u0576\u0003`0\u0000\u0575\u0571"+
		"\u0001\u0000\u0000\u0000\u0575\u0573\u0001\u0000\u0000\u0000\u0576s\u0001"+
		"\u0000\u0000\u0000\u0577\u0578\u0005\u0344\u0000\u0000\u0578\u0579\u0003"+
		"`0\u0000\u0579\u057a\u0005\u0345\u0000\u0000\u057a\u0580\u0001\u0000\u0000"+
		"\u0000\u057b\u057c\u0005\u0344\u0000\u0000\u057c\u057d\u0003x<\u0000\u057d"+
		"\u057e\u0005\u0345\u0000\u0000\u057e\u0580\u0001\u0000\u0000\u0000\u057f"+
		"\u0577\u0001\u0000\u0000\u0000\u057f\u057b\u0001\u0000\u0000\u0000\u0580"+
		"u\u0001\u0000\u0000\u0000\u0581\u058a\u0005\u00de\u0000\u0000\u0582\u058a"+
		"\u0003\u0132\u0099\u0000\u0583\u058a\u0003\u00d4j\u0000\u0584\u058a\u0005"+
		"\u0322\u0000\u0000\u0585\u0586\u0005\u0344\u0000\u0000\u0586\u0587\u0003"+
		"v;\u0000\u0587\u0588\u0005\u0345\u0000\u0000\u0588\u058a\u0001\u0000\u0000"+
		"\u0000\u0589\u0581\u0001\u0000\u0000\u0000\u0589\u0582\u0001\u0000\u0000"+
		"\u0000\u0589\u0583\u0001\u0000\u0000\u0000\u0589\u0584\u0001\u0000\u0000"+
		"\u0000\u0589\u0585\u0001\u0000\u0000\u0000\u058aw\u0001\u0000\u0000\u0000"+
		"\u058b\u058c\u0003\u001a\r\u0000\u058cy\u0001\u0000\u0000\u0000\u058d"+
		"\u0590\u0005\u0178\u0000\u0000\u058e\u058f\u0005\u0316\u0000\u0000\u058f"+
		"\u0591\u0005\u0346\u0000\u0000\u0590\u058e\u0001\u0000\u0000\u0000\u0590"+
		"\u0591\u0001\u0000\u0000\u0000\u0591\u0592\u0001\u0000\u0000\u0000\u0592"+
		"\u0597\u0003|>\u0000\u0593\u0594\u0005\u0346\u0000\u0000\u0594\u0596\u0003"+
		"|>\u0000\u0595\u0593\u0001\u0000\u0000\u0000\u0596\u0599\u0001\u0000\u0000"+
		"\u0000\u0597\u0595\u0001\u0000\u0000\u0000\u0597\u0598\u0001\u0000\u0000"+
		"\u0000\u0598\u05a8\u0001\u0000\u0000\u0000\u0599\u0597\u0001\u0000\u0000"+
		"\u0000\u059a\u059b\u0005\u0178\u0000\u0000\u059b\u05a0\u0005\u001f\u0000"+
		"\u0000\u059c\u059d\u0005\u0344\u0000\u0000\u059d\u059e\u0003\u00cae\u0000"+
		"\u059e\u059f\u0005\u0345\u0000\u0000\u059f\u05a1\u0001\u0000\u0000\u0000"+
		"\u05a0\u059c\u0001\u0000\u0000\u0000\u05a0\u05a1\u0001\u0000\u0000\u0000"+
		"\u05a1\u05a2\u0001\u0000\u0000\u0000\u05a2\u05a3\u0005\u000f\u0000\u0000"+
		"\u05a3\u05a4\u0005\u0344\u0000\u0000\u05a4\u05a5\u0003\u001a\r\u0000\u05a5"+
		"\u05a6\u0005\u0345\u0000\u0000\u05a6\u05a8\u0001\u0000\u0000\u0000\u05a7"+
		"\u058d\u0001\u0000\u0000\u0000\u05a7\u059a\u0001\u0000\u0000\u0000\u05a8"+
		"{\u0001\u0000\u0000\u0000\u05a9\u05ae\u0003\u0136\u009b\u0000\u05aa\u05ab"+
		"\u0005\u0344\u0000\u0000\u05ab\u05ac\u0003\u0122\u0091\u0000\u05ac\u05ad"+
		"\u0005\u0345\u0000\u0000\u05ad\u05af\u0001\u0000\u0000\u0000\u05ae\u05aa"+
		"\u0001\u0000\u0000\u0000\u05ae\u05af\u0001\u0000\u0000\u0000\u05af\u05b0"+
		"\u0001\u0000\u0000\u0000\u05b0\u05b1\u0005\u000f\u0000\u0000\u05b1\u05b2"+
		"\u0005\u0344\u0000\u0000\u05b2\u05b3\u0003\u001a\r\u0000\u05b3\u05b4\u0005"+
		"\u0345\u0000\u0000\u05b4}\u0001\u0000\u0000\u0000\u05b5\u05b8\u0003\u011e"+
		"\u008f\u0000\u05b6\u05b8\u0005\u0322\u0000\u0000\u05b7\u05b5\u0001\u0000"+
		"\u0000\u0000\u05b7\u05b6\u0001\u0000\u0000\u0000\u05b8\u05bb\u0001\u0000"+
		"\u0000\u0000\u05b9\u05bc\u0005\u032f\u0000\u0000\u05ba\u05bc\u0003\u013c"+
		"\u009e\u0000\u05bb\u05b9\u0001\u0000\u0000\u0000\u05bb\u05ba\u0001\u0000"+
		"\u0000\u0000\u05bc\u05bd\u0001\u0000\u0000\u0000\u05bd\u05c6\u0003`0\u0000"+
		"\u05be\u05bf\u0003\u0136\u009b\u0000\u05bf\u05c0\u0005\u033f\u0000\u0000"+
		"\u05c0\u05c1\u0003\u0136\u009b\u0000\u05c1\u05c2\u0005\u0344\u0000\u0000"+
		"\u05c2\u05c3\u0003\u00fa}\u0000\u05c3\u05c4\u0005\u0345\u0000\u0000\u05c4"+
		"\u05c6\u0001\u0000\u0000\u0000\u05c5\u05b7\u0001\u0000\u0000\u0000\u05c5"+
		"\u05be\u0001\u0000\u0000\u0000\u05c6\u007f\u0001\u0000\u0000\u0000\u05c7"+
		"\u05cc\u0003\u0082A\u0000\u05c8\u05c9\u0005\u0346\u0000\u0000\u05c9\u05cb"+
		"\u0003\u0082A\u0000\u05ca\u05c8\u0001\u0000\u0000\u0000\u05cb\u05ce\u0001"+
		"\u0000\u0000\u0000\u05cc\u05ca\u0001\u0000\u0000\u0000\u05cc\u05cd\u0001"+
		"\u0000\u0000\u0000\u05cd\u0081\u0001\u0000\u0000\u0000\u05ce\u05cc\u0001"+
		"\u0000\u0000\u0000\u05cf\u05d4\u0003\u0084B\u0000\u05d0\u05d1\u0005\u00ec"+
		"\u0000\u0000\u05d1\u05d3\u0003\u0084B\u0000\u05d2\u05d0\u0001\u0000\u0000"+
		"\u0000\u05d3\u05d6\u0001\u0000\u0000\u0000\u05d4\u05d2\u0001\u0000\u0000"+
		"\u0000\u05d4\u05d5\u0001\u0000\u0000\u0000\u05d5\u0083\u0001\u0000\u0000"+
		"\u0000\u05d6\u05d4\u0001\u0000\u0000\u0000\u05d7\u05dc\u0003\u0086C\u0000"+
		"\u05d8\u05d9\u0005\n\u0000\u0000\u05d9\u05db\u0003\u0086C\u0000\u05da"+
		"\u05d8\u0001\u0000\u0000\u0000\u05db\u05de\u0001\u0000\u0000\u0000\u05dc"+
		"\u05da\u0001\u0000\u0000\u0000\u05dc\u05dd\u0001\u0000\u0000\u0000\u05dd"+
		"\u0085\u0001\u0000\u0000\u0000\u05de\u05dc\u0001\u0000\u0000\u0000\u05df"+
		"\u05e1\u0005\u00db\u0000\u0000\u05e0\u05df\u0001\u0000\u0000\u0000\u05e0"+
		"\u05e1\u0001\u0000\u0000\u0000\u05e1\u05e2\u0001\u0000\u0000\u0000\u05e2"+
		"\u05e3\u0003\u0088D\u0000\u05e3\u0087\u0001\u0000\u0000\u0000\u05e4\u05e5"+
		"\u0005v\u0000\u0000\u05e5\u05e6\u0005\u0344\u0000\u0000\u05e6\u05e7\u0003"+
		"x<\u0000\u05e7\u05e8\u0005\u0345\u0000\u0000\u05e8\u062c\u0001\u0000\u0000"+
		"\u0000\u05e9\u05ea\u0003`0\u0000\u05ea\u05eb\u0003\u013a\u009d\u0000\u05eb"+
		"\u05ec\u0003`0\u0000\u05ec\u062c\u0001\u0000\u0000\u0000\u05ed\u05ee\u0003"+
		"`0\u0000\u05ee\u05ef\u0003\u013a\u009d\u0000\u05ef\u05f0\u0007\n\u0000"+
		"\u0000\u05f0\u05f1\u0005\u0344\u0000\u0000\u05f1\u05f2\u0003x<\u0000\u05f2"+
		"\u05f3\u0005\u0345\u0000\u0000\u05f3\u062c\u0001\u0000\u0000\u0000\u05f4"+
		"\u05f6\u0003`0\u0000\u05f5\u05f7\u0005\u00db\u0000\u0000\u05f6\u05f5\u0001"+
		"\u0000\u0000\u0000\u05f6\u05f7\u0001\u0000\u0000\u0000\u05f7\u05f8\u0001"+
		"\u0000\u0000\u0000\u05f8\u05f9\u0005\u001c\u0000\u0000\u05f9\u05fa\u0003"+
		"`0\u0000\u05fa\u05fb\u0005\n\u0000\u0000\u05fb\u05fc\u0003`0\u0000\u05fc"+
		"\u062c\u0001\u0000\u0000\u0000\u05fd\u05ff\u0003`0\u0000\u05fe\u0600\u0005"+
		"\u00db\u0000\u0000\u05ff\u05fe\u0001\u0000\u0000\u0000\u05ff\u0600\u0001"+
		"\u0000\u0000\u0000\u0600\u0601\u0001\u0000\u0000\u0000\u0601\u0602\u0005"+
		"\u009a\u0000\u0000\u0602\u0605\u0005\u0344\u0000\u0000\u0603\u0606\u0003"+
		"x<\u0000\u0604\u0606\u0003\u00fa}\u0000\u0605\u0603\u0001\u0000\u0000"+
		"\u0000\u0605\u0604\u0001\u0000\u0000\u0000\u0606\u0607\u0001\u0000\u0000"+
		"\u0000\u0607\u0608\u0005\u0345\u0000\u0000\u0608\u062c\u0001\u0000\u0000"+
		"\u0000\u0609\u060b\u0003`0\u0000\u060a\u060c\u0005\u00db\u0000\u0000\u060b"+
		"\u060a\u0001\u0000\u0000\u0000\u060b\u060c\u0001\u0000\u0000\u0000\u060c"+
		"\u060d\u0001\u0000\u0000\u0000\u060d\u060e\u0005\u00b3\u0000\u0000\u060e"+
		"\u0611\u0003`0\u0000\u060f\u0610\u0005n\u0000\u0000\u0610\u0612\u0003"+
		"`0\u0000\u0611\u060f\u0001\u0000\u0000\u0000\u0611\u0612\u0001\u0000\u0000"+
		"\u0000\u0612\u062c\u0001\u0000\u0000\u0000\u0613\u0614\u0003`0\u0000\u0614"+
		"\u0615\u0005\u00a7\u0000\u0000\u0615\u0616\u0003\u012a\u0095\u0000\u0616"+
		"\u062c\u0001\u0000\u0000\u0000\u0617\u062c\u0003h4\u0000\u0618\u062c\u0003"+
		"j5\u0000\u0619\u061c\u0005\u0322\u0000\u0000\u061a\u061b\u0005\u033f\u0000"+
		"\u0000\u061b\u061d\u0003\u0138\u009c\u0000\u061c\u061a\u0001\u0000\u0000"+
		"\u0000\u061c\u061d\u0001\u0000\u0000\u0000\u061d\u061e\u0001\u0000\u0000"+
		"\u0000\u061e\u061f\u0005\u0348\u0000\u0000\u061f\u062c\u0005\u0108\u0000"+
		"\u0000\u0620\u0623\u0005\u0324\u0000\u0000\u0621\u0622\u0005\u033f\u0000"+
		"\u0000\u0622\u0624\u0003\u0138\u009c\u0000\u0623\u0621\u0001\u0000\u0000"+
		"\u0000\u0623\u0624\u0001\u0000\u0000\u0000\u0624\u0625\u0001\u0000\u0000"+
		"\u0000\u0625\u0626\u0005\u0348\u0000\u0000\u0626\u062c\u0005\u0108\u0000"+
		"\u0000\u0627\u0628\u0005\u0344\u0000\u0000\u0628\u0629\u0003\u0082A\u0000"+
		"\u0629\u062a\u0005\u0345\u0000\u0000\u062a\u062c\u0001\u0000\u0000\u0000"+
		"\u062b\u05e4\u0001\u0000\u0000\u0000\u062b\u05e9\u0001\u0000\u0000\u0000"+
		"\u062b\u05ed\u0001\u0000\u0000\u0000\u062b\u05f4\u0001\u0000\u0000\u0000"+
		"\u062b\u05fd\u0001\u0000\u0000\u0000\u062b\u0609\u0001\u0000\u0000\u0000"+
		"\u062b\u0613\u0001\u0000\u0000\u0000\u062b\u0617\u0001\u0000\u0000\u0000"+
		"\u062b\u0618\u0001\u0000\u0000\u0000\u062b\u0619\u0001\u0000\u0000\u0000"+
		"\u062b\u0620\u0001\u0000\u0000\u0000\u062b\u0627\u0001\u0000\u0000\u0000"+
		"\u062c\u0089\u0001\u0000\u0000\u0000\u062d\u0633\u0003\u008eG\u0000\u062e"+
		"\u062f\u0005\u0344\u0000\u0000\u062f\u0630\u0003\u008aE\u0000\u0630\u0631"+
		"\u0005\u0345\u0000\u0000\u0631\u0633\u0001\u0000\u0000\u0000\u0632\u062d"+
		"\u0001\u0000\u0000\u0000\u0632\u062e\u0001\u0000\u0000\u0000\u0633\u0637"+
		"\u0001\u0000\u0000\u0000\u0634\u0636\u0003\u008cF\u0000\u0635\u0634\u0001"+
		"\u0000\u0000\u0000\u0636\u0639\u0001\u0000\u0000\u0000\u0637\u0635\u0001"+
		"\u0000\u0000\u0000\u0637\u0638\u0001\u0000\u0000\u0000\u0638\u008b\u0001"+
		"\u0000\u0000\u0000\u0639\u0637\u0001\u0000\u0000\u0000\u063a\u063c\u0005"+
		"\u0163\u0000\u0000\u063b\u063d\u0005\u0005\u0000\u0000\u063c\u063b\u0001"+
		"\u0000\u0000\u0000\u063c\u063d\u0001\u0000\u0000\u0000\u063d\u0641\u0001"+
		"\u0000\u0000\u0000\u063e\u0641\u0005s\u0000\u0000\u063f\u0641\u0005\u00a3"+
		"\u0000\u0000\u0640\u063a\u0001\u0000\u0000\u0000\u0640\u063e\u0001\u0000"+
		"\u0000\u0000\u0640\u063f\u0001\u0000\u0000\u0000\u0641\u0647\u0001\u0000"+
		"\u0000\u0000\u0642\u0648\u0003\u008eG\u0000\u0643\u0644\u0005\u0344\u0000"+
		"\u0000\u0644\u0645\u0003\u008aE\u0000\u0645\u0646\u0005\u0345\u0000\u0000"+
		"\u0646\u0648\u0001\u0000\u0000\u0000\u0647\u0642\u0001\u0000\u0000\u0000"+
		"\u0647\u0643\u0001\u0000\u0000\u0000\u0648\u008d\u0001\u0000\u0000\u0000"+
		"\u0649\u064b\u0005\u0130\u0000\u0000\u064a\u064c\u0007\u000b\u0000\u0000"+
		"\u064b\u064a\u0001\u0000\u0000\u0000\u064b\u064c\u0001\u0000\u0000\u0000"+
		"\u064c\u064e\u0001\u0000\u0000\u0000\u064d\u064f\u0003\u0090H\u0000\u064e"+
		"\u064d\u0001\u0000\u0000\u0000\u064e\u064f\u0001\u0000\u0000\u0000\u064f"+
		"\u0650\u0001\u0000\u0000\u0000\u0650\u0653\u0003\u00a6S\u0000\u0651\u0652"+
		"\u0005\u00a4\u0000\u0000\u0652\u0654\u0003\u0112\u0089\u0000\u0653\u0651"+
		"\u0001\u0000\u0000\u0000\u0653\u0654\u0001\u0000\u0000\u0000\u0654\u0657"+
		"\u0001\u0000\u0000\u0000\u0655\u0656\u0005\u008a\u0000\u0000\u0656\u0658"+
		"\u0003\u00b4Z\u0000\u0657\u0655\u0001\u0000\u0000\u0000\u0657\u0658\u0001"+
		"\u0000\u0000\u0000\u0658\u065b\u0001\u0000\u0000\u0000\u0659\u065a\u0005"+
		"\u0175\u0000\u0000\u065a\u065c\u0003\u0082A\u0000\u065b\u0659\u0001\u0000"+
		"\u0000\u0000\u065b\u065c\u0001\u0000\u0000\u0000\u065c\u066a\u0001\u0000"+
		"\u0000\u0000\u065d\u065e\u0005\u0091\u0000\u0000\u065e\u0660\u0005%\u0000"+
		"\u0000\u065f\u0661\u0005\u0005\u0000\u0000\u0660\u065f\u0001\u0000\u0000"+
		"\u0000\u0660\u0661\u0001\u0000\u0000\u0000\u0661\u0662\u0001\u0000\u0000"+
		"\u0000\u0662\u0667\u0003\u009eO\u0000\u0663\u0664\u0005\u0346\u0000\u0000"+
		"\u0664\u0666\u0003\u009eO\u0000\u0665\u0663\u0001\u0000\u0000\u0000\u0666"+
		"\u0669\u0001\u0000\u0000\u0000\u0667\u0665\u0001\u0000\u0000\u0000\u0667"+
		"\u0668\u0001\u0000\u0000\u0000\u0668\u066b\u0001\u0000\u0000\u0000\u0669"+
		"\u0667\u0001\u0000\u0000\u0000\u066a\u065d\u0001\u0000\u0000\u0000\u066a"+
		"\u066b\u0001\u0000\u0000\u0000\u066b\u066e\u0001\u0000\u0000\u0000\u066c"+
		"\u066d\u0005\u0092\u0000\u0000\u066d\u066f\u0003\u0082A\u0000\u066e\u066c"+
		"\u0001\u0000\u0000\u0000\u066e\u066f\u0001\u0000\u0000\u0000\u066f\u008f"+
		"\u0001\u0000\u0000\u0000\u0670\u0673\u0005\u015a\u0000\u0000\u0671\u0674"+
		"\u0003\u0092I\u0000\u0672\u0674\u0003\u0094J\u0000\u0673\u0671\u0001\u0000"+
		"\u0000\u0000\u0673\u0672\u0001\u0000\u0000\u0000\u0674\u0677\u0001\u0000"+
		"\u0000\u0000\u0675\u0676\u0005\u0178\u0000\u0000\u0676\u0678\u0005\u02f3"+
		"\u0000\u0000\u0677\u0675\u0001\u0000\u0000\u0000\u0677\u0678\u0001\u0000"+
		"\u0000\u0000\u0678\u0091\u0001\u0000\u0000\u0000\u0679\u067a\u0007\f\u0000"+
		"\u0000\u067a\u0681\u0005\u00f4\u0000\u0000\u067b\u067c\u0005\u0344\u0000"+
		"\u0000\u067c\u067d\u0003`0\u0000\u067d\u067e\u0005\u0345\u0000\u0000\u067e"+
		"\u067f\u0005\u00f4\u0000\u0000\u067f\u0681\u0001\u0000\u0000\u0000\u0680"+
		"\u0679\u0001\u0000\u0000\u0000\u0680\u067b\u0001\u0000\u0000\u0000\u0681"+
		"\u0093\u0001\u0000\u0000\u0000\u0682\u0688\u0005\u0327\u0000\u0000\u0683"+
		"\u0684\u0005\u0344\u0000\u0000\u0684\u0685\u0003`0\u0000\u0685\u0686\u0005"+
		"\u0345\u0000\u0000\u0686\u0688\u0001\u0000\u0000\u0000\u0687\u0682\u0001"+
		"\u0000\u0000\u0000\u0687\u0683\u0001\u0000\u0000\u0000\u0688\u0095\u0001"+
		"\u0000\u0000\u0000\u0689\u068a\u0005\u00ed\u0000\u0000\u068a\u068b\u0005"+
		"%\u0000\u0000\u068b\u0690\u0003\u009cN\u0000\u068c\u068d\u0005\u0346\u0000"+
		"\u0000\u068d\u068f\u0003\u009cN\u0000\u068e\u068c\u0001\u0000\u0000\u0000"+
		"\u068f\u0692\u0001\u0000\u0000\u0000\u0690\u068e\u0001\u0000\u0000\u0000"+
		"\u0690\u0691\u0001\u0000\u0000\u0000\u0691\u069e\u0001\u0000\u0000\u0000"+
		"\u0692\u0690\u0001\u0000\u0000\u0000\u0693\u0694\u0005\u0272\u0000\u0000"+
		"\u0694\u0695\u0003`0\u0000\u0695\u069c\u0007\r\u0000\u0000\u0696\u0697"+
		"\u0005\u007f\u0000\u0000\u0697\u0698\u0007\u000e\u0000\u0000\u0698\u0699"+
		"\u0003`0\u0000\u0699\u069a\u0007\r\u0000\u0000\u069a\u069b\u0005\u0275"+
		"\u0000\u0000\u069b\u069d\u0001\u0000\u0000\u0000\u069c\u0696\u0001\u0000"+
		"\u0000\u0000\u069c\u069d\u0001\u0000\u0000\u0000\u069d\u069f\u0001\u0000"+
		"\u0000\u0000\u069e\u0693\u0001\u0000\u0000\u0000\u069e\u069f\u0001\u0000"+
		"\u0000\u0000\u069f\u0097\u0001\u0000\u0000\u0000\u06a0\u06a1\u0005\u0084"+
		"\u0000\u0000\u06a1\u06f9\u0005!\u0000\u0000\u06a2\u06a3\u0005\u0084\u0000"+
		"\u0000\u06a3\u06ab\u0005\u0314\u0000\u0000\u06a4\u06a8\u0005\u0108\u0000"+
		"\u0000\u06a5\u06a6\u0005\u0344\u0000\u0000\u06a6\u06a7\u0005\u032b\u0000"+
		"\u0000\u06a7\u06a9\u0005\u0345\u0000\u0000\u06a8\u06a5\u0001\u0000\u0000"+
		"\u0000\u06a8\u06a9\u0001\u0000\u0000\u0000\u06a9\u06ac\u0001\u0000\u0000"+
		"\u0000\u06aa\u06ac\u0005\u0197\u0000\u0000\u06ab\u06a4\u0001\u0000\u0000"+
		"\u0000\u06ab\u06aa\u0001\u0000\u0000\u0000\u06ac\u06b0\u0001\u0000\u0000"+
		"\u0000\u06ad\u06af\u0003\u009aM\u0000\u06ae\u06ad\u0001\u0000\u0000\u0000"+
		"\u06af\u06b2\u0001\u0000\u0000\u0000\u06b0\u06ae\u0001\u0000\u0000\u0000"+
		"\u06b0\u06b1\u0001\u0000\u0000\u0000\u06b1\u06bd\u0001\u0000\u0000\u0000"+
		"\u06b2\u06b0\u0001\u0000\u0000\u0000\u06b3\u06bb\u0005\u0346\u0000\u0000"+
		"\u06b4\u06bc\u0005\u0315\u0000\u0000\u06b5\u06b9\u0005\u0317\u0000\u0000"+
		"\u06b6\u06b7\u0005\u0344\u0000\u0000\u06b7\u06b8\u0005\u032b\u0000\u0000"+
		"\u06b8\u06ba\u0005\u0345\u0000\u0000\u06b9\u06b6\u0001\u0000\u0000\u0000"+
		"\u06b9\u06ba\u0001\u0000\u0000\u0000\u06ba\u06bc\u0001\u0000\u0000\u0000"+
		"\u06bb\u06b4\u0001\u0000\u0000\u0000\u06bb\u06b5\u0001\u0000\u0000\u0000"+
		"\u06bc\u06be\u0001\u0000\u0000\u0000\u06bd\u06b3\u0001\u0000\u0000\u0000"+
		"\u06bd\u06be\u0001\u0000\u0000\u0000\u06be\u06c2\u0001\u0000\u0000\u0000"+
		"\u06bf\u06c0\u0005\u0346\u0000\u0000\u06c0\u06c1\u0005\u01e5\u0000\u0000"+
		"\u06c1\u06c3\u0007\u000f\u0000\u0000\u06c2\u06bf\u0001\u0000\u0000\u0000"+
		"\u06c2\u06c3\u0001\u0000\u0000\u0000\u06c3\u06f9\u0001\u0000\u0000\u0000"+
		"\u06c4\u06c5\u0005\u0084\u0000\u0000\u06c5\u06c6\u0005\u0314\u0000\u0000"+
		"\u06c6\u06ca\u0005\u01f3\u0000\u0000\u06c7\u06c9\u0003\u009aM\u0000\u06c8"+
		"\u06c7\u0001\u0000\u0000\u0000\u06c9\u06cc\u0001\u0000\u0000\u0000\u06ca"+
		"\u06c8\u0001\u0000\u0000\u0000\u06ca\u06cb\u0001\u0000\u0000\u0000\u06cb"+
		"\u06cf\u0001\u0000\u0000\u0000\u06cc\u06ca\u0001\u0000\u0000\u0000\u06cd"+
		"\u06ce\u0005\u0346\u0000\u0000\u06ce\u06d0\u0005\u0315\u0000\u0000\u06cf"+
		"\u06cd\u0001\u0000\u0000\u0000\u06cf\u06d0\u0001\u0000\u0000\u0000\u06d0"+
		"\u06f9\u0001\u0000\u0000\u0000\u06d1\u06d2\u0005\u0084\u0000\u0000\u06d2"+
		"\u06d3\u0005\u0314\u0000\u0000\u06d3\u06d7\u0005\u0282\u0000\u0000\u06d4"+
		"\u06d5\u0005\u0344\u0000\u0000\u06d5\u06d6\u0005\u032b\u0000\u0000\u06d6"+
		"\u06d8\u0005\u0345\u0000\u0000\u06d7\u06d4\u0001\u0000\u0000\u0000\u06d7"+
		"\u06d8\u0001\u0000\u0000\u0000\u06d8\u06dc\u0001\u0000\u0000\u0000\u06d9"+
		"\u06db\u0003\u009aM\u0000\u06da\u06d9\u0001\u0000\u0000\u0000\u06db\u06de"+
		"\u0001\u0000\u0000\u0000\u06dc\u06da\u0001\u0000\u0000\u0000\u06dc\u06dd"+
		"\u0001\u0000\u0000\u0000\u06dd\u06e2\u0001\u0000\u0000\u0000\u06de\u06dc"+
		"\u0001\u0000\u0000\u0000\u06df\u06e0\u0005\u0346\u0000\u0000\u06e0\u06e1"+
		"\u0005\u01e5\u0000\u0000\u06e1\u06e3\u0007\u000f\u0000\u0000\u06e2\u06df"+
		"\u0001\u0000\u0000\u0000\u06e2\u06e3\u0001\u0000\u0000\u0000\u06e3\u06f9"+
		"\u0001\u0000\u0000\u0000\u06e4\u06e5\u0005\u0084\u0000\u0000\u06e5\u06e6"+
		"\u0005\u0226\u0000\u0000\u06e6\u06ee\u0007\u0010\u0000\u0000\u06e7\u06e8"+
		"\u0005\u0346\u0000\u0000\u06e8\u06ec\u0005\u02b6\u0000\u0000\u06e9\u06ea"+
		"\u0005\u0344\u0000\u0000\u06ea\u06eb\u0005\u032b\u0000\u0000\u06eb\u06ed"+
		"\u0005\u0345\u0000\u0000\u06ec\u06e9\u0001\u0000\u0000\u0000\u06ec\u06ed"+
		"\u0001\u0000\u0000\u0000\u06ed\u06ef\u0001\u0000\u0000\u0000\u06ee\u06e7"+
		"\u0001\u0000\u0000\u0000\u06ee\u06ef\u0001\u0000\u0000\u0000\u06ef\u06f2"+
		"\u0001\u0000\u0000\u0000\u06f0\u06f1\u0005\u0346\u0000\u0000\u06f1\u06f3"+
		"\u0005\u021c\u0000\u0000\u06f2\u06f0\u0001\u0000\u0000\u0000\u06f2\u06f3"+
		"\u0001\u0000\u0000\u0000\u06f3\u06f6\u0001\u0000\u0000\u0000\u06f4\u06f5"+
		"\u0005\u0346\u0000\u0000\u06f5\u06f7\u0005\u0311\u0000\u0000\u06f6\u06f4"+
		"\u0001\u0000\u0000\u0000\u06f6\u06f7\u0001\u0000\u0000\u0000\u06f7\u06f9"+
		"\u0001\u0000\u0000\u0000\u06f8\u06a0\u0001\u0000\u0000\u0000\u06f8\u06a2"+
		"\u0001\u0000\u0000\u0000\u06f8\u06c4\u0001\u0000\u0000\u0000\u06f8\u06d1"+
		"\u0001\u0000\u0000\u0000\u06f8\u06e4\u0001\u0000\u0000\u0000\u06f9\u0099"+
		"\u0001\u0000\u0000\u0000\u06fa\u0703\u0005\u0346\u0000\u0000\u06fb\u0704"+
		"\u0005\u01a3\u0000\u0000\u06fc\u0704\u0005\u0300\u0000\u0000\u06fd\u0701"+
		"\u0005\u02b6\u0000\u0000\u06fe\u06ff\u0005\u0344\u0000\u0000\u06ff\u0700"+
		"\u0005\u032b\u0000\u0000\u0700\u0702\u0005\u0345\u0000\u0000\u0701\u06fe"+
		"\u0001\u0000\u0000\u0000\u0701\u0702\u0001\u0000\u0000\u0000\u0702\u0704"+
		"\u0001\u0000\u0000\u0000\u0703\u06fb\u0001\u0000\u0000\u0000\u0703\u06fc"+
		"\u0001\u0000\u0000\u0000\u0703\u06fd\u0001\u0000\u0000\u0000\u0704\u009b"+
		"\u0001\u0000\u0000\u0000\u0705\u0707\u0003`0\u0000\u0706\u0708\u0007\u0011"+
		"\u0000\u0000\u0707\u0706\u0001\u0000\u0000\u0000\u0707\u0708\u0001\u0000"+
		"\u0000\u0000\u0708\u009d\u0001\u0000\u0000\u0000\u0709\u070a\u0003`0\u0000"+
		"\u070a\u009f\u0001\u0000\u0000\u0000\u070b\u070c\u0005\u00eb\u0000\u0000"+
		"\u070c\u070d\u0005\u0344\u0000\u0000\u070d\u0712\u0003\u00a2Q\u0000\u070e"+
		"\u070f\u0005\u0346\u0000\u0000\u070f\u0711\u0003\u00a2Q\u0000\u0710\u070e"+
		"\u0001\u0000\u0000\u0000\u0711\u0714\u0001\u0000\u0000\u0000\u0712\u0710"+
		"\u0001\u0000\u0000\u0000\u0712\u0713\u0001\u0000\u0000\u0000\u0713\u0715"+
		"\u0001\u0000\u0000\u0000\u0714\u0712\u0001\u0000\u0000\u0000\u0715\u0716"+
		"\u0005\u0345\u0000\u0000\u0716\u00a1\u0001\u0000\u0000\u0000\u0717\u0718"+
		"\u0005\u01f8\u0000\u0000\u0718\u0745\u0005\u0327\u0000\u0000\u0719\u071a"+
		"\u0007\u0012\u0000\u0000\u071a\u0745\u0005\u0091\u0000\u0000\u071b\u071c"+
		"\u0007\u0013\u0000\u0000\u071c\u0745\u0005\u0163\u0000\u0000\u071d\u071e"+
		"\u0007\u0014\u0000\u0000\u071e\u0745\u0005\u00a9\u0000\u0000\u071f\u0720"+
		"\u0005\u01f1\u0000\u0000\u0720\u0745\u0005\u030e\u0000\u0000\u0721\u0722"+
		"\u0005\u0202\u0000\u0000\u0722\u0745\u0005\u00ed\u0000\u0000\u0723\u0745"+
		"\u0005\u0218\u0000\u0000\u0724\u0725\u0005\u0228\u0000\u0000\u0725\u0745"+
		"\u0005\u00fa\u0000\u0000\u0726\u0727\u0005\u0229\u0000\u0000\u0727\u0745"+
		"\u0005\u00fa\u0000\u0000\u0728\u0729\u0005\u0249\u0000\u0000\u0729\u0745"+
		"\u0005\u0327\u0000\u0000\u072a\u072b\u0005\u024a\u0000\u0000\u072b\u0745"+
		"\u0005\u0327\u0000\u0000\u072c\u072d\u0005\u0278\u0000\u0000\u072d\u072e"+
		"\u0005\u0084\u0000\u0000\u072e\u072f\u0005\u0344\u0000\u0000\u072f\u0734"+
		"\u0003\u00a4R\u0000\u0730\u0731\u0005\u0346\u0000\u0000\u0731\u0733\u0003"+
		"\u00a4R\u0000\u0732\u0730\u0001\u0000\u0000\u0000\u0733\u0736\u0001\u0000"+
		"\u0000\u0000\u0734\u0732\u0001\u0000\u0000\u0000\u0734\u0735\u0001\u0000"+
		"\u0000\u0000\u0735\u0737\u0001\u0000\u0000\u0000\u0736\u0734\u0001\u0000"+
		"\u0000\u0000\u0737\u0738\u0005\u0345\u0000\u0000\u0738\u0745\u0001\u0000"+
		"\u0000\u0000\u0739\u073a\u0005\u0278\u0000\u0000\u073a\u073b\u0005\u0084"+
		"\u0000\u0000\u073b\u0745\u0005\u0304\u0000\u0000\u073c\u073d\u0005\u027e"+
		"\u0000\u0000\u073d\u0745\u0007\u0015\u0000\u0000\u073e\u0745\u0005\u02a2"+
		"\u0000\u0000\u073f\u0740\u0005\u02b5\u0000\u0000\u0740\u0745\u0005\u00fa"+
		"\u0000\u0000\u0741\u0742\u0005\u016b\u0000\u0000\u0742\u0743\u0005\u00fa"+
		"\u0000\u0000\u0743\u0745\u0005\u032b\u0000\u0000\u0744\u0717\u0001\u0000"+
		"\u0000\u0000\u0744\u0719\u0001\u0000\u0000\u0000\u0744\u071b\u0001\u0000"+
		"\u0000\u0000\u0744\u071d\u0001\u0000\u0000\u0000\u0744\u071f\u0001\u0000"+
		"\u0000\u0000\u0744\u0721\u0001\u0000\u0000\u0000\u0744\u0723\u0001\u0000"+
		"\u0000\u0000\u0744\u0724\u0001\u0000\u0000\u0000\u0744\u0726\u0001\u0000"+
		"\u0000\u0000\u0744\u0728\u0001\u0000\u0000\u0000\u0744\u072a\u0001\u0000"+
		"\u0000\u0000\u0744\u072c\u0001\u0000\u0000\u0000\u0744\u0739\u0001\u0000"+
		"\u0000\u0000\u0744\u073c\u0001\u0000\u0000\u0000\u0744\u073e\u0001\u0000"+
		"\u0000\u0000\u0744\u073f\u0001\u0000\u0000\u0000\u0744\u0741\u0001\u0000"+
		"\u0000\u0000\u0745\u00a3\u0001\u0000\u0000\u0000\u0746\u074d\u0005\u0322"+
		"\u0000\u0000\u0747\u074e\u0005\u0304\u0000\u0000\u0748\u074b\u0005\u032f"+
		"\u0000\u0000\u0749\u074c\u0003\u0132\u0099\u0000\u074a\u074c\u0005\u00de"+
		"\u0000\u0000\u074b\u0749\u0001\u0000\u0000\u0000\u074b\u074a\u0001\u0000"+
		"\u0000\u0000\u074c\u074e\u0001\u0000\u0000\u0000\u074d\u0747\u0001\u0000"+
		"\u0000\u0000\u074d\u0748\u0001\u0000\u0000\u0000\u074e\u00a5\u0001\u0000"+
		"\u0000\u0000\u074f\u0754\u0003\u00b2Y\u0000\u0750\u0751\u0005\u0346\u0000"+
		"\u0000\u0751\u0753\u0003\u00b2Y\u0000\u0752\u0750\u0001\u0000\u0000\u0000"+
		"\u0753\u0756\u0001\u0000\u0000\u0000\u0754\u0752\u0001\u0000\u0000\u0000"+
		"\u0754\u0755\u0001\u0000\u0000\u0000\u0755\u00a7\u0001\u0000\u0000\u0000"+
		"\u0756\u0754\u0001\u0000\u0000\u0000\u0757\u0758\u0005\u0344\u0000\u0000"+
		"\u0758\u075d\u0003H$\u0000\u0759\u075a\u0005\u0346\u0000\u0000\u075a\u075c"+
		"\u0003H$\u0000\u075b\u0759\u0001\u0000\u0000\u0000\u075c\u075f\u0001\u0000"+
		"\u0000\u0000\u075d\u075b\u0001\u0000\u0000\u0000\u075d\u075e\u0001\u0000"+
		"\u0000\u0000\u075e\u0760\u0001\u0000\u0000\u0000\u075f\u075d\u0001\u0000"+
		"\u0000\u0000\u0760\u0761\u0005\u0345\u0000\u0000\u0761\u00a9\u0001\u0000"+
		"\u0000\u0000\u0762\u0763\u0003\u0112\u0089\u0000\u0763\u0764\u0005\u033f"+
		"\u0000\u0000\u0764\u0766\u0001\u0000\u0000\u0000\u0765\u0762\u0001\u0000"+
		"\u0000\u0000\u0765\u0766\u0001\u0000\u0000\u0000\u0766\u0767\u0001\u0000"+
		"\u0000\u0000\u0767\u0768\u0005\u0349\u0000\u0000\u0768\u00ab\u0001\u0000"+
		"\u0000\u0000\u0769\u076a\u0003\u0112\u0089\u0000\u076a\u076b\u0005\u033f"+
		"\u0000\u0000\u076b\u076d\u0001\u0000\u0000\u0000\u076c\u0769\u0001\u0000"+
		"\u0000\u0000\u076c\u076d\u0001\u0000\u0000\u0000\u076d\u0773\u0001\u0000"+
		"\u0000\u0000\u076e\u0774\u0003\u0136\u009b\u0000\u076f\u0770\u0005\u0343"+
		"\u0000\u0000\u0770\u0774\u0005\u0095\u0000\u0000\u0771\u0772\u0005\u0343"+
		"\u0000\u0000\u0772\u0774\u0005\u02ba\u0000\u0000\u0773\u076e\u0001\u0000"+
		"\u0000\u0000\u0773\u076f\u0001\u0000\u0000\u0000\u0773\u0771\u0001\u0000"+
		"\u0000\u0000\u0774\u0777\u0001\u0000\u0000\u0000\u0775\u0777\u0005\u00de"+
		"\u0000\u0000\u0776\u076c\u0001\u0000\u0000\u0000\u0776\u0775\u0001\u0000"+
		"\u0000\u0000\u0777\u0779\u0001\u0000\u0000\u0000\u0778\u077a\u0003\u00e6"+
		"s\u0000\u0779\u0778\u0001\u0000\u0000\u0000\u0779\u077a\u0001\u0000\u0000"+
		"\u0000\u077a\u00ad\u0001\u0000\u0000\u0000\u077b\u077c\u0003\u0136\u009b"+
		"\u0000\u077c\u077d\u0005\u033f\u0000\u0000\u077d\u077e\u0003\u0136\u009b"+
		"\u0000\u077e\u0780\u0003\u00a8T\u0000\u077f\u0781\u0003\u00e6s\u0000\u0780"+
		"\u077f\u0001\u0000\u0000\u0000\u0780\u0781\u0001\u0000\u0000\u0000\u0781"+
		"\u078d\u0001\u0000\u0000\u0000\u0782\u0783\u0003\u0136\u009b\u0000\u0783"+
		"\u0784\u0005\u0348\u0000\u0000\u0784\u0785\u0005\u0348\u0000\u0000\u0785"+
		"\u0787\u0003\u0136\u009b\u0000\u0786\u0788\u0003\u00a8T\u0000\u0787\u0786"+
		"\u0001\u0000\u0000\u0000\u0787\u0788\u0001\u0000\u0000\u0000\u0788\u078a"+
		"\u0001\u0000\u0000\u0000\u0789\u078b\u0003\u00e6s\u0000\u078a\u0789\u0001"+
		"\u0000\u0000\u0000\u078a\u078b\u0001\u0000\u0000\u0000\u078b\u078d\u0001"+
		"\u0000\u0000\u0000\u078c\u077b\u0001\u0000\u0000\u0000\u078c\u0782\u0001"+
		"\u0000\u0000\u0000\u078d\u00af\u0001\u0000\u0000\u0000\u078e\u078f\u0003"+
		"\u00f6{\u0000\u078f\u0790\u0005\u032f\u0000\u0000\u0790\u0791\u0003`0"+
		"\u0000\u0791\u0797\u0001\u0000\u0000\u0000\u0792\u0794\u0003`0\u0000\u0793"+
		"\u0795\u0003\u00e6s\u0000\u0794\u0793\u0001\u0000\u0000\u0000\u0794\u0795"+
		"\u0001\u0000\u0000\u0000\u0795\u0797\u0001\u0000\u0000\u0000\u0796\u078e"+
		"\u0001\u0000\u0000\u0000\u0796\u0792\u0001\u0000\u0000\u0000\u0797\u00b1"+
		"\u0001\u0000\u0000\u0000\u0798\u079d\u0003\u00aaU\u0000\u0799\u079d\u0003"+
		"\u00acV\u0000\u079a\u079d\u0003\u00aeW\u0000\u079b\u079d\u0003\u00b0X"+
		"\u0000\u079c\u0798\u0001\u0000\u0000\u0000\u079c\u0799\u0001\u0000\u0000"+
		"\u0000\u079c\u079a\u0001\u0000\u0000\u0000\u079c\u079b\u0001\u0000\u0000"+
		"\u0000\u079d\u00b3\u0001\u0000\u0000\u0000\u079e\u07a3\u0003\u00b6[\u0000"+
		"\u079f\u07a0\u0005\u0346\u0000\u0000\u07a0\u07a2\u0003\u00b6[\u0000\u07a1"+
		"\u079f\u0001\u0000\u0000\u0000\u07a2\u07a5\u0001\u0000\u0000\u0000\u07a3"+
		"\u07a1\u0001\u0000\u0000\u0000\u07a3\u07a4\u0001\u0000\u0000\u0000\u07a4"+
		"\u00b5\u0001\u0000\u0000\u0000\u07a5\u07a3\u0001\u0000\u0000\u0000\u07a6"+
		"\u07ac\u0003\u00b8\\\u0000\u07a7\u07a8\u0005\u0344\u0000\u0000\u07a8\u07a9"+
		"\u0003\u00b8\\\u0000\u07a9\u07aa\u0005\u0345\u0000\u0000\u07aa\u07ac\u0001"+
		"\u0000\u0000\u0000\u07ab\u07a6\u0001\u0000\u0000\u0000\u07ab\u07a7\u0001"+
		"\u0000\u0000\u0000\u07ac\u00b7\u0001\u0000\u0000\u0000\u07ad\u07b1\u0003"+
		"\u00ba]\u0000\u07ae\u07b0\u0003\u00c4b\u0000\u07af\u07ae\u0001\u0000\u0000"+
		"\u0000\u07b0\u07b3\u0001\u0000\u0000\u0000\u07b1\u07af\u0001\u0000\u0000"+
		"\u0000\u07b1\u07b2\u0001\u0000\u0000\u0000\u07b2\u00b9\u0001\u0000\u0000"+
		"\u0000\u07b3\u07b1\u0001\u0000\u0000\u0000\u07b4\u07b6\u0003\u00ccf\u0000"+
		"\u07b5\u07b7\u0003\u00e8t\u0000\u07b6\u07b5\u0001\u0000\u0000\u0000\u07b6"+
		"\u07b7\u0001\u0000\u0000\u0000\u07b7\u07ed\u0001\u0000\u0000\u0000\u07b8"+
		"\u07ba\u0003\u0110\u0088\u0000\u07b9\u07bb\u0003\u00e8t\u0000\u07ba\u07b9"+
		"\u0001\u0000\u0000\u0000\u07ba\u07bb\u0001\u0000\u0000\u0000\u07bb\u07ed"+
		"\u0001\u0000\u0000\u0000\u07bc\u07be\u0003\u00ceg\u0000\u07bd\u07bf\u0003"+
		"\u00e8t\u0000\u07be\u07bd\u0001\u0000\u0000\u0000\u07be\u07bf\u0001\u0000"+
		"\u0000\u0000\u07bf\u07ed\u0001\u0000\u0000\u0000\u07c0\u07c5\u0003\u00d2"+
		"i\u0000\u07c1\u07c3\u0003\u00e8t\u0000\u07c2\u07c4\u0003\u00f4z\u0000"+
		"\u07c3\u07c2\u0001\u0000\u0000\u0000\u07c3\u07c4\u0001\u0000\u0000\u0000"+
		"\u07c4\u07c6\u0001\u0000\u0000\u0000\u07c5\u07c1\u0001\u0000\u0000\u0000"+
		"\u07c5\u07c6\u0001\u0000\u0000\u0000\u07c6\u07ed\u0001\u0000\u0000\u0000"+
		"\u07c7\u07c8\u0003\u00c2a\u0000\u07c8\u07c9\u0003\u00e8t\u0000\u07c9\u07ed"+
		"\u0001\u0000\u0000\u0000\u07ca\u07cf\u0003\u00d4j\u0000\u07cb\u07cd\u0003"+
		"\u00e8t\u0000\u07cc\u07ce\u0003\u00f4z\u0000\u07cd\u07cc\u0001\u0000\u0000"+
		"\u0000\u07cd\u07ce\u0001\u0000\u0000\u0000\u07ce\u07d0\u0001\u0000\u0000"+
		"\u0000\u07cf\u07cb\u0001\u0000\u0000\u0000\u07cf\u07d0\u0001\u0000\u0000"+
		"\u0000\u07d0\u07ed\u0001\u0000\u0000\u0000\u07d1\u07d3\u0005\u0322\u0000"+
		"\u0000\u07d2\u07d4\u0003\u00e8t\u0000\u07d3\u07d2\u0001\u0000\u0000\u0000"+
		"\u07d3\u07d4\u0001\u0000\u0000\u0000\u07d4\u07ed\u0001\u0000\u0000\u0000"+
		"\u07d5\u07d6\u0005\u0322\u0000\u0000\u07d6\u07d7\u0005\u033f\u0000\u0000"+
		"\u07d7\u07dc\u0003\u00d4j\u0000\u07d8\u07da\u0003\u00e8t\u0000\u07d9\u07db"+
		"\u0003\u00f4z\u0000\u07da\u07d9\u0001\u0000\u0000\u0000\u07da\u07db\u0001"+
		"\u0000\u0000\u0000\u07db\u07dd\u0001\u0000\u0000\u0000\u07dc\u07d8\u0001"+
		"\u0000\u0000\u0000\u07dc\u07dd\u0001\u0000\u0000\u0000\u07dd\u07ed\u0001"+
		"\u0000\u0000\u0000\u07de\u07ed\u0003\u00bc^\u0000\u07df\u07e0\u0005\u0348"+
		"\u0000\u0000\u07e0\u07e1\u0005\u0348\u0000\u0000\u07e1\u07e3\u0003\u00d4"+
		"j\u0000\u07e2\u07e4\u0003\u00e8t\u0000\u07e3\u07e2\u0001\u0000\u0000\u0000"+
		"\u07e3\u07e4\u0001\u0000\u0000\u0000\u07e4\u07ed\u0001\u0000\u0000\u0000"+
		"\u07e5\u07e8\u0005\u0322\u0000\u0000\u07e6\u07e7\u0005\u033f\u0000\u0000"+
		"\u07e7\u07e9\u0003\u0138\u009c\u0000\u07e8\u07e6\u0001\u0000\u0000\u0000"+
		"\u07e8\u07e9\u0001\u0000\u0000\u0000\u07e9\u07ea\u0001\u0000\u0000\u0000"+
		"\u07ea\u07eb\u0005\u0348\u0000\u0000\u07eb\u07ed\u0005\u0108\u0000\u0000"+
		"\u07ec\u07b4\u0001\u0000\u0000\u0000\u07ec\u07b8\u0001\u0000\u0000\u0000"+
		"\u07ec\u07bc\u0001\u0000\u0000\u0000\u07ec\u07c0\u0001\u0000\u0000\u0000"+
		"\u07ec\u07c7\u0001\u0000\u0000\u0000\u07ec\u07ca\u0001\u0000\u0000\u0000"+
		"\u07ec\u07d1\u0001\u0000\u0000\u0000\u07ec\u07d5\u0001\u0000\u0000\u0000"+
		"\u07ec\u07de\u0001\u0000\u0000\u0000\u07ec\u07df\u0001\u0000\u0000\u0000"+
		"\u07ec\u07e5\u0001\u0000\u0000\u0000\u07ed\u00bb\u0001\u0000\u0000\u0000"+
		"\u07ee\u07ef\u0005\u00ea\u0000\u0000\u07ef\u07f0\u0005\u0344\u0000\u0000"+
		"\u07f0\u07f1\u0003`0\u0000\u07f1\u07f2\u0005\u0346\u0000\u0000\u07f2\u07f5"+
		"\u0003`0\u0000\u07f3\u07f4\u0005\u0346\u0000\u0000\u07f4\u07f6\u0003`"+
		"0\u0000\u07f5\u07f3\u0001\u0000\u0000\u0000\u07f5\u07f6\u0001\u0000\u0000"+
		"\u0000\u07f6\u07f7\u0001\u0000\u0000\u0000\u07f7\u07fd\u0005\u0345\u0000"+
		"\u0000\u07f8\u07f9\u0005\u0178\u0000\u0000\u07f9\u07fa\u0005\u0344\u0000"+
		"\u0000\u07fa\u07fb\u0003\u00be_\u0000\u07fb\u07fc\u0005\u0345\u0000\u0000"+
		"\u07fc\u07fe\u0001\u0000\u0000\u0000\u07fd\u07f8\u0001\u0000\u0000\u0000"+
		"\u07fd\u07fe\u0001\u0000\u0000\u0000\u07fe\u00bd\u0001\u0000\u0000\u0000"+
		"\u07ff\u0804\u0003\u00c0`\u0000\u0800\u0801\u0005\u0346\u0000\u0000\u0801"+
		"\u0803\u0003\u00c0`\u0000\u0802\u0800\u0001\u0000\u0000\u0000\u0803\u0806"+
		"\u0001\u0000\u0000\u0000\u0804\u0802\u0001\u0000\u0000\u0000\u0804\u0805"+
		"\u0001\u0000\u0000\u0000\u0805\u00bf\u0001\u0000\u0000\u0000\u0806\u0804"+
		"\u0001\u0000\u0000\u0000\u0807\u0808\u0005\u0328\u0000\u0000\u0808\u080a"+
		"\u0003\u0130\u0098\u0000\u0809\u080b\u0005\u032b\u0000\u0000\u080a\u0809"+
		"\u0001\u0000\u0000\u0000\u080a\u080b\u0001\u0000\u0000\u0000\u080b\u00c1"+
		"\u0001\u0000\u0000\u0000\u080c\u080d\u0005+\u0000\u0000\u080d\u080e\u0005"+
		"\u0344\u0000\u0000\u080e\u080f\u0005,\u0000\u0000\u080f\u0810\u0003\u0112"+
		"\u0089\u0000\u0810\u0811\u0005\u0346\u0000\u0000\u0811\u0812\u0007\u0016"+
		"\u0000\u0000\u0812\u0813\u0005\u0345\u0000\u0000\u0813\u00c3\u0001\u0000"+
		"\u0000\u0000\u0814\u0816\u0005\u00a0\u0000\u0000\u0815\u0814\u0001\u0000"+
		"\u0000\u0000\u0815\u0816\u0001\u0000\u0000\u0000\u0816\u081c\u0001\u0000"+
		"\u0000\u0000\u0817\u0819\u0007\u0017\u0000\u0000\u0818\u081a\u0005\u00ee"+
		"\u0000\u0000\u0819\u0818\u0001\u0000\u0000\u0000\u0819\u081a\u0001\u0000"+
		"\u0000\u0000\u081a\u081c\u0001\u0000\u0000\u0000\u081b\u0815\u0001\u0000"+
		"\u0000\u0000\u081b\u0817\u0001\u0000\u0000\u0000\u081c\u081e\u0001\u0000"+
		"\u0000\u0000\u081d\u081f\u0007\u0018\u0000\u0000\u081e\u081d\u0001\u0000"+
		"\u0000\u0000\u081e\u081f\u0001\u0000\u0000\u0000\u081f\u0820\u0001\u0000"+
		"\u0000\u0000\u0820\u0821\u0005\u00a9\u0000\u0000\u0821\u0822\u0003\u00b6"+
		"[\u0000\u0822\u0823\u0005\u00e4\u0000\u0000\u0823\u0824\u0003\u0082A\u0000"+
		"\u0824\u0837\u0001\u0000\u0000\u0000\u0825\u0826\u0005I\u0000\u0000\u0826"+
		"\u0827\u0005\u00a9\u0000\u0000\u0827\u0837\u0003\u00b6[\u0000\u0828\u0829"+
		"\u0005I\u0000\u0000\u0829\u082a\u0005\u0192\u0000\u0000\u082a\u0837\u0003"+
		"\u00b6[\u0000\u082b\u082c\u0005\u00ee\u0000\u0000\u082c\u082d\u0005\u0192"+
		"\u0000\u0000\u082d\u0837\u0003\u00b6[\u0000\u082e\u082f\u0005\u00f9\u0000"+
		"\u0000\u082f\u0830\u0003\u00c6c\u0000\u0830\u0831\u0003\u00e8t\u0000\u0831"+
		"\u0837\u0001\u0000\u0000\u0000\u0832\u0833\u0005\u0166\u0000\u0000\u0833"+
		"\u0834\u0003\u00c8d\u0000\u0834\u0835\u0003\u00e8t\u0000\u0835\u0837\u0001"+
		"\u0000\u0000\u0000\u0836\u081b\u0001\u0000\u0000\u0000\u0836\u0825\u0001"+
		"\u0000\u0000\u0000\u0836\u0828\u0001\u0000\u0000\u0000\u0836\u082b\u0001"+
		"\u0000\u0000\u0000\u0836\u082e\u0001\u0000\u0000\u0000\u0836\u0832\u0001"+
		"\u0000\u0000\u0000\u0837\u00c5\u0001\u0000\u0000\u0000\u0838\u0839\u0005"+
		"\u0344\u0000\u0000\u0839\u083a\u0003\u00fe\u007f\u0000\u083a\u083b\u0005"+
		"\u0084\u0000\u0000\u083b\u083c\u0003\u011e\u008f\u0000\u083c\u083d\u0005"+
		"\u009a\u0000\u0000\u083d\u083e\u0003\u00f4z\u0000\u083e\u083f\u0005\u0345"+
		"\u0000\u0000\u083f\u00c7\u0001\u0000\u0000\u0000\u0840\u0841\u0005\u0344"+
		"\u0000\u0000\u0841\u0842\u0003`0\u0000\u0842\u0843\u0005\u0084\u0000\u0000"+
		"\u0843\u0844\u0003\u011e\u008f\u0000\u0844\u0845\u0005\u009a\u0000\u0000"+
		"\u0845\u0846\u0005\u0344\u0000\u0000\u0846\u0847\u0003\u00cae\u0000\u0847"+
		"\u0848\u0005\u0345\u0000\u0000\u0848\u0849\u0005\u0345\u0000\u0000\u0849"+
		"\u00c9\u0001\u0000\u0000\u0000\u084a\u084f\u0003\u011e\u008f\u0000\u084b"+
		"\u084c\u0005\u0346\u0000\u0000\u084c\u084e\u0003\u011e\u008f\u0000\u084d"+
		"\u084b\u0001\u0000\u0000\u0000\u084e\u0851\u0001\u0000\u0000\u0000\u084f"+
		"\u084d\u0001\u0000\u0000\u0000\u084f\u0850\u0001\u0000\u0000\u0000\u0850"+
		"\u00cb\u0001\u0000\u0000\u0000\u0851\u084f\u0001\u0000\u0000\u0000\u0852"+
		"\u0854\u0003\u0112\u0089\u0000\u0853\u0855\u0003\u00ecv\u0000\u0854\u0853"+
		"\u0001\u0000\u0000\u0000\u0854\u0855\u0001\u0000\u0000\u0000\u0855\u00cd"+
		"\u0001\u0000\u0000\u0000\u0856\u0857\u0005\u00e9\u0000\u0000\u0857\u0858"+
		"\u0005\u0344\u0000\u0000\u0858\u0859\u0005\u032b\u0000\u0000\u0859\u085a"+
		"\u0005\u0346\u0000\u0000\u085a\u085b\u0005\u032b\u0000\u0000\u085b\u085c"+
		"\u0005\u0346\u0000\u0000\u085c\u085d\u0005\u032b\u0000\u0000\u085d\u0871"+
		"\u0005\u0345\u0000\u0000\u085e\u085f\u0005\u00e9\u0000\u0000\u085f\u0860"+
		"\u0005\u0344\u0000\u0000\u0860\u0861\u0005$\u0000\u0000\u0861\u0862\u0005"+
		"\u032b\u0000\u0000\u0862\u086c\u0005\u0346\u0000\u0000\u0863\u0868\u0003"+
		"\u00d0h\u0000\u0864\u0865\u0005\u0346\u0000\u0000\u0865\u0867\u0003\u00d0"+
		"h\u0000\u0866\u0864\u0001\u0000\u0000\u0000\u0867\u086a\u0001\u0000\u0000"+
		"\u0000\u0868\u0866\u0001\u0000\u0000\u0000\u0868\u0869\u0001\u0000\u0000"+
		"\u0000\u0869\u086d\u0001\u0000\u0000\u0000\u086a\u0868\u0001\u0000\u0000"+
		"\u0000\u086b\u086d\u0003\u0136\u009b\u0000\u086c\u0863\u0001\u0000\u0000"+
		"\u0000\u086c\u086b\u0001\u0000\u0000\u0000\u086d\u086e\u0001\u0000\u0000"+
		"\u0000\u086e\u086f\u0005\u0345\u0000\u0000\u086f\u0871\u0001\u0000\u0000"+
		"\u0000\u0870\u0856\u0001\u0000\u0000\u0000\u0870\u085e\u0001\u0000\u0000"+
		"\u0000\u0871\u00cf\u0001\u0000\u0000\u0000\u0872\u0873\u0003\u0136\u009b"+
		"\u0000\u0873\u0874\u0005\u032f\u0000\u0000\u0874\u0875\u0007\u0019\u0000"+
		"\u0000\u0875\u00d1\u0001\u0000\u0000\u0000\u0876\u0881\u0003x<\u0000\u0877"+
		"\u0878\u0005\u0344\u0000\u0000\u0878\u0879\u0003x<\u0000\u0879\u087a\u0005"+
		"\u0345\u0000\u0000\u087a\u0881\u0001\u0000\u0000\u0000\u087b\u0881\u0003"+
		"\u00f8|\u0000\u087c\u087d\u0005\u0344\u0000\u0000\u087d\u087e\u0003\u00f8"+
		"|\u0000\u087e\u087f\u0005\u0345\u0000\u0000\u087f\u0881\u0001\u0000\u0000"+
		"\u0000\u0880\u0876\u0001\u0000\u0000\u0000\u0880\u0877\u0001\u0000\u0000"+
		"\u0000\u0880\u087b\u0001\u0000\u0000\u0000\u0880\u087c\u0001\u0000\u0000"+
		"\u0000\u0881\u00d3\u0001\u0000\u0000\u0000\u0882\u0883\u0005\u01a4\u0000"+
		"\u0000\u0883\u0884\u0005\u0344\u0000\u0000\u0884\u0885\u0005\u0349\u0000"+
		"\u0000\u0885\u0915\u0005\u0345\u0000\u0000\u0886\u0887\u0005\u01ac\u0000"+
		"\u0000\u0887\u0888\u0005\u0344\u0000\u0000\u0888\u0889\u0003`0\u0000\u0889"+
		"\u088a\u0005\u000f\u0000\u0000\u088a\u088b\u0003\u0130\u0098\u0000\u088b"+
		"\u088c\u0005\u0345\u0000\u0000\u088c\u0915\u0001\u0000\u0000\u0000\u088d"+
		"\u088e\u0005F\u0000\u0000\u088e\u088f\u0005\u0344\u0000\u0000\u088f\u0890"+
		"\u0003\u0130\u0098\u0000\u0890\u0891\u0005\u0346\u0000\u0000\u0891\u0894"+
		"\u0003`0\u0000\u0892\u0893\u0005\u0346\u0000\u0000\u0893\u0895\u0003`"+
		"0\u0000\u0894\u0892\u0001\u0000\u0000\u0000\u0894\u0895\u0001\u0000\u0000"+
		"\u0000\u0895\u0896\u0001\u0000\u0000\u0000\u0896\u0897\u0005\u0345\u0000"+
		"\u0000\u0897\u0915\u0001\u0000\u0000\u0000\u0898\u0899\u0005\u01b1\u0000"+
		"\u0000\u0899\u089a\u0005\u0344\u0000\u0000\u089a\u089b\u0005\u0349\u0000"+
		"\u0000\u089b\u0915\u0005\u0345\u0000\u0000\u089c\u089d\u00055\u0000\u0000"+
		"\u089d\u089e\u0005\u0344\u0000\u0000\u089e\u089f\u0003\u00fa}\u0000\u089f"+
		"\u08a0\u0005\u0345\u0000\u0000\u08a0\u0915\u0001\u0000\u0000\u0000\u08a1"+
		"\u0915\u0005M\u0000\u0000\u08a2\u0915\u0005N\u0000\u0000\u08a3\u08a4\u0005"+
		"\u01c9\u0000\u0000\u08a4\u08a5\u0005\u0344\u0000\u0000\u08a5\u08a6\u0005"+
		"\u0328\u0000\u0000\u08a6\u08a7\u0005\u0346\u0000\u0000\u08a7\u08a8\u0003"+
		"`0\u0000\u08a8\u08a9\u0005\u0346\u0000\u0000\u08a9\u08aa\u0003`0\u0000"+
		"\u08aa\u08ab\u0005\u0345\u0000\u0000\u08ab\u0915\u0001\u0000\u0000\u0000"+
		"\u08ac\u08ad\u0005\u01ca\u0000\u0000\u08ad\u08ae\u0005\u0344\u0000\u0000"+
		"\u08ae\u08af\u0005\u0328\u0000\u0000\u08af\u08b0\u0005\u0346\u0000\u0000"+
		"\u08b0\u08b1\u0003`0\u0000\u08b1\u08b2\u0005\u0346";
	private static final String _serializedATNSegment1 =
		"\u0000\u0000\u08b2\u08b3\u0003`0\u0000\u08b3\u08b4\u0005\u0345\u0000\u0000"+
		"\u08b4\u0915\u0001\u0000\u0000\u0000\u08b5\u08b6\u0005\u01cb\u0000\u0000"+
		"\u08b6\u08b7\u0005\u0344\u0000\u0000\u08b7\u08b8\u0005\u0328\u0000\u0000"+
		"\u08b8\u08b9\u0005\u0346\u0000\u0000\u08b9\u08ba\u0003`0\u0000\u08ba\u08bb"+
		"\u0005\u0345\u0000\u0000\u08bb\u0915\u0001\u0000\u0000\u0000\u08bc\u08bd"+
		"\u0005\u01cc\u0000\u0000\u08bd\u08be\u0005\u0344\u0000\u0000\u08be\u08bf"+
		"\u0005\u0328\u0000\u0000\u08bf\u08c0\u0005\u0346\u0000\u0000\u08c0\u08c1"+
		"\u0003`0\u0000\u08c1\u08c2\u0005\u0345\u0000\u0000\u08c2\u0915\u0001\u0000"+
		"\u0000\u0000\u08c3\u08c4\u0005\u020a\u0000\u0000\u08c4\u08c5\u0005\u0344"+
		"\u0000\u0000\u08c5\u0915\u0005\u0345\u0000\u0000\u08c6\u08c7\u0005\u020b"+
		"\u0000\u0000\u08c7\u08c8\u0005\u0344\u0000\u0000\u08c8\u0915\u0005\u0345"+
		"\u0000\u0000\u08c9\u08ca\u0005\u0095\u0000\u0000\u08ca\u08cb\u0005\u0344"+
		"\u0000\u0000\u08cb\u08ce\u0003\u0130\u0098\u0000\u08cc\u08cd\u0005\u0346"+
		"\u0000\u0000\u08cd\u08cf\u0005\u0327\u0000\u0000\u08ce\u08cc\u0001\u0000"+
		"\u0000\u0000\u08ce\u08cf\u0001\u0000\u0000\u0000\u08cf\u08d2\u0001\u0000"+
		"\u0000\u0000\u08d0\u08d1\u0005\u0346\u0000\u0000\u08d1\u08d3\u0005\u0327"+
		"\u0000\u0000\u08d2\u08d0\u0001\u0000\u0000\u0000\u08d2\u08d3\u0001\u0000"+
		"\u0000\u0000\u08d3\u08d4\u0001\u0000\u0000\u0000\u08d4\u08d5\u0005\u0345"+
		"\u0000\u0000\u08d5\u0915\u0001\u0000\u0000\u0000\u08d6\u0915\u0005\u0251"+
		"\u0000\u0000\u08d7\u08d8\u0005\u00df\u0000\u0000\u08d8\u08d9\u0005\u0344"+
		"\u0000\u0000\u08d9\u08da\u0003`0\u0000\u08da\u08db\u0005\u0346\u0000\u0000"+
		"\u08db\u08dc\u0003`0\u0000\u08dc\u08dd\u0005\u0345\u0000\u0000\u08dd\u0915"+
		"\u0001\u0000\u0000\u0000\u08de\u08df\u0005\u02e5\u0000\u0000\u08df\u08e0"+
		"\u0005\u0344\u0000\u0000\u08e0\u08e1\u0003`0\u0000\u08e1\u08e2\u0005\u0346"+
		"\u0000\u0000\u08e2\u08e3\u0005\u0327\u0000\u0000\u08e3\u08e4\u0005\u0346"+
		"\u0000\u0000\u08e4\u08e5\u0005\u0327\u0000\u0000\u08e5\u08e6\u0005\u0346"+
		"\u0000\u0000\u08e6\u08e7\u0003`0\u0000\u08e7\u08e8\u0005\u0345\u0000\u0000"+
		"\u08e8\u0915\u0001\u0000\u0000\u0000\u08e9\u0915\u0005\u0139\u0000\u0000"+
		"\u08ea\u0915\u0005\u0151\u0000\u0000\u08eb\u08ec\u0005\u00a8\u0000\u0000"+
		"\u08ec\u08ed\u0005\u0344\u0000\u0000\u08ed\u08ee\u0003`0\u0000\u08ee\u08ef"+
		"\u0005\u0346\u0000\u0000\u08ef\u08f0\u0003`0\u0000\u08f0\u08f1\u0005\u0345"+
		"\u0000\u0000\u08f1\u0915\u0001\u0000\u0000\u0000\u08f2\u0915\u0003\u00d6"+
		"k\u0000\u08f3\u08f4\u0005\u0099\u0000\u0000\u08f4\u08f5\u0005\u0344\u0000"+
		"\u0000\u08f5\u08f6\u0003\u0082A\u0000\u08f6\u08f7\u0005\u0346\u0000\u0000"+
		"\u08f7\u08f8\u0003`0\u0000\u08f8\u08f9\u0005\u0346\u0000\u0000\u08f9\u08fa"+
		"\u0003`0\u0000\u08fa\u08fb\u0005\u0345\u0000\u0000\u08fb\u0915\u0001\u0000"+
		"\u0000\u0000\u08fc\u0915\u0003\u00fc~\u0000\u08fd\u0915\u0003\u00fe\u007f"+
		"\u0000\u08fe\u0915\u0003\u0100\u0080\u0000\u08ff\u0900\u0003\u012e\u0097"+
		"\u0000\u0900\u0902\u0005\u0344\u0000\u0000\u0901\u0903\u0003\u00fa}\u0000"+
		"\u0902\u0901\u0001\u0000\u0000\u0000\u0902\u0903\u0001\u0000\u0000\u0000"+
		"\u0903\u0904\u0001\u0000\u0000\u0000\u0904\u0905\u0005\u0345\u0000\u0000"+
		"\u0905\u0915\u0001\u0000\u0000\u0000\u0906\u0907\u0005\u02e4\u0000\u0000"+
		"\u0907\u0908\u0005\u0344\u0000\u0000\u0908\u0909\u0003`0\u0000\u0909\u090a"+
		"\u0005\u0346\u0000\u0000\u090a\u090b\u0003`0\u0000\u090b\u0912\u0005\u0345"+
		"\u0000\u0000\u090c\u090d\u0005\u0179\u0000\u0000\u090d\u090e\u0005\u0091"+
		"\u0000\u0000\u090e\u090f\u0005\u0344\u0000\u0000\u090f\u0910\u0003\u0096"+
		"K\u0000\u0910\u0911\u0005\u0345\u0000\u0000\u0911\u0913\u0001\u0000\u0000"+
		"\u0000\u0912\u090c\u0001\u0000\u0000\u0000\u0912\u0913\u0001\u0000\u0000"+
		"\u0000\u0913\u0915\u0001\u0000\u0000\u0000\u0914\u0882\u0001\u0000\u0000"+
		"\u0000\u0914\u0886\u0001\u0000\u0000\u0000\u0914\u088d\u0001\u0000\u0000"+
		"\u0000\u0914\u0898\u0001\u0000\u0000\u0000\u0914\u089c\u0001\u0000\u0000"+
		"\u0000\u0914\u08a1\u0001\u0000\u0000\u0000\u0914\u08a2\u0001\u0000\u0000"+
		"\u0000\u0914\u08a3\u0001\u0000\u0000\u0000\u0914\u08ac\u0001\u0000\u0000"+
		"\u0000\u0914\u08b5\u0001\u0000\u0000\u0000\u0914\u08bc\u0001\u0000\u0000"+
		"\u0000\u0914\u08c3\u0001\u0000\u0000\u0000\u0914\u08c6\u0001\u0000\u0000"+
		"\u0000\u0914\u08c9\u0001\u0000\u0000\u0000\u0914\u08d6\u0001\u0000\u0000"+
		"\u0000\u0914\u08d7\u0001\u0000\u0000\u0000\u0914\u08de\u0001\u0000\u0000"+
		"\u0000\u0914\u08e9\u0001\u0000\u0000\u0000\u0914\u08ea\u0001\u0000\u0000"+
		"\u0000\u0914\u08eb\u0001\u0000\u0000\u0000\u0914\u08f2\u0001\u0000\u0000"+
		"\u0000\u0914\u08f3\u0001\u0000\u0000\u0000\u0914\u08fc\u0001\u0000\u0000"+
		"\u0000\u0914\u08fd\u0001\u0000\u0000\u0000\u0914\u08fe\u0001\u0000\u0000"+
		"\u0000\u0914\u08ff\u0001\u0000\u0000\u0000\u0914\u0906\u0001\u0000\u0000"+
		"\u0000\u0915\u00d5\u0001\u0000\u0000\u0000\u0916\u091c\u0003\u00d8l\u0000"+
		"\u0917\u091c\u0003\u00dam\u0000\u0918\u091c\u0003\u00dcn\u0000\u0919\u091c"+
		"\u0003\u00deo\u0000\u091a\u091c\u0003\u00e0p\u0000\u091b\u0916\u0001\u0000"+
		"\u0000\u0000\u091b\u0917\u0001\u0000\u0000\u0000\u091b\u0918\u0001\u0000"+
		"\u0000\u0000\u091b\u0919\u0001\u0000\u0000\u0000\u091b\u091a\u0001\u0000"+
		"\u0000\u0000\u091c\u00d7\u0001\u0000\u0000\u0000\u091d\u0922\u0005\u0322"+
		"\u0000\u0000\u091e\u0922\u0005\u0328\u0000\u0000\u091f\u0922\u0005q\u0000"+
		"\u0000\u0920\u0922\u0003\u00dam\u0000\u0921\u091d\u0001\u0000\u0000\u0000"+
		"\u0921\u091e\u0001\u0000\u0000\u0000\u0921\u091f\u0001\u0000\u0000\u0000"+
		"\u0921\u0920\u0001\u0000\u0000\u0000\u0922\u0923\u0001\u0000\u0000\u0000"+
		"\u0923\u0924\u0005\u033f\u0000\u0000\u0924\u0925\u0005\u030a\u0000\u0000"+
		"\u0925\u0926\u0005\u0344\u0000\u0000\u0926\u0927\u0005\u032b\u0000\u0000"+
		"\u0927\u0928\u0005\u0346\u0000\u0000\u0928\u0929\u0005\u032b\u0000\u0000"+
		"\u0929\u0949\u0005\u0345\u0000\u0000\u092a\u092f\u0005\u0322\u0000\u0000"+
		"\u092b\u092f\u0005\u0328\u0000\u0000\u092c\u092f\u0005q\u0000\u0000\u092d"+
		"\u092f\u0003\u00dam\u0000\u092e\u092a\u0001\u0000\u0000\u0000\u092e\u092b"+
		"\u0001\u0000\u0000\u0000\u092e\u092c\u0001\u0000\u0000\u0000\u092e\u092d"+
		"\u0001\u0000\u0000\u0000\u092f\u0930\u0001\u0000\u0000\u0000\u0930\u0931"+
		"\u0005\u033f\u0000\u0000\u0931\u0932\u0005\u02b8\u0000\u0000\u0932\u0933"+
		"\u0005\u033f\u0000\u0000\u0933\u0934\u0005\u030a\u0000\u0000\u0934\u0935"+
		"\u0005\u0344\u0000\u0000\u0935\u0936\u0005\u032b\u0000\u0000\u0936\u0937"+
		"\u0005\u0346\u0000\u0000\u0937\u0938\u0005\u032b\u0000\u0000\u0938\u0949"+
		"\u0005\u0345\u0000\u0000\u0939\u093e\u0005\u0322\u0000\u0000\u093a\u093e"+
		"\u0005\u0328\u0000\u0000\u093b\u093e\u0005q\u0000\u0000\u093c\u093e\u0003"+
		"\u00dam\u0000\u093d\u0939\u0001\u0000\u0000\u0000\u093d\u093a\u0001\u0000"+
		"\u0000\u0000\u093d\u093b\u0001\u0000\u0000\u0000\u093d\u093c\u0001\u0000"+
		"\u0000\u0000\u093e\u093f\u0001\u0000\u0000\u0000\u093f\u0940\u0005\u033f"+
		"\u0000\u0000\u0940\u0941\u0005\u00f1\u0000\u0000\u0941\u0942\u0005\u033f"+
		"\u0000\u0000\u0942\u0943\u0005\u030a\u0000\u0000\u0943\u0944\u0005\u0344"+
		"\u0000\u0000\u0944\u0945\u0005\u032b\u0000\u0000\u0945\u0946\u0005\u0346"+
		"\u0000\u0000\u0946\u0947\u0005\u032b\u0000\u0000\u0947\u0949\u0005\u0345"+
		"\u0000\u0000\u0948\u0921\u0001\u0000\u0000\u0000\u0948\u092e\u0001\u0000"+
		"\u0000\u0000\u0948\u093d\u0001\u0000\u0000\u0000\u0949\u00d9\u0001\u0000"+
		"\u0000\u0000\u094a\u094e\u0005\u0322\u0000\u0000\u094b\u094e\u0005\u0328"+
		"\u0000\u0000\u094c\u094e\u0003\u0110\u0088\u0000\u094d\u094a\u0001\u0000"+
		"\u0000\u0000\u094d\u094b\u0001\u0000\u0000\u0000\u094d\u094c\u0001\u0000"+
		"\u0000\u0000\u094e\u094f\u0001\u0000\u0000\u0000\u094f\u0950\u0005\u033f"+
		"\u0000\u0000\u0950\u0951\u0005\u0292\u0000\u0000\u0951\u0952\u0005\u0344"+
		"\u0000\u0000\u0952\u0953\u0005\u032b\u0000\u0000\u0953\u0961\u0005\u0345"+
		"\u0000\u0000\u0954\u0958\u0005\u0322\u0000\u0000\u0955\u0958\u0005\u0328"+
		"\u0000\u0000\u0956\u0958\u0003\u0110\u0088\u0000\u0957\u0954\u0001\u0000"+
		"\u0000\u0000\u0957\u0955\u0001\u0000\u0000\u0000\u0957\u0956\u0001\u0000"+
		"\u0000\u0000\u0958\u0959\u0001\u0000\u0000\u0000\u0959\u095a\u0005\u033f"+
		"\u0000\u0000\u095a\u095b\u0005\u02b8\u0000\u0000\u095b\u095c\u0005\u033f"+
		"\u0000\u0000\u095c\u095d\u0005\u0292\u0000\u0000\u095d\u095e\u0005\u0344"+
		"\u0000\u0000\u095e\u095f\u0005\u032b\u0000\u0000\u095f\u0961\u0005\u0345"+
		"\u0000\u0000\u0960\u094d\u0001\u0000\u0000\u0000\u0960\u0957\u0001\u0000"+
		"\u0000\u0000\u0961\u00db\u0001\u0000\u0000\u0000\u0962\u0963\u0007\u001a"+
		"\u0000\u0000\u0963\u0964\u0005\u033f\u0000\u0000\u0964\u0965\u0005\u01f0"+
		"\u0000\u0000\u0965\u0966\u0005\u0344\u0000\u0000\u0966\u0967\u0005\u032b"+
		"\u0000\u0000\u0967\u0968\u0005\u0345\u0000\u0000\u0968\u00dd\u0001\u0000"+
		"\u0000\u0000\u0969\u096a\u0007\u001a\u0000\u0000\u096a\u096b\u0005\u033f"+
		"\u0000\u0000\u096b\u096c\u0005\u0259\u0000\u0000\u096c\u096d\u0005\u0344"+
		"\u0000\u0000\u096d\u096e\u0005\u032b\u0000\u0000\u096e\u096f\u0005\u0345"+
		"\u0000\u0000\u096f\u00df\u0001\u0000\u0000\u0000\u0970\u0971\u0007\u001a"+
		"\u0000\u0000\u0971\u0972\u0005\u033f\u0000\u0000\u0972\u0973\u0005\u0266"+
		"\u0000\u0000\u0973\u0974\u0005\u0344\u0000\u0000\u0974\u0975\u0005\u032b"+
		"\u0000\u0000\u0975\u0976\u0005\u0345\u0000\u0000\u0976\u00e1\u0001\u0000"+
		"\u0000\u0000\u0977\u0978\u0005\u0174\u0000\u0000\u0978\u0979\u0003`0\u0000"+
		"\u0979\u097a\u0005\u0158\u0000\u0000\u097a\u097b\u0003`0\u0000\u097b\u00e3"+
		"\u0001\u0000\u0000\u0000\u097c\u097d\u0005\u0174\u0000\u0000\u097d\u097e"+
		"\u0003\u0082A\u0000\u097e\u097f\u0005\u0158\u0000\u0000\u097f\u0980\u0003"+
		"`0\u0000\u0980\u00e5\u0001\u0000\u0000\u0000\u0981\u0983\u0005\u000f\u0000"+
		"\u0000\u0982\u0981\u0001\u0000\u0000\u0000\u0982\u0983\u0001\u0000\u0000"+
		"\u0000\u0983\u0984\u0001\u0000\u0000\u0000\u0984\u0985\u0003\u00f6{\u0000"+
		"\u0985\u00e7\u0001\u0000\u0000\u0000\u0986\u0988\u0005\u000f\u0000\u0000"+
		"\u0987\u0986\u0001\u0000\u0000\u0000\u0987\u0988\u0001\u0000\u0000\u0000"+
		"\u0988\u0989\u0001\u0000\u0000\u0000\u0989\u098a\u0003\u00eau\u0000\u098a"+
		"\u00e9\u0001\u0000\u0000\u0000\u098b\u098d\u0003\u0136\u009b\u0000\u098c"+
		"\u098e\u0003\u00ecv\u0000\u098d\u098c\u0001\u0000\u0000\u0000\u098d\u098e"+
		"\u0001\u0000\u0000\u0000\u098e\u00eb\u0001\u0000\u0000\u0000\u098f\u0991"+
		"\u0005\u0178\u0000\u0000\u0990\u098f\u0001\u0000\u0000\u0000\u0990\u0991"+
		"\u0001\u0000\u0000\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992\u0993"+
		"\u0005\u0344\u0000\u0000\u0993\u099a\u0003\u00f0x\u0000\u0994\u0996\u0005"+
		"\u0346\u0000\u0000\u0995\u0994\u0001\u0000\u0000\u0000\u0995\u0996\u0001"+
		"\u0000\u0000\u0000\u0996\u0997\u0001\u0000\u0000\u0000\u0997\u0999\u0003"+
		"\u00f0x\u0000\u0998\u0995\u0001\u0000\u0000\u0000\u0999\u099c\u0001\u0000"+
		"\u0000\u0000\u099a\u0998\u0001\u0000\u0000\u0000\u099a\u099b\u0001\u0000"+
		"\u0000\u0000\u099b\u099d\u0001\u0000\u0000\u0000\u099c\u099a\u0001\u0000"+
		"\u0000\u0000\u099d\u099e\u0005\u0345\u0000\u0000\u099e\u00ed\u0001\u0000"+
		"\u0000\u0000\u099f\u09a0\u0005\u0178\u0000\u0000\u09a0\u09a1\u0005\u0344"+
		"\u0000\u0000\u09a1\u09a8\u0003\u00f0x\u0000\u09a2\u09a4\u0005\u0346\u0000"+
		"\u0000\u09a3\u09a2\u0001\u0000\u0000\u0000\u09a3\u09a4\u0001\u0000\u0000"+
		"\u0000\u09a4\u09a5\u0001\u0000\u0000\u0000\u09a5\u09a7\u0003\u00f0x\u0000"+
		"\u09a6\u09a3\u0001\u0000\u0000\u0000\u09a7\u09aa\u0001\u0000\u0000\u0000"+
		"\u09a8\u09a6\u0001\u0000\u0000\u0000\u09a8\u09a9\u0001\u0000\u0000\u0000"+
		"\u09a9\u09ab\u0001\u0000\u0000\u0000\u09aa\u09a8\u0001\u0000\u0000\u0000"+
		"\u09ab\u09ac\u0005\u0345\u0000\u0000\u09ac\u00ef\u0001\u0000\u0000\u0000"+
		"\u09ad\u09af\u0005\u0267\u0000\u0000\u09ae\u09ad\u0001\u0000\u0000\u0000"+
		"\u09ae\u09af\u0001\u0000\u0000\u0000\u09af\u09e0\u0001\u0000\u0000\u0000"+
		"\u09b0\u09c4\u0005\u009d\u0000\u0000\u09b1\u09b2\u0005\u0344\u0000\u0000"+
		"\u09b2\u09b7\u0003\u00f2y\u0000\u09b3\u09b4\u0005\u0346\u0000\u0000\u09b4"+
		"\u09b6\u0003\u00f2y\u0000\u09b5\u09b3\u0001\u0000\u0000\u0000\u09b6\u09b9"+
		"\u0001\u0000\u0000\u0000\u09b7\u09b5\u0001\u0000\u0000\u0000\u09b7\u09b8"+
		"\u0001\u0000\u0000\u0000\u09b8\u09ba\u0001\u0000\u0000\u0000\u09b9\u09b7"+
		"\u0001\u0000\u0000\u0000\u09ba\u09bb\u0005\u0345\u0000\u0000\u09bb\u09c5"+
		"\u0001\u0000\u0000\u0000\u09bc\u09c1\u0003\u00f2y\u0000\u09bd\u09be\u0005"+
		"\u0346\u0000\u0000\u09be\u09c0\u0003\u00f2y\u0000\u09bf\u09bd\u0001\u0000"+
		"\u0000\u0000\u09c0\u09c3\u0001\u0000\u0000\u0000\u09c1\u09bf\u0001\u0000"+
		"\u0000\u0000\u09c1\u09c2\u0001\u0000\u0000\u0000\u09c2\u09c5\u0001\u0000"+
		"\u0000\u0000\u09c3\u09c1\u0001\u0000\u0000\u0000\u09c4\u09b1\u0001\u0000"+
		"\u0000\u0000\u09c4\u09bc\u0001\u0000\u0000\u0000\u09c5\u09e1\u0001\u0000"+
		"\u0000\u0000\u09c6\u09c7\u0005\u009d\u0000\u0000\u09c7\u09c8\u0005\u032f"+
		"\u0000\u0000\u09c8\u09e1\u0003\u00f2y\u0000\u09c9\u09d8\u0005\u0085\u0000"+
		"\u0000\u09ca\u09cb\u0005\u0344\u0000\u0000\u09cb\u09cc\u0003\u00f2y\u0000"+
		"\u09cc\u09cd\u0005\u0344\u0000\u0000\u09cd\u09d2\u0005\u0328\u0000\u0000"+
		"\u09ce\u09cf\u0005\u0346\u0000\u0000\u09cf\u09d1\u0005\u0328\u0000\u0000"+
		"\u09d0\u09ce\u0001\u0000\u0000\u0000\u09d1\u09d4\u0001\u0000\u0000\u0000"+
		"\u09d2\u09d0\u0001\u0000\u0000\u0000\u09d2\u09d3\u0001\u0000\u0000\u0000"+
		"\u09d3\u09d5\u0001\u0000\u0000\u0000\u09d4\u09d2\u0001\u0000\u0000\u0000"+
		"\u09d5\u09d6\u0005\u0345\u0000\u0000\u09d6\u09d7\u0005\u0345\u0000\u0000"+
		"\u09d7\u09d9\u0001\u0000\u0000\u0000\u09d8\u09ca\u0001\u0000\u0000\u0000"+
		"\u09d8\u09d9\u0001\u0000\u0000\u0000\u09d9\u09e1\u0001\u0000\u0000\u0000"+
		"\u09da\u09e1\u0005\u02cf\u0000\u0000\u09db\u09e1\u0005\u02d9\u0000\u0000"+
		"\u09dc\u09dd\u0005\u02da\u0000\u0000\u09dd\u09de\u0005\u032f\u0000\u0000"+
		"\u09de\u09e1\u0005\u0327\u0000\u0000\u09df\u09e1\u0005\u0328\u0000\u0000"+
		"\u09e0\u09b0\u0001\u0000\u0000\u0000\u09e0\u09c6\u0001\u0000\u0000\u0000"+
		"\u09e0\u09c9\u0001\u0000\u0000\u0000\u09e0\u09da\u0001\u0000\u0000\u0000"+
		"\u09e0\u09db\u0001\u0000\u0000\u0000\u09e0\u09dc\u0001\u0000\u0000\u0000"+
		"\u09e0\u09df\u0001\u0000\u0000\u0000\u09e1\u00f1\u0001\u0000\u0000\u0000"+
		"\u09e2\u09e5\u0003\u0136\u009b\u0000\u09e3\u09e5\u0005\u0327\u0000\u0000"+
		"\u09e4\u09e2\u0001\u0000\u0000\u0000\u09e4\u09e3\u0001\u0000\u0000\u0000"+
		"\u09e5\u00f3\u0001\u0000\u0000\u0000\u09e6\u09e7\u0005\u0344\u0000\u0000"+
		"\u09e7\u09ec\u0003\u00f6{\u0000\u09e8\u09e9\u0005\u0346\u0000\u0000\u09e9"+
		"\u09eb\u0003\u00f6{\u0000\u09ea\u09e8\u0001\u0000\u0000\u0000\u09eb\u09ee"+
		"\u0001\u0000\u0000\u0000\u09ec\u09ea\u0001\u0000\u0000\u0000\u09ec\u09ed"+
		"\u0001\u0000\u0000\u0000\u09ed\u09ef\u0001\u0000\u0000\u0000\u09ee\u09ec"+
		"\u0001\u0000\u0000\u0000\u09ef\u09f0\u0005\u0345\u0000\u0000\u09f0\u00f5"+
		"\u0001\u0000\u0000\u0000\u09f1\u09f4\u0003\u0136\u009b\u0000\u09f2\u09f4"+
		"\u0005\u032b\u0000\u0000\u09f3\u09f1\u0001\u0000\u0000\u0000\u09f3\u09f2"+
		"\u0001\u0000\u0000\u0000\u09f4\u00f7\u0001\u0000\u0000\u0000\u09f5\u09f6"+
		"\u0005\u016e\u0000\u0000\u09f6\u09f7\u0005\u0344\u0000\u0000\u09f7\u09f8"+
		"\u0003\u00fa}\u0000\u09f8\u0a00\u0005\u0345\u0000\u0000\u09f9\u09fa\u0005"+
		"\u0346\u0000\u0000\u09fa\u09fb\u0005\u0344\u0000\u0000\u09fb\u09fc\u0003"+
		"\u00fa}\u0000\u09fc\u09fd\u0005\u0345\u0000\u0000\u09fd\u09ff\u0001\u0000"+
		"\u0000\u0000\u09fe\u09f9\u0001\u0000\u0000\u0000\u09ff\u0a02\u0001\u0000"+
		"\u0000\u0000\u0a00\u09fe\u0001\u0000\u0000\u0000\u0a00\u0a01\u0001\u0000"+
		"\u0000\u0000\u0a01\u00f9\u0001\u0000\u0000\u0000\u0a02\u0a00\u0001\u0000"+
		"\u0000\u0000\u0a03\u0a08\u0003`0\u0000\u0a04\u0a05\u0005\u0346\u0000\u0000"+
		"\u0a05\u0a07\u0003`0\u0000\u0a06\u0a04\u0001\u0000\u0000\u0000\u0a07\u0a0a"+
		"\u0001\u0000\u0000\u0000\u0a08\u0a06\u0001\u0000\u0000\u0000\u0a08\u0a09"+
		"\u0001\u0000\u0000\u0000\u0a09\u00fb\u0001\u0000\u0000\u0000\u0a0a\u0a08"+
		"\u0001\u0000\u0000\u0000\u0a0b\u0a0c\u0007\u001b\u0000\u0000\u0a0c\u0a0d"+
		"\u0005\u0344\u0000\u0000\u0a0d\u0a0e\u0005\u0345\u0000\u0000\u0a0e\u0a16"+
		"\u0003\u0104\u0082\u0000\u0a0f\u0a10\u0005\u026c\u0000\u0000\u0a10\u0a11"+
		"\u0005\u0344\u0000\u0000\u0a11\u0a12\u0003`0\u0000\u0a12\u0a13\u0005\u0345"+
		"\u0000\u0000\u0a13\u0a14\u0003\u0104\u0082\u0000\u0a14\u0a16\u0001\u0000"+
		"\u0000\u0000\u0a15\u0a0b\u0001\u0000\u0000\u0000\u0a15\u0a0f\u0001\u0000"+
		"\u0000\u0000\u0a16\u00fd\u0001\u0000\u0000\u0000\u0a17\u0a18\u0007\u001c"+
		"\u0000\u0000\u0a18\u0a19\u0005\u0344\u0000\u0000\u0a19\u0a1a\u0003\u0102"+
		"\u0081\u0000\u0a1a\u0a1c\u0005\u0345\u0000\u0000\u0a1b\u0a1d\u0003\u0104"+
		"\u0082\u0000\u0a1c\u0a1b\u0001\u0000\u0000\u0000\u0a1c\u0a1d\u0001\u0000"+
		"\u0000\u0000\u0a1d\u0a38\u0001\u0000\u0000\u0000\u0a1e\u0a1f\u0007\u001d"+
		"\u0000\u0000\u0a1f\u0a22\u0005\u0344\u0000\u0000\u0a20\u0a23\u0005\u0349"+
		"\u0000\u0000\u0a21\u0a23\u0003\u0102\u0081\u0000\u0a22\u0a20\u0001\u0000"+
		"\u0000\u0000\u0a22\u0a21\u0001\u0000\u0000\u0000\u0a23\u0a24\u0001\u0000"+
		"\u0000\u0000\u0a24\u0a26\u0005\u0345\u0000\u0000\u0a25\u0a27\u0003\u0104"+
		"\u0082\u0000\u0a26\u0a25\u0001\u0000\u0000\u0000\u0a26\u0a27\u0001\u0000"+
		"\u0000\u0000\u0a27\u0a38\u0001\u0000\u0000\u0000\u0a28\u0a29\u0005\u01b2"+
		"\u0000\u0000\u0a29\u0a2a\u0005\u0344\u0000\u0000\u0a2a\u0a2b\u0003\u0102"+
		"\u0081\u0000\u0a2b\u0a2c\u0005\u0345\u0000\u0000\u0a2c\u0a38\u0001\u0000"+
		"\u0000\u0000\u0a2d\u0a2e\u0005\u020f\u0000\u0000\u0a2e\u0a2f\u0005\u0344"+
		"\u0000\u0000\u0a2f\u0a30\u0003`0\u0000\u0a30\u0a31\u0005\u0345\u0000\u0000"+
		"\u0a31\u0a38\u0001\u0000\u0000\u0000\u0a32\u0a33\u0005\u0210\u0000\u0000"+
		"\u0a33\u0a34\u0005\u0344\u0000\u0000\u0a34\u0a35\u0003\u00fa}\u0000\u0a35"+
		"\u0a36\u0005\u0345\u0000\u0000\u0a36\u0a38\u0001\u0000\u0000\u0000\u0a37"+
		"\u0a17\u0001\u0000\u0000\u0000\u0a37\u0a1e\u0001\u0000\u0000\u0000\u0a37"+
		"\u0a28\u0001\u0000\u0000\u0000\u0a37\u0a2d\u0001\u0000\u0000\u0000\u0a37"+
		"\u0a32\u0001\u0000\u0000\u0000\u0a38\u00ff\u0001\u0000\u0000\u0000\u0a39"+
		"\u0a3a\u0007\u001e\u0000\u0000\u0a3a\u0a3b\u0005\u0344\u0000\u0000\u0a3b"+
		"\u0a3c\u0003`0\u0000\u0a3c\u0a3d\u0005\u0345\u0000\u0000\u0a3d\u0a3e\u0003"+
		"\u0104\u0082\u0000\u0a3e\u0a4e\u0001\u0000\u0000\u0000\u0a3f\u0a40\u0007"+
		"\u001f\u0000\u0000\u0a40\u0a41\u0005\u0344\u0000\u0000\u0a41\u0a48\u0003"+
		"`0\u0000\u0a42\u0a43\u0005\u0346\u0000\u0000\u0a43\u0a46\u0003`0\u0000"+
		"\u0a44\u0a45\u0005\u0346\u0000\u0000\u0a45\u0a47\u0003`0\u0000\u0a46\u0a44"+
		"\u0001\u0000\u0000\u0000\u0a46\u0a47\u0001\u0000\u0000\u0000\u0a47\u0a49"+
		"\u0001\u0000\u0000\u0000\u0a48\u0a42\u0001\u0000\u0000\u0000\u0a48\u0a49"+
		"\u0001\u0000\u0000\u0000\u0a49\u0a4a\u0001\u0000\u0000\u0000\u0a4a\u0a4b"+
		"\u0005\u0345\u0000\u0000\u0a4b\u0a4c\u0003\u0104\u0082\u0000\u0a4c\u0a4e"+
		"\u0001\u0000\u0000\u0000\u0a4d\u0a39\u0001\u0000\u0000\u0000\u0a4d\u0a3f"+
		"\u0001\u0000\u0000\u0000\u0a4e\u0101\u0001\u0000\u0000\u0000\u0a4f\u0a51"+
		"\u0007\u000b\u0000\u0000\u0a50\u0a4f\u0001\u0000\u0000\u0000\u0a50\u0a51"+
		"\u0001\u0000\u0000\u0000\u0a51\u0a52\u0001\u0000\u0000\u0000\u0a52\u0a53"+
		"\u0003`0\u0000\u0a53\u0103\u0001\u0000\u0000\u0000\u0a54\u0a55\u0005\u00ef"+
		"\u0000\u0000\u0a55\u0a59\u0005\u0344\u0000\u0000\u0a56\u0a57\u0005\u027f"+
		"\u0000\u0000\u0a57\u0a58\u0005%\u0000\u0000\u0a58\u0a5a\u0003\u00fa}\u0000"+
		"\u0a59\u0a56\u0001\u0000\u0000\u0000\u0a59\u0a5a\u0001\u0000\u0000\u0000"+
		"\u0a5a\u0a5c\u0001\u0000\u0000\u0000\u0a5b\u0a5d\u0003\u0096K\u0000\u0a5c"+
		"\u0a5b\u0001\u0000\u0000\u0000\u0a5c\u0a5d\u0001\u0000\u0000\u0000\u0a5d"+
		"\u0a5f\u0001\u0000\u0000\u0000\u0a5e\u0a60\u0003\u0106\u0083\u0000\u0a5f"+
		"\u0a5e\u0001\u0000\u0000\u0000\u0a5f\u0a60\u0001\u0000\u0000\u0000\u0a60"+
		"\u0a61\u0001\u0000\u0000\u0000\u0a61\u0a62\u0005\u0345\u0000\u0000\u0a62"+
		"\u0105\u0001\u0000\u0000\u0000\u0a63\u0a64\u0007 \u0000\u0000\u0a64\u0a65"+
		"\u0003\u0108\u0084\u0000\u0a65\u0107\u0001\u0000\u0000\u0000\u0a66\u0a6d"+
		"\u0003\u010c\u0086\u0000\u0a67\u0a68\u0005\u001c\u0000\u0000\u0a68\u0a69"+
		"\u0003\u010a\u0085\u0000\u0a69\u0a6a\u0005\n\u0000\u0000\u0a6a\u0a6b\u0003"+
		"\u010a\u0085\u0000\u0a6b\u0a6d\u0001\u0000\u0000\u0000\u0a6c\u0a66\u0001"+
		"\u0000\u0000\u0000\u0a6c\u0a67\u0001\u0000\u0000\u0000\u0a6d\u0109\u0001"+
		"\u0000\u0000\u0000\u0a6e\u0a71\u0003\u010c\u0086\u0000\u0a6f\u0a71\u0003"+
		"\u010e\u0087\u0000\u0a70\u0a6e\u0001\u0000\u0000\u0000\u0a70\u0a6f\u0001"+
		"\u0000\u0000\u0000\u0a71\u010b\u0001\u0000\u0000\u0000\u0a72\u0a73\u0005"+
		"\u0302\u0000\u0000\u0a73\u0a79\u0005\u0286\u0000\u0000\u0a74\u0a75\u0005"+
		"\u0327\u0000\u0000\u0a75\u0a79\u0005\u0286\u0000\u0000\u0a76\u0a77\u0005"+
		"J\u0000\u0000\u0a77\u0a79\u0005\u02b8\u0000\u0000\u0a78\u0a72\u0001\u0000"+
		"\u0000\u0000\u0a78\u0a74\u0001\u0000\u0000\u0000\u0a78\u0a76\u0001\u0000"+
		"\u0000\u0000\u0a79\u010d\u0001\u0000\u0000\u0000\u0a7a\u0a7b\u0005\u0302"+
		"\u0000\u0000\u0a7b\u0a7f\u0005\u0201\u0000\u0000\u0a7c\u0a7d\u0005\u0327"+
		"\u0000\u0000\u0a7d\u0a7f\u0005\u0201\u0000\u0000\u0a7e\u0a7a\u0001\u0000"+
		"\u0000\u0000\u0a7e\u0a7c\u0001\u0000\u0000\u0000\u0a7f\u010f\u0001\u0000"+
		"\u0000\u0000\u0a80\u0a81\u0003\u0136\u009b\u0000\u0a81\u0a82\u0005\u033f"+
		"\u0000\u0000\u0a82\u0a83\u0003\u0136\u009b\u0000\u0a83\u0a84\u0005\u033f"+
		"\u0000\u0000\u0a84\u0a85\u0003\u0136\u009b\u0000\u0a85\u0a86\u0005\u033f"+
		"\u0000\u0000\u0a86\u0a92\u0001\u0000\u0000\u0000\u0a87\u0a88\u0003\u0136"+
		"\u009b\u0000\u0a88\u0a8a\u0005\u033f\u0000\u0000\u0a89\u0a8b\u0003\u0136"+
		"\u009b\u0000\u0a8a\u0a89\u0001\u0000\u0000\u0000\u0a8a\u0a8b\u0001\u0000"+
		"\u0000\u0000\u0a8b\u0a8c\u0001\u0000\u0000\u0000\u0a8c\u0a8d\u0005\u033f"+
		"\u0000\u0000\u0a8d\u0a92\u0001\u0000\u0000\u0000\u0a8e\u0a8f\u0003\u0136"+
		"\u009b\u0000\u0a8f\u0a90\u0005\u033f\u0000\u0000\u0a90\u0a92\u0001\u0000"+
		"\u0000\u0000\u0a91\u0a80\u0001\u0000\u0000\u0000\u0a91\u0a87\u0001\u0000"+
		"\u0000\u0000\u0a91\u0a8e\u0001\u0000\u0000\u0000\u0a91\u0a92\u0001\u0000"+
		"\u0000\u0000\u0a92\u0a93\u0001\u0000\u0000\u0000\u0a93\u0a94\u0003\u0136"+
		"\u009b\u0000\u0a94\u0111\u0001\u0000\u0000\u0000\u0a95\u0a96\u0003\u0136"+
		"\u009b\u0000\u0a96\u0a98\u0005\u033f\u0000\u0000\u0a97\u0a99\u0003\u0136"+
		"\u009b\u0000\u0a98\u0a97\u0001\u0000\u0000\u0000\u0a98\u0a99\u0001\u0000"+
		"\u0000\u0000\u0a99\u0a9a\u0001\u0000\u0000\u0000\u0a9a\u0a9b\u0005\u033f"+
		"\u0000\u0000\u0a9b\u0aa0\u0001\u0000\u0000\u0000\u0a9c\u0a9d\u0003\u0136"+
		"\u009b\u0000\u0a9d\u0a9e\u0005\u033f\u0000\u0000\u0a9e\u0aa0\u0001\u0000"+
		"\u0000\u0000\u0a9f\u0a95\u0001\u0000\u0000\u0000\u0a9f\u0a9c\u0001\u0000"+
		"\u0000\u0000\u0a9f\u0aa0\u0001\u0000\u0000\u0000\u0aa0\u0aa1\u0001\u0000"+
		"\u0000\u0000\u0aa1\u0ab0\u0003\u0136\u009b\u0000\u0aa2\u0aa3\u0003\u0136"+
		"\u009b\u0000\u0aa3\u0aa5\u0005\u033f\u0000\u0000\u0aa4\u0aa6\u0003\u0136"+
		"\u009b\u0000\u0aa5\u0aa4\u0001\u0000\u0000\u0000\u0aa5\u0aa6\u0001\u0000"+
		"\u0000\u0000\u0aa6\u0aa7\u0001\u0000\u0000\u0000\u0aa7\u0aa8\u0005\u033f"+
		"\u0000\u0000\u0aa8\u0aad\u0001\u0000\u0000\u0000\u0aa9\u0aaa\u0003\u0136"+
		"\u009b\u0000\u0aaa\u0aab\u0005\u033f\u0000\u0000\u0aab\u0aad\u0001\u0000"+
		"\u0000\u0000\u0aac\u0aa2\u0001\u0000\u0000\u0000\u0aac\u0aa9\u0001\u0000"+
		"\u0000\u0000\u0aac\u0aad\u0001\u0000\u0000\u0000\u0aad\u0aae\u0001\u0000"+
		"\u0000\u0000\u0aae\u0ab0\u0005\u001f\u0000\u0000\u0aaf\u0a9f\u0001\u0000"+
		"\u0000\u0000\u0aaf\u0aac\u0001\u0000\u0000\u0000\u0ab0\u0113\u0001\u0000"+
		"\u0000\u0000\u0ab1\u0ab2\u0003\u0136\u009b\u0000\u0ab2\u0ab3\u0005\u033f"+
		"\u0000\u0000\u0ab3\u0ab5\u0001\u0000\u0000\u0000\u0ab4\u0ab1\u0001\u0000"+
		"\u0000\u0000\u0ab4\u0ab5\u0001\u0000\u0000\u0000\u0ab5\u0ab6\u0001\u0000"+
		"\u0000\u0000\u0ab6\u0ab7\u0003\u0136\u009b\u0000\u0ab7\u0115\u0001\u0000"+
		"\u0000\u0000\u0ab8\u0ab9\u0003\u0136\u009b\u0000\u0ab9\u0aba\u0005\u033f"+
		"\u0000\u0000\u0aba\u0abc\u0001\u0000\u0000\u0000\u0abb\u0ab8\u0001\u0000"+
		"\u0000\u0000\u0abb\u0abc\u0001\u0000\u0000\u0000\u0abc\u0abd\u0001\u0000"+
		"\u0000\u0000\u0abd\u0abe\u0003\u0136\u009b\u0000\u0abe\u0117\u0001\u0000"+
		"\u0000\u0000\u0abf\u0acb\u0003\u0116\u008b\u0000\u0ac0\u0ac1\u0003\u0136"+
		"\u009b\u0000\u0ac1\u0ac3\u0005\u033f\u0000\u0000\u0ac2\u0ac4\u0003\u0136"+
		"\u009b\u0000\u0ac3\u0ac2\u0001\u0000\u0000\u0000\u0ac3\u0ac4\u0001\u0000"+
		"\u0000\u0000\u0ac4\u0ac5\u0001\u0000\u0000\u0000\u0ac5\u0ac6\u0005\u033f"+
		"\u0000\u0000\u0ac6\u0ac8\u0001\u0000\u0000\u0000\u0ac7\u0ac0\u0001\u0000"+
		"\u0000\u0000\u0ac7\u0ac8\u0001\u0000\u0000\u0000\u0ac8\u0ac9\u0001\u0000"+
		"\u0000\u0000\u0ac9\u0acb\u0003\u0136\u009b\u0000\u0aca\u0abf\u0001\u0000"+
		"\u0000\u0000\u0aca\u0ac7\u0001\u0000\u0000\u0000\u0acb\u0119\u0001\u0000"+
		"\u0000\u0000\u0acc\u0ada\u0003\u0118\u008c\u0000\u0acd\u0ace\u0003\u0136"+
		"\u009b\u0000\u0ace\u0acf\u0005\u033f\u0000\u0000\u0acf\u0ad0\u0003\u0136"+
		"\u009b\u0000\u0ad0\u0ad2\u0005\u033f\u0000\u0000\u0ad1\u0ad3\u0003\u0136"+
		"\u009b\u0000\u0ad2\u0ad1\u0001\u0000\u0000\u0000\u0ad2\u0ad3\u0001\u0000"+
		"\u0000\u0000\u0ad3\u0ad4\u0001\u0000\u0000\u0000\u0ad4\u0ad5\u0005\u033f"+
		"\u0000\u0000\u0ad5\u0ad7\u0001\u0000\u0000\u0000\u0ad6\u0acd\u0001\u0000"+
		"\u0000\u0000\u0ad6\u0ad7\u0001\u0000\u0000\u0000\u0ad7\u0ad8\u0001\u0000"+
		"\u0000\u0000\u0ad8\u0ada\u0003\u0136\u009b\u0000\u0ad9\u0acc\u0001\u0000"+
		"\u0000\u0000\u0ad9\u0ad6\u0001\u0000\u0000\u0000\u0ada\u011b\u0001\u0000"+
		"\u0000\u0000\u0adb\u0ade\u0003\u0110\u0088\u0000\u0adc\u0ade\u0005\u0322"+
		"\u0000\u0000\u0add\u0adb\u0001\u0000\u0000\u0000\u0add\u0adc\u0001\u0000"+
		"\u0000\u0000\u0ade\u011d\u0001\u0000\u0000\u0000\u0adf\u0ae0\u0003\u0112"+
		"\u0089\u0000\u0ae0\u0ae1\u0005\u033f\u0000\u0000\u0ae1\u0ae3\u0001\u0000"+
		"\u0000\u0000\u0ae2\u0adf\u0001\u0000\u0000\u0000\u0ae2\u0ae3\u0001\u0000"+
		"\u0000\u0000\u0ae3\u0ae4\u0001\u0000\u0000\u0000\u0ae4\u0b10\u0003\u0136"+
		"\u009b\u0000\u0ae5\u0ae6\u0003\u0112\u0089\u0000\u0ae6\u0ae7\u0005\u033f"+
		"\u0000\u0000\u0ae7\u0ae9\u0001\u0000\u0000\u0000\u0ae8\u0ae5\u0001\u0000"+
		"\u0000\u0000\u0ae8\u0ae9\u0001\u0000\u0000\u0000\u0ae9\u0aea\u0001\u0000"+
		"\u0000\u0000\u0aea\u0b10\u0005\u01b7\u0000\u0000\u0aeb\u0aec\u0003\u0112"+
		"\u0089\u0000\u0aec\u0aed\u0005\u033f\u0000\u0000\u0aed\u0aef\u0001\u0000"+
		"\u0000\u0000\u0aee\u0aeb\u0001\u0000\u0000\u0000\u0aee\u0aef\u0001\u0000"+
		"\u0000\u0000\u0aef\u0af0\u0001\u0000\u0000\u0000\u0af0\u0b10\u0005\u02df"+
		"\u0000\u0000\u0af1\u0af2\u0003\u0112\u0089\u0000\u0af2\u0af3\u0005\u033f"+
		"\u0000\u0000\u0af3\u0af5\u0001\u0000\u0000\u0000\u0af4\u0af1\u0001\u0000"+
		"\u0000\u0000\u0af4\u0af5\u0001\u0000\u0000\u0000\u0af5\u0af6\u0001\u0000"+
		"\u0000\u0000\u0af6\u0b10\u0005\u0295\u0000\u0000\u0af7\u0af8\u0003\u0112"+
		"\u0089\u0000\u0af8\u0af9\u0005\u033f\u0000\u0000\u0af9\u0afb\u0001\u0000"+
		"\u0000\u0000\u0afa\u0af7\u0001\u0000\u0000\u0000\u0afa\u0afb\u0001\u0000"+
		"\u0000\u0000\u0afb\u0afc\u0001\u0000\u0000\u0000\u0afc\u0b10\u0005\u0193"+
		"\u0000\u0000\u0afd\u0afe\u0003\u0112\u0089\u0000\u0afe\u0aff\u0005\u033f"+
		"\u0000\u0000\u0aff\u0b01\u0001\u0000\u0000\u0000\u0b00\u0afd\u0001\u0000"+
		"\u0000\u0000\u0b00\u0b01\u0001\u0000\u0000\u0000\u0b01\u0b02\u0001\u0000"+
		"\u0000\u0000\u0b02\u0b10\u0005\u0190\u0000\u0000\u0b03\u0b04\u0003\u0112"+
		"\u0089\u0000\u0b04\u0b05\u0005\u033f\u0000\u0000\u0b05\u0b07\u0001\u0000"+
		"\u0000\u0000\u0b06\u0b03\u0001\u0000\u0000\u0000\u0b06\u0b07\u0001\u0000"+
		"\u0000\u0000\u0b07\u0b08\u0001\u0000\u0000\u0000\u0b08\u0b10\u0005\u018f"+
		"\u0000\u0000\u0b09\u0b0a\u0003\u0112\u0089\u0000\u0b0a\u0b0b\u0005\u033f"+
		"\u0000\u0000\u0b0b\u0b0d\u0001\u0000\u0000\u0000\u0b0c\u0b09\u0001\u0000"+
		"\u0000\u0000\u0b0c\u0b0d\u0001\u0000\u0000\u0000\u0b0d\u0b0e\u0001\u0000"+
		"\u0000\u0000\u0b0e\u0b10\u0005\u018e\u0000\u0000\u0b0f\u0ae2\u0001\u0000"+
		"\u0000\u0000\u0b0f\u0ae8\u0001\u0000\u0000\u0000\u0b0f\u0aee\u0001\u0000"+
		"\u0000\u0000\u0b0f\u0af4\u0001\u0000\u0000\u0000\u0b0f\u0afa\u0001\u0000"+
		"\u0000\u0000\u0b0f\u0b00\u0001\u0000\u0000\u0000\u0b0f\u0b06\u0001\u0000"+
		"\u0000\u0000\u0b0f\u0b0c\u0001\u0000\u0000\u0000\u0b10\u011f\u0001\u0000"+
		"\u0000\u0000\u0b11\u0b13\u0003\u0136\u009b\u0000\u0b12\u0b14\u0007\u0011"+
		"\u0000\u0000\u0b13\u0b12\u0001\u0000\u0000\u0000\u0b13\u0b14\u0001\u0000"+
		"\u0000\u0000\u0b14\u0b1c\u0001\u0000\u0000\u0000\u0b15\u0b16\u0005\u0346"+
		"\u0000\u0000\u0b16\u0b18\u0003\u0136\u009b\u0000\u0b17\u0b19\u0007\u0011"+
		"\u0000\u0000\u0b18\u0b17\u0001\u0000\u0000\u0000\u0b18\u0b19\u0001\u0000"+
		"\u0000\u0000\u0b19\u0b1b\u0001\u0000\u0000\u0000\u0b1a\u0b15\u0001\u0000"+
		"\u0000\u0000\u0b1b\u0b1e\u0001\u0000\u0000\u0000\u0b1c\u0b1a\u0001\u0000"+
		"\u0000\u0000\u0b1c\u0b1d\u0001\u0000\u0000\u0000\u0b1d\u0121\u0001\u0000"+
		"\u0000\u0000\u0b1e\u0b1c\u0001\u0000\u0000\u0000\u0b1f\u0b24\u0003\u0136"+
		"\u009b\u0000\u0b20\u0b21\u0005\u0346\u0000\u0000\u0b21\u0b23\u0003\u0136"+
		"\u009b\u0000\u0b22\u0b20\u0001\u0000\u0000\u0000\u0b23\u0b26\u0001\u0000"+
		"\u0000\u0000\u0b24\u0b22\u0001\u0000\u0000\u0000\u0b24\u0b25\u0001\u0000"+
		"\u0000\u0000\u0b25\u0123\u0001\u0000\u0000\u0000\u0b26\u0b24\u0001\u0000"+
		"\u0000\u0000\u0b27\u0b2a\u0003\u0136\u009b\u0000\u0b28\u0b2a\u0005\u0322"+
		"\u0000\u0000\u0b29\u0b27\u0001\u0000\u0000\u0000\u0b29\u0b28\u0001\u0000"+
		"\u0000\u0000\u0b2a\u0125\u0001\u0000\u0000\u0000\u0b2b\u0b2c\u0007!\u0000"+
		"\u0000\u0b2c\u0127\u0001\u0000\u0000\u0000\u0b2d\u0b2e\u0007\"\u0000\u0000"+
		"\u0b2e\u0129\u0001\u0000\u0000\u0000\u0b2f\u0b31\u0005\u00db\u0000\u0000"+
		"\u0b30\u0b2f\u0001\u0000\u0000\u0000\u0b30\u0b31\u0001\u0000\u0000\u0000"+
		"\u0b31\u0b32\u0001\u0000\u0000\u0000\u0b32\u0b33\u0005\u00de\u0000\u0000"+
		"\u0b33\u012b\u0001\u0000\u0000\u0000\u0b34\u0b3c\u0003\u012a\u0095\u0000"+
		"\u0b35\u0b36\u0005X\u0000\u0000\u0b36\u0b39\u0003v;\u0000\u0b37\u0b38"+
		"\u0005\u0178\u0000\u0000\u0b38\u0b3a\u0005\u016e\u0000\u0000\u0b39\u0b37"+
		"\u0001\u0000\u0000\u0000\u0b39\u0b3a\u0001\u0000\u0000\u0000\u0b3a\u0b3c"+
		"\u0001\u0000\u0000\u0000\u0b3b\u0b34\u0001\u0000\u0000\u0000\u0b3b\u0b35"+
		"\u0001\u0000\u0000\u0000\u0b3c\u012d\u0001\u0000\u0000\u0000\u0b3d\u0b43"+
		"\u0003\u011a\u008d\u0000\u0b3e\u0b43\u0005\u011e\u0000\u0000\u0b3f\u0b43"+
		"\u0005\u00b0\u0000\u0000\u0b40\u0b43\u0005\u01a4\u0000\u0000\u0b41\u0b43"+
		"\u0005\u01b1\u0000\u0000\u0b42\u0b3d\u0001\u0000\u0000\u0000\u0b42\u0b3e"+
		"\u0001\u0000\u0000\u0000\u0b42\u0b3f\u0001\u0000\u0000\u0000\u0b42\u0b40"+
		"\u0001\u0000\u0000\u0000\u0b42\u0b41\u0001\u0000\u0000\u0000\u0b43\u012f"+
		"\u0001\u0000\u0000\u0000\u0b44\u0b46\u0003\u0136\u009b\u0000\u0b45\u0b47"+
		"\u0005\u0095\u0000\u0000\u0b46\u0b45\u0001\u0000\u0000\u0000\u0b46\u0b47"+
		"\u0001\u0000\u0000\u0000\u0b47\u0b4f\u0001\u0000\u0000\u0000\u0b48\u0b49"+
		"\u0005\u0344\u0000\u0000\u0b49\u0b4c\u0007#\u0000\u0000\u0b4a\u0b4b\u0005"+
		"\u0346\u0000\u0000\u0b4b\u0b4d\u0005\u0327\u0000\u0000\u0b4c\u0b4a\u0001"+
		"\u0000\u0000\u0000\u0b4c\u0b4d\u0001\u0000\u0000\u0000\u0b4d\u0b4e\u0001"+
		"\u0000\u0000\u0000\u0b4e\u0b50\u0005\u0345\u0000\u0000\u0b4f\u0b48\u0001"+
		"\u0000\u0000\u0000\u0b4f\u0b50\u0001\u0000\u0000\u0000\u0b50\u0b5a\u0001"+
		"\u0000\u0000\u0000\u0b51\u0b53\u0005c\u0000\u0000\u0b52\u0b54\u0005\u00fd"+
		"\u0000\u0000\u0b53\u0b52\u0001\u0000\u0000\u0000\u0b53\u0b54\u0001\u0000"+
		"\u0000\u0000\u0b54\u0b5a\u0001\u0000\u0000\u0000\u0b55\u0b5a\u0005\u0222"+
		"\u0000\u0000\u0b56\u0b5a\u0005\u02f7\u0000\u0000\u0b57\u0b5a\u0005\u02d8"+
		"\u0000\u0000\u0b58\u0b5a\u0005\u01a2\u0000\u0000\u0b59\u0b44\u0001\u0000"+
		"\u0000\u0000\u0b59\u0b51\u0001\u0000\u0000\u0000\u0b59\u0b55\u0001\u0000"+
		"\u0000\u0000\u0b59\u0b56\u0001\u0000\u0000\u0000\u0b59\u0b57\u0001\u0000"+
		"\u0000\u0000\u0b59\u0b58\u0001\u0000\u0000\u0000\u0b5a\u0131\u0001\u0000"+
		"\u0000\u0000\u0b5b\u0b6b\u0005\u032b\u0000\u0000\u0b5c\u0b6b\u0005\u032c"+
		"\u0000\u0000\u0b5d\u0b5f\u0003\u0134\u009a\u0000\u0b5e\u0b5d\u0001\u0000"+
		"\u0000\u0000\u0b5e\u0b5f\u0001\u0000\u0000\u0000\u0b5f\u0b60\u0001\u0000"+
		"\u0000\u0000\u0b60\u0b6b\u0005\u0327\u0000\u0000\u0b61\u0b63\u0003\u0134"+
		"\u009a\u0000\u0b62\u0b61\u0001\u0000\u0000\u0000\u0b62\u0b63\u0001\u0000"+
		"\u0000\u0000\u0b63\u0b64\u0001\u0000\u0000\u0000\u0b64\u0b6b\u0007\f\u0000"+
		"\u0000\u0b65\u0b67\u0003\u0134\u009a\u0000\u0b66\u0b65\u0001\u0000\u0000"+
		"\u0000\u0b66\u0b67\u0001\u0000\u0000\u0000\u0b67\u0b68\u0001\u0000\u0000"+
		"\u0000\u0b68\u0b69\u0005\u0343\u0000\u0000\u0b69\u0b6b\u0007$\u0000\u0000"+
		"\u0b6a\u0b5b\u0001\u0000\u0000\u0000\u0b6a\u0b5c\u0001\u0000\u0000\u0000"+
		"\u0b6a\u0b5e\u0001\u0000\u0000\u0000\u0b6a\u0b62\u0001\u0000\u0000\u0000"+
		"\u0b6a\u0b66\u0001\u0000\u0000\u0000\u0b6b\u0133\u0001\u0000\u0000\u0000"+
		"\u0b6c\u0b6d\u0007\t\u0000\u0000\u0b6d\u0135\u0001\u0000\u0000\u0000\u0b6e"+
		"\u0b72\u0003\u0138\u009c\u0000\u0b6f\u0b72\u0005\u031f\u0000\u0000\u0b70"+
		"\u0b72\u0005\u0321\u0000\u0000\u0b71\u0b6e\u0001\u0000\u0000\u0000\u0b71"+
		"\u0b6f\u0001\u0000\u0000\u0000\u0b71\u0b70\u0001\u0000\u0000\u0000\u0b72"+
		"\u0137\u0001\u0000\u0000\u0000\u0b73\u0b74\u0007%\u0000\u0000\u0b74\u0139"+
		"\u0001\u0000\u0000\u0000\u0b75\u0b80\u0005\u032f\u0000\u0000\u0b76\u0b80"+
		"\u0005\u0332\u0000\u0000\u0b77\u0b80\u0005\u0331\u0000\u0000\u0b78\u0b80"+
		"\u0005\u0334\u0000\u0000\u0b79\u0b80\u0005\u0333\u0000\u0000\u0b7a\u0b80"+
		"\u0005\u0330\u0000\u0000\u0b7b\u0b7c\u0005\u0335\u0000\u0000\u0b7c\u0b80"+
		"\u0005\u0331\u0000\u0000\u0b7d\u0b7e\u0005\u0335\u0000\u0000\u0b7e\u0b80"+
		"\u0005\u0332\u0000\u0000\u0b7f\u0b75\u0001\u0000\u0000\u0000\u0b7f\u0b76"+
		"\u0001\u0000\u0000\u0000\u0b7f\u0b77\u0001\u0000\u0000\u0000\u0b7f\u0b78"+
		"\u0001\u0000\u0000\u0000\u0b7f\u0b79\u0001\u0000\u0000\u0000\u0b7f\u0b7a"+
		"\u0001\u0000\u0000\u0000\u0b7f\u0b7b\u0001\u0000\u0000\u0000\u0b7f\u0b7d"+
		"\u0001\u0000\u0000\u0000\u0b80\u013b\u0001\u0000\u0000\u0000\u0b81\u0b82"+
		"\u0007&\u0000\u0000\u0b82\u013d\u0001\u0000\u0000\u0000\u0199\u0141\u014a"+
		"\u014e\u0152\u0158\u0164\u016a\u016d\u0172\u0177\u017a\u0181\u0187\u0189"+
		"\u018e\u0194\u019a\u019f\u01a5\u01ac\u01b1\u01b6\u01bb\u01be\u01c2\u01c6"+
		"\u01ca\u01ce\u01d3\u01d7\u01db\u01de\u01e6\u01ea\u01ed\u01f1\u01f4\u01f8"+
		"\u01ff\u0203\u0205\u0207\u020a\u020d\u0210\u0216\u0219\u0221\u0223\u0226"+
		"\u022a\u022d\u0233\u0236\u023a\u023d\u0240\u0247\u024a\u024e\u0251\u0254"+
		"\u0257\u025a\u0262\u0264\u0268\u026b\u0273\u0277\u027b\u0282\u0286\u0288"+
		"\u028a\u028d\u0290\u0293\u029b\u02a1\u02a7\u02a9\u02ad\u02b0\u02b5\u02ba"+
		"\u02bd\u02c1\u02c4\u02d2\u02d6\u02d9\u02dd\u02e0\u02e8\u02ed\u02f2\u02f8"+
		"\u02fd\u0300\u0309\u0313\u0316\u031f\u0327\u032a\u0331\u0334\u0362\u0366"+
		"\u0369\u0373\u0375\u037b\u0382\u038a\u038d\u0390\u0399\u03a3\u03a7\u03ad"+
		"\u03b4\u03b8\u03bc\u03cd\u03d1\u03db\u03df\u03e6\u03e9\u03ec\u03f4\u03f9"+
		"\u03fe\u0401\u0403\u0407\u040b\u040e\u0412\u0418\u041d\u0423\u0429\u042d"+
		"\u0430\u0434\u0438\u0440\u0445\u0447\u044a\u044f\u0458\u045c\u0461\u0464"+
		"\u0467\u046d\u0475\u047d\u0480\u0483\u0487\u048c\u048f\u0495\u0499\u049f"+
		"\u04a7\u04ad\u04af\u04b2\u04c1\u04c4\u04c7\u04c9\u04d4\u04df\u04e8\u04f2"+
		"\u04f6\u0504\u0517\u0519\u051f\u0529\u052b\u0532\u053c\u053e\u0543\u0549"+
		"\u0554\u055b\u055f\u0567\u056b\u056f\u0575\u057f\u0589\u0590\u0597\u05a0"+
		"\u05a7\u05ae\u05b7\u05bb\u05c5\u05cc\u05d4\u05dc\u05e0\u05f6\u05ff\u0605"+
		"\u060b\u0611\u061c\u0623\u062b\u0632\u0637\u063c\u0640\u0647\u064b\u064e"+
		"\u0653\u0657\u065b\u0660\u0667\u066a\u066e\u0673\u0677\u0680\u0687\u0690"+
		"\u069c\u069e\u06a8\u06ab\u06b0\u06b9\u06bb\u06bd\u06c2\u06ca\u06cf\u06d7"+
		"\u06dc\u06e2\u06ec\u06ee\u06f2\u06f6\u06f8\u0701\u0703\u0707\u0712\u0734"+
		"\u0744\u074b\u074d\u0754\u075d\u0765\u076c\u0773\u0776\u0779\u0780\u0787"+
		"\u078a\u078c\u0794\u0796\u079c\u07a3\u07ab\u07b1\u07b6\u07ba\u07be\u07c3"+
		"\u07c5\u07cd\u07cf\u07d3\u07da\u07dc\u07e3\u07e8\u07ec\u07f5\u07fd\u0804"+
		"\u080a\u0815\u0819\u081b\u081e\u0836\u084f\u0854\u0868\u086c\u0870\u0880"+
		"\u0894\u08ce\u08d2\u0902\u0912\u0914\u091b\u0921\u092e\u093d\u0948\u094d"+
		"\u0957\u0960\u0982\u0987\u098d\u0990\u0995\u099a\u09a3\u09a8\u09ae\u09b7"+
		"\u09c1\u09c4\u09d2\u09d8\u09e0\u09e4\u09ec\u09f3\u0a00\u0a08\u0a15\u0a1c"+
		"\u0a22\u0a26\u0a37\u0a46\u0a48\u0a4d\u0a50\u0a59\u0a5c\u0a5f\u0a6c\u0a70"+
		"\u0a78\u0a7e\u0a8a\u0a91\u0a98\u0a9f\u0aa5\u0aac\u0aaf\u0ab4\u0abb\u0ac3"+
		"\u0ac7\u0aca\u0ad2\u0ad6\u0ad9\u0add\u0ae2\u0ae8\u0aee\u0af4\u0afa\u0b00"+
		"\u0b06\u0b0c\u0b0f\u0b13\u0b18\u0b1c\u0b24\u0b29\u0b30\u0b39\u0b3b\u0b42"+
		"\u0b46\u0b4c\u0b4f\u0b53\u0b59\u0b5e\u0b62\u0b66\u0b6a\u0b71\u0b7f";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}